<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客 - Re:從零開始的軟體開發生活</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Re:從零開始的軟體開發生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2023-01-07T06:44:57.139Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ML.NET p-Value calculated outside expected [0,1] range</title>
    <link href="https://rainmakerho.github.io/2023/01/07/ml-net-p-value-outside-0-1-range/"/>
    <id>https://rainmakerho.github.io/2023/01/07/ml-net-p-value-outside-0-1-range/</id>
    <published>2023-01-07T05:25:46.000Z</published>
    <updated>2023-01-07T06:44:57.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>使用 ML.NET 中的 OlsTrainer 來預測資料，<br>當使用到某些資料進行模型定型時，<br>卻會發生 <code>System.InvalidOperationException: p-Value calculated outside expected [0,1] range</code> 的錯誤</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>類似<a href="https://learn.microsoft.com/zh-tw/dotnet/machine-learning/tutorials/predict-prices?source=recommendations" target="_blank" rel="noopener">使用回歸搭配 ML.net 來預測價格</a>的程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> datePipeline = mlContext.Transforms.Text.NormalizeText(<span class="string">"Date"</span>);</span><br><span class="line"><span class="keyword">var</span> featuresPipeline = mlContext.Transforms.Concatenate(<span class="string">"Features"</span>, <span class="string">"X1"</span>, <span class="string">"X2"</span>, <span class="string">"X3"</span>);</span><br><span class="line">IEstimator&lt;ITransformer&gt; pipeline = datePipeline.Append(featuresPipeline);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pipeline.Append(mlContext.Regression.Trainers.Ols());</span><br><span class="line"><span class="comment">//在某些資料以下會噴 p-Value calculated outside expected [0,1] range error</span></span><br><span class="line"><span class="keyword">var</span> model = pipeline.Fit(dataView);</span><br></pre></td></tr></table></figure><p>後來參考 <a href="https://learn.microsoft.com/zh-tw/dotnet/machine-learning/how-to-guides/prepare-data-ml-net" target="_blank" rel="noopener">準備資料以建置模型</a> ，<br>針對各個 <code>Feature</code> 加入<strong>正規化</strong>處理，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> datePipeline = mlContext.Transforms.Text.NormalizeText(<span class="string">"Date"</span>);</span><br><span class="line"><span class="keyword">var</span> featuresPipeline = mlContext.Transforms.Concatenate(<span class="string">"Features"</span>, <span class="string">"X1"</span>, <span class="string">"X2"</span>, <span class="string">"X3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Fix p-Value calculated outside expected [0,1] range error</span></span><br><span class="line">IEstimator&lt;ITransformer&gt; pipeline = datePipeline</span><br><span class="line">    .Append(mlContext.Transforms.NormalizeMinMax(<span class="string">"X1"</span>))</span><br><span class="line">    .Append(mlContext.Transforms.NormalizeMinMax(<span class="string">"X2"</span>))</span><br><span class="line">    .Append(mlContext.Transforms.NormalizeMinMax(<span class="string">"X3"</span>))</span><br><span class="line">    .Append(featuresPipeline);</span><br><span class="line"></span><br><span class="line"><span class="comment">// var featuresNormalize = mlContext.Transforms.NormalizeMinMax("Features", "Features");</span></span><br><span class="line"><span class="comment">// pipeline.Append(featuresNormalize);</span></span><br><span class="line"></span><br><span class="line">pipeline.Append(mlContext.Regression.Trainers.Ols());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> model = pipeline.Fit(dataView);</span><br></pre></td></tr></table></figure><ul><li>註:您也可以使用其他的正規化 Method，詳細請參考 <a href="https://learn.microsoft.com/zh-tw/dotnet/api/microsoft.ml.normalizationcatalog?view=ml-dotnet" target="_blank" rel="noopener">NormalizationCatalog 類別</a></li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://learn.microsoft.com/zh-tw/dotnet/machine-learning/how-to-guides/prepare-data-ml-net" target="_blank" rel="noopener">準備資料以建置模型</a><br><a href="https://learn.microsoft.com/zh-tw/dotnet/machine-learning/tutorials/predict-prices?source=recommendations" target="_blank" rel="noopener">使用回歸搭配 ML.net 來預測價格</a><br><a href="https://rubikscode.net/2021/01/11/machine-learning-with-ml-net-linear-regression/" target="_blank" rel="noopener">Machine Learning with ML.NET – Linear Regression</a><br><a href="https://learn.microsoft.com/zh-tw/dotnet/api/microsoft.ml.normalizationcatalog?view=ml-dotnet" target="_blank" rel="noopener">NormalizationCatalog 類別</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;使用 ML.NET 中的 OlsTrainer 來預測資料，&lt;br&gt;當使用到某些資料進行模型定型時，&lt;br&gt;卻會發生 &lt;code&gt;Syste
      
    
    </summary>
    
    
      <category term="ML.NET" scheme="https://rainmakerho.github.io/tags/ML-NET/"/>
    
      <category term="p-Value" scheme="https://rainmakerho.github.io/tags/p-Value/"/>
    
      <category term="0x80131509" scheme="https://rainmakerho.github.io/tags/0x80131509/"/>
    
      <category term="outside expected" scheme="https://rainmakerho.github.io/tags/outside-expected/"/>
    
      <category term="Regression.Trainers.Ols" scheme="https://rainmakerho.github.io/tags/Regression-Trainers-Ols/"/>
    
  </entry>
  
  <entry>
    <title>C# Input string was not in a correct format.</title>
    <link href="https://rainmakerho.github.io/2023/01/06/input-string-was-not-in-a-correct-format/"/>
    <id>https://rainmakerho.github.io/2023/01/06/input-string-was-not-in-a-correct-format/</id>
    <published>2023-01-06T03:58:29.000Z</published>
    <updated>2023-01-06T04:04:47.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>程式要要透過 string.Format 的方式來改變 json 字串的內容。<br>結果發生了 <strong>Input string was not in a correct format</strong> 的錯誤</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因為 <strong>string.Format</strong> 會看字串中的 <code>{}</code> 所以 json 就會遇到了問題。<br>原本的程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tempStr = <span class="string">@"&#123;</span></span><br><span class="line"><span class="string">        ""FormNo"":""&#123;0&#125;"",</span></span><br><span class="line"><span class="string">        ""TenantDataList"": [</span></span><br><span class="line"><span class="string">        &#123;""TenantID"":""G001""&#125;,</span></span><br><span class="line"><span class="string">        &#123;""TenantID"":""G002""&#125;</span></span><br><span class="line"><span class="string">          ]</span></span><br><span class="line"><span class="string">        &#125;"</span>;</span><br><span class="line"><span class="keyword">var</span> json = <span class="keyword">string</span>.Format(tempStr, <span class="string">"Doc1"</span>);</span><br></pre></td></tr></table></figure><p>那怎麼解呢?<br>就是重覆 <code>{</code> or <code>}</code> ，<br>所以調整後的程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tempStr = <span class="string">@"&#123;&#123;</span></span><br><span class="line"><span class="string">        ""FormNo"":""&#123;0&#125;"",</span></span><br><span class="line"><span class="string">        ""TenantDataList"": [</span></span><br><span class="line"><span class="string">        &#123;&#123;""TenantID"":""G001""&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;&#123;""TenantID"":""G002""&#125;&#125;</span></span><br><span class="line"><span class="string">          ]</span></span><br><span class="line"><span class="string">        &#125;&#125;"</span>;</span><br><span class="line"><span class="keyword">var</span> json = <span class="keyword">string</span>.Format(tempStr, <span class="string">"Doc1"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;程式要要透過 string.Format 的方式來改變 json 字串的內容。&lt;br&gt;結果發生了 &lt;strong&gt;Input string 
      
    
    </summary>
    
    
      <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
      <category term="string.Format" scheme="https://rainmakerho.github.io/tags/string-Format/"/>
    
      <category term="json" scheme="https://rainmakerho.github.io/tags/json/"/>
    
      <category term="System.FormatException" scheme="https://rainmakerho.github.io/tags/System-FormatException/"/>
    
      <category term="Input string was not in a correct format" scheme="https://rainmakerho.github.io/tags/Input-string-was-not-in-a-correct-format/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx DOM_Open_Redirect</title>
    <link href="https://rainmakerho.github.io/2023/01/06/checkmarx-client-dom-open-redirect/"/>
    <id>https://rainmakerho.github.io/2023/01/06/checkmarx-client-dom-open-redirect/</id>
    <published>2023-01-06T03:31:40.000Z</published>
    <updated>2023-01-06T03:48:52.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>程式中的 js 檔中，在 click event 中，從 DOM 取得它的屬性做為 url 去改變 Anchor 的 href 屬性。<br>Checkmarx 就會出 <strong>Client_Potential_DOM_Open_Redirect</strong> 的問題，<br>從 <code>attr</code> 到 <code>href</code></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>原本的 js 類似如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actionUrl = $tablist.attr(<span class="string">"action-url"</span>);</span><br><span class="line"><span class="comment">//.... other codes</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">a.target = <span class="string">"_blank"</span>;</span><br><span class="line">a.href = actionUrl;</span><br></pre></td></tr></table></figure><p>因為 url 是從 DOM 屬性得，所以有被竄改的風險。<br>所以修改方式有以下方式，</p><p>1.固定的 url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var actionUrl = $tablist.attr('action-url');</span></span><br><span class="line"><span class="keyword">var</span> actionUrl = <span class="string">"https://localhost/doc/action/"</span>;</span><br><span class="line"><span class="comment">//.... other codes</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">a.target = <span class="string">"_blank"</span>;</span><br><span class="line">a.href = actionUrl;</span><br></pre></td></tr></table></figure><p>2.從 Server 端取回需要的 url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var actionUrl = $tablist.attr('action-url');</span></span><br><span class="line"><span class="keyword">var</span> urlId = $tablist.attr(<span class="string">"action-url-id"</span>);</span><br><span class="line"><span class="keyword">var</span> actionUrl = <span class="string">""</span>;</span><br><span class="line">fetch(<span class="string">"./api/urls/"</span> + urlId)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> (actionUrl = data.url));</span><br><span class="line"><span class="comment">//.... other codes</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">a.target = <span class="string">"_blank"</span>;</span><br><span class="line">a.href = actionUrl;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;程式中的 js 檔中，在 click event 中，從 DOM 取得它的屬性做為 url 去改變 Anchor 的 href 屬性。&lt;br
      
    
    </summary>
    
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="Client_DOM_Open_Redirect" scheme="https://rainmakerho.github.io/tags/Client-DOM-Open-Redirect/"/>
    
      <category term="Client_Potential_DOM_Open_Redirect" scheme="https://rainmakerho.github.io/tags/Client-Potential-DOM-Open-Redirect/"/>
    
  </entry>
  
  <entry>
    <title>將 Http Trigger Function 內容寫到 Queue 中，並透過 Queue trigger Function 取出來，存到 Blob</title>
    <link href="https://rainmakerho.github.io/2022/12/29/azure-function-bindings-triggers/"/>
    <id>https://rainmakerho.github.io/2022/12/29/azure-function-bindings-triggers/</id>
    <published>2022-12-29T07:32:05.000Z</published>
    <updated>2022-12-29T13:01:44.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇<a href="https://rainmakerho.github.io/2022/12/29/azure-function-by-vs/">使用 Visual Studio 建立 Azure Function</a>，<br>建立了一個 Http Trigger Function ，是將 訊息 Response 出去，<br>接下來可以將<strong>訊息</strong>放到 Storage Queue 之中，<br>並新增一個 Queue trigger Function 來取得 Queue 中的資料，<br>並存到 Blob 之中</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>1.加入 Microsoft.Azure.WebJobs.Extensions.Storage 及 Azure.Storage.Blobs 套件<br><img src="/2022/12/29/azure-function-bindings-triggers/01.png" title="nuget"><br>在 Nuget 中加入 Microsoft.Azure.WebJobs.Extensions.Storage 及 Azure.Storage.Blobs 套件</p><p>2.加入 Queue 的 Binding<br>原有的 Function1 加入 Queue 的 Binding (<code>[Queue(&quot;messages&quot;, Connection=&quot;AzureWebJobsStorage&quot;)] IAsyncCollector&lt;string&gt; messageQueue</code>)，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Azure.WebJobs;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Azure.WebJobs.Extensions.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Function1</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">FunctionName(<span class="meta-string">"Function1"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Run</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        [HttpTrigger(AuthorizationLevel.Anonymous, <span class="string">"get"</span>, <span class="string">"post"</span>, Route = <span class="literal">null</span></span>)] HttpRequest req,</span></span><br><span class="line"><span class="function">        [<span class="title">Queue</span>(<span class="params"><span class="string">"messages"</span>, Connection=<span class="string">"AzureWebJobsStorage"</span></span>)] IAsyncCollector&lt;<span class="keyword">string</span>&gt; messageQueue,</span></span><br><span class="line"><span class="function">        ILogger log)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.LogInformation(<span class="string">"C# HTTP trigger function processed a request."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> name = req.Query[<span class="string">"name"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> requestBody = <span class="keyword">await</span> <span class="keyword">new</span> StreamReader(req.Body).ReadToEndAsync();</span><br><span class="line">        <span class="keyword">dynamic</span> data = JsonConvert.DeserializeObject(requestBody);</span><br><span class="line">        name = name ?? data?.name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> responseMessage = <span class="keyword">string</span>.IsNullOrEmpty(name)</span><br><span class="line">            ? <span class="string">"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response."</span></span><br><span class="line">            : <span class="string">$"Hello, <span class="subst">&#123;name&#125;</span>. This HTTP triggered function executed successfully."</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> messageQueue.AddAsync(responseMessage);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkObjectResult(responseMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定好 Queue 的 Binding 後，就可以將訊息放到 Queue 之中(<code>await messageQueue.AddAsync(responseMessage)</code>)<br>因為是使用 Local 測試，所以 Connection 設定為 AzureWebJobsStorage</p><p>這裡可以先執行程式，試一下訊息是否會新增到 Queue 之中，<br>可以透過 <a href="https://azure.microsoft.com/en-us/products/storage/storage-explorer/" target="_blank" rel="noopener">Azure Storage Explorer</a> 來查看<br><img src="/2022/12/29/azure-function-bindings-triggers/02.png" title="Queue"></p><p>3.新增 Queue trigger Function<br>新增名稱為 QueueListeners 的 Queue trigger Function，<br>並設定 Connection string setting name 及 Queue name<br><img src="/2022/12/29/azure-function-bindings-triggers/03.png" title="Queue trigger Function"></p><p>4.加入 Blob 的 Binding<br>因為要將 Queue 內的訊息寫到 Blog 之中，<br>所以在 QueueListeners 的 Run Method 要加入 Blob 的 Binding</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Azure.Storage.Blobs;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Azure.WebJobs;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QueueListeners</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">FunctionName(<span class="meta-string">"QueueListeners"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Run</span>(<span class="params">[QueueTrigger(<span class="string">"messages"</span>, Connection = <span class="string">"AzureWebJobsStorage"</span></span>)]<span class="keyword">string</span> message,</span></span><br><span class="line"><span class="function">        [<span class="title">Blob</span>(<span class="params"><span class="string">"messages"</span>, Connection = <span class="string">"AzureWebJobsStorage"</span></span>)] BlobContainerClient container,</span></span><br><span class="line"><span class="function">        ILogger log)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">await</span> container.CreateIfNotExistsAsync();</span><br><span class="line">        <span class="keyword">var</span> blob = container.GetBlobClient(<span class="string">$"<span class="subst">&#123;Guid.NewGuid().ToString(<span class="string">"N"</span>)&#125;</span>.txt"</span>);</span><br><span class="line">        <span class="keyword">await</span> blob.UploadAsync(BinaryData.FromString(<span class="string">$"Message:<span class="subst">&#123;message&#125;</span>"</span>), overwrite: <span class="literal">true</span>);</span><br><span class="line">        log.LogInformation(<span class="string">$"C# Queue trigger function processed: <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當 messages Queue 有訊息時，就會 Trigger QueueListeners Function，<br>並將訊息當成參數傳入，所以再將訊息透過 <code>UploadAsync</code> 寫到 Blob</p><p>執行後，可以發現 message Queue 中的訊息已被 QueueListeners Function 處理完畢，<br>messages Blob 將每個 message Queue 的訊息存成文字檔。<br><img src="/2022/12/29/azure-function-bindings-triggers/04.png" title="message Blob"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/storage/Azure.Storage.Blobs/AzureStorageNetMigrationV12.md#migrating-from-cloudblockblob" target="_blank" rel="noopener">Migration Guide: From Microsoft.Azure.Storage.Blob to Azure.Storage.Blobs</a><br><a href="https://markheath.net/post/azure-functions-table-storage" target="_blank" rel="noopener">Update Your Azure Functions Table Storage Bindings</a><br><a href="https://azure.microsoft.com/en-us/products/storage/storage-explorer/" target="_blank" rel="noopener">Azure Storage Explorer</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇&lt;a href=&quot;https://rainmakerho.github.io/2022/12/29/azure-function-b
      
    
    </summary>
    
    
      <category term="Azure Function" scheme="https://rainmakerho.github.io/tags/Azure-Function/"/>
    
      <category term="Function App" scheme="https://rainmakerho.github.io/tags/Function-App/"/>
    
      <category term="Queue trigger" scheme="https://rainmakerho.github.io/tags/Queue-trigger/"/>
    
      <category term="Blob" scheme="https://rainmakerho.github.io/tags/Blob/"/>
    
  </entry>
  
  <entry>
    <title>使用 Visual Studio 建立 Azure Function</title>
    <link href="https://rainmakerho.github.io/2022/12/29/azure-function-by-vs/"/>
    <id>https://rainmakerho.github.io/2022/12/29/azure-function-by-vs/</id>
    <published>2022-12-29T01:51:28.000Z</published>
    <updated>2022-12-29T05:20:17.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://portal.azure.com/" target="_blank" rel="noopener">Azure Portal</a> 可以容易的建立 Function App。<br>以下將一步步透過 Visual Studio 來建立 Azure Function App</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>1.確認 <strong>Azure 開發</strong> 有安裝<br>在 Visual Studio Installer 中，請確認 <strong>Azure 開發</strong> 有安裝<br><img src="/2022/12/29/azure-function-by-vs/01.png" title="Azure開發"></p><p>2.建立 <strong>Azure Functions</strong> 專案<br><img src="/2022/12/29/azure-function-by-vs/02.png" title="Filter-Template"><br>輸入 function 來篩選 Visual Studio 的範本</p><img src="/2022/12/29/azure-function-by-vs/03.png" title="Project Name"><p>設定專案名稱為 FunctionApp1</p><img src="/2022/12/29/azure-function-by-vs/04.png" title="Others"><p>設定 .NET 6.0 ，先不建立 Function ，並勾選<strong>將 Azurite 用於執行階段 儲存帳戶(AzureWebJobsStorage)</strong>(在 local 模擬)</p><img src="/2022/12/29/azure-function-by-vs/05.png" title="azurite.exe"><p>因為勾選 <strong>azuite</strong> 所以專案建立好之後，會啟動它</p><p>3.Check local.settings.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"IsEncrypted"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"Values"</span>: &#123;</span><br><span class="line">    <span class="attr">"AzureWebJobsStorage"</span>: <span class="string">"UseDevelopmentStorage=true"</span>,</span><br><span class="line">    <span class="attr">"FUNCTIONS_WORKER_RUNTIME"</span>: <span class="string">"dotnet"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為勾選<strong>將 Azurite 用於執行階段 儲存帳戶(AzureWebJobsStorage)</strong>，<br>所以 local.settings.json 中 AzureWebJobsStorage 值為 <strong>UseDevelopmentStorage=true</strong></p><p>4.新增 Http Trigger Function<br><img src="/2022/12/29/azure-function-by-vs/06.png" title="new function"><br>新增 Http Trigger 為範本的 Function，並將 Authorization level 設定為 Anonymous，<br>讓測試時，不需要驗證</p><p>5.Check 專案內容<br><img src="/2022/12/29/azure-function-by-vs/07.png" title="project"><br>Function1 附檔名是 cs (在 Portal 上的是 csx)，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Function1</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">FunctionName(<span class="meta-string">"Function1"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Run</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        [HttpTrigger(AuthorizationLevel.Anonymous, <span class="string">"get"</span>, <span class="string">"post"</span>, Route = <span class="literal">null</span></span>)] HttpRequest req,</span></span><br><span class="line"><span class="function">        ILogger log)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        log.LogInformation(<span class="string">"C# HTTP trigger function processed a request."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> name = req.Query[<span class="string">"name"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> requestBody = <span class="keyword">await</span> <span class="keyword">new</span> StreamReader(req.Body).ReadToEndAsync();</span><br><span class="line">        <span class="keyword">dynamic</span> data = JsonConvert.DeserializeObject(requestBody);</span><br><span class="line">        name = name ?? data?.name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> responseMessage = <span class="keyword">string</span>.IsNullOrEmpty(name)</span><br><span class="line">            ? <span class="string">"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response."</span></span><br><span class="line">            : <span class="string">$"Hello, <span class="subst">&#123;name&#125;</span>. This HTTP triggered function executed successfully."</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkObjectResult(responseMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FunctionName 設定為 Function1 ，<br>可以發現並沒有 <strong>Function.json</strong> ，<br>因為在 Build 專案後，自動產生出來。<br><img src="/2022/12/29/azure-function-by-vs/08.png" title="net6.0"></p><img src="/2022/12/29/azure-function-by-vs/09.png" title="function.json"><p>執行 Function1 會執行 FunctionApp1.dll 中的 Function1.Run Method</p><p>6.執行程式<br>按下執行會開啟命令視窗，並顯示 Function1 的 Url，<br>在 Browser 輸入該 Url 就可以進行測試，<br><img src="/2022/12/29/azure-function-by-vs/10.png" title="Run"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/zh-tw/azure/azure-functions/functions-run-local" target="_blank" rel="noopener">使用 Azure Functions Core Tools</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://portal.azure.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A
      
    
    </summary>
    
    
      <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
      <category term="Visual Studio" scheme="https://rainmakerho.github.io/tags/Visual-Studio/"/>
    
      <category term="Azure Function" scheme="https://rainmakerho.github.io/tags/Azure-Function/"/>
    
      <category term="Function App" scheme="https://rainmakerho.github.io/tags/Function-App/"/>
    
  </entry>
  
  <entry>
    <title>在 SQL Graph 資料表中找某個 Node 的所有 Path</title>
    <link href="https://rainmakerho.github.io/2022/12/27/mssql-graph-query-find-all-path-node/"/>
    <id>https://rainmakerho.github.io/2022/12/27/mssql-graph-query-find-all-path-node/</id>
    <published>2022-12-27T07:17:58.000Z</published>
    <updated>2022-12-27T08:00:08.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近將資料存到 MSSQL 的 Graph Table 之中，<br>想要查到某個 Node 在所有關系中路徑，例如下圖 C 的所有 Path。<br>剛好跟這篇<a href="https://stackoverflow.com/questions/59632206/sql-server-graph-query-find-all-paths-to-node" target="_blank" rel="noopener">sql server graph query, find all paths to node</a>的問題相同。<br><img src="/2022/12/27/mssql-graph-query-find-all-path-node/01.png" title="關係圖"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>依<a href="https://stackoverflow.com/users/6609966/sanora" target="_blank" rel="noopener">sanora</a>提供的<a href="https://dbfiddle.uk/47z650iA" target="_blank" rel="noopener">範例</a>可以分別取得 開始為 C 的整個路徑 及 結束為 C 的整個路徑。<br>初始資料如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> Person;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Person (userName <span class="built_in">VARCHAR</span>(<span class="number">100</span>)  PRIMARY <span class="keyword">KEY</span>) <span class="keyword">AS</span> NODE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Person (userName) <span class="keyword">VALUES</span> (<span class="string">'A'</span>),(<span class="string">'B'</span>),(<span class="string">'C'</span>),(<span class="string">'D'</span>),(<span class="string">'E'</span>),(<span class="string">'F'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> Follow;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Follow <span class="keyword">AS</span> EDGE;</span><br><span class="line"></span><br><span class="line"><span class="comment">--建立如上圖的關係資料</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Follow ($from_id, $to_id) <span class="keyword">VALUES</span> (</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'A'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'E'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'E'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'C'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'C'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'A'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'A'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'F'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'F'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'B'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'B'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'F'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'B'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'E'</span>)),</span><br><span class="line"></span><br><span class="line">   ((<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'E'</span>),</span><br><span class="line">   (<span class="keyword">SELECT</span> $node_id <span class="keyword">FROM</span> dbo.Person <span class="keyword">WHERE</span> userName = <span class="string">'B'</span>));</span><br></pre></td></tr></table></figure><p>要找路徑的話，可以透過 <a href="https://learn.microsoft.com/en-us/sql/relational-databases/graphs/sql-graph-shortest-path?view=sql-server-ver16" target="_blank" rel="noopener">SHORTEST_PATH</a> 這個 Fuction ，<br>並給它要查詢的 Node 及 Edge Pattern ，<br>例如 Query 1 ，找開始節點為 C (<code>p1.userName = &#39;C&#39;</code>)的所有路徑(使用 <strong>+</strong>)，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        p1.userName,</span><br><span class="line">        p1.userName <span class="keyword">as</span> StartNode,</span><br><span class="line">        <span class="keyword">LAST_VALUE</span>(p2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> FinalNode,</span><br><span class="line">        STRING_AGG(p2.userName,<span class="string">'-&gt;'</span>) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> [Edges <span class="keyword">Path</span>],</span><br><span class="line">        <span class="keyword">COUNT</span>(p2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> <span class="keyword">Levels</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        dbo.Person p1,</span><br><span class="line">        dbo.Person <span class="keyword">FOR</span> <span class="keyword">PATH</span> p2,</span><br><span class="line">        dbo.Follow <span class="keyword">FOR</span> <span class="keyword">PATH</span> Follow</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        <span class="keyword">MATCH</span>(SHORTEST_PATH(p1(-(Follow)-&gt;p2)+))</span><br><span class="line">        <span class="keyword">AND</span> p1.userName = <span class="string">'C'</span>;</span><br></pre></td></tr></table></figure><p>結果如下，<br><img src="/2022/12/27/mssql-graph-query-find-all-path-node/02.png" title="C開頭"></p><p>再來要找出最後節點為 C 的所有路徑，<br>因為最後節點要 Search 過之後才會知道，<br>所以這裡用 SubQuery 後，再來過濾 <code>FinalNode = &#39;C&#39;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Query 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- To find all the incoming connection for a node,</span></span><br><span class="line"><span class="comment">-- we need to wrap the query and filter for the final node like below:</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- <span class="doctag">NOTE:</span> There is a TYPO in the SO thread. The regex '+' is missing from SHORTEST_PATH.</span></span><br><span class="line"><span class="comment">-- See above Query 1 for the correct syntax</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    username, StartNode, [Edges <span class="keyword">Path</span>], FinalNode, <span class="keyword">Levels</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        P1.username,</span><br><span class="line">        P1.username <span class="keyword">as</span> StartNode,</span><br><span class="line">        STRING_AGG(P2.userName,<span class="string">'-&gt;'</span>) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> [Edges <span class="keyword">Path</span>],</span><br><span class="line">        <span class="keyword">LAST_VALUE</span>(P2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> FinalNode,</span><br><span class="line">        <span class="keyword">COUNT</span>(P2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> <span class="keyword">Levels</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        Person P1,</span><br><span class="line">        Person <span class="keyword">FOR</span> <span class="keyword">PATH</span> P2,</span><br><span class="line">        Follow <span class="keyword">FOR</span> <span class="keyword">PATH</span> Follow</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        <span class="keyword">MATCH</span>(SHORTEST_PATH(P1(-(Follow)-&gt;P2)+))</span><br><span class="line"> ) <span class="keyword">AS</span> Q</span><br><span class="line"> <span class="keyword">WHERE</span> Q.FinalNode = <span class="string">'C'</span></span><br></pre></td></tr></table></figure><p>結果如下，<br><img src="/2022/12/27/mssql-graph-query-find-all-path-node/03.png" title="C結尾"></p><p>所以如果要 C 在關係中的所有路徑，就將它們 Union 起來就可以了，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        p1.userName,</span><br><span class="line">        p1.userName <span class="keyword">as</span> StartNode,</span><br><span class="line">        <span class="keyword">LAST_VALUE</span>(p2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> FinalNode,</span><br><span class="line">        STRING_AGG(p2.userName,<span class="string">'-&gt;'</span>) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> [Edges <span class="keyword">Path</span>],</span><br><span class="line">        <span class="keyword">COUNT</span>(p2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> <span class="keyword">Levels</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        dbo.Person p1,</span><br><span class="line">        dbo.Person <span class="keyword">FOR</span> <span class="keyword">PATH</span> p2,</span><br><span class="line">        dbo.Follow <span class="keyword">FOR</span> <span class="keyword">PATH</span> Follow</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        <span class="keyword">MATCH</span>(SHORTEST_PATH(p1(-(Follow)-&gt;p2)+))</span><br><span class="line">        <span class="keyword">AND</span> p1.userName = <span class="string">'C'</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    username, StartNode, [Edges <span class="keyword">Path</span>], FinalNode, <span class="keyword">Levels</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        P1.username,</span><br><span class="line">        P1.username <span class="keyword">as</span> StartNode,</span><br><span class="line">        STRING_AGG(P2.userName,<span class="string">'-&gt;'</span>) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> [Edges <span class="keyword">Path</span>],</span><br><span class="line">        <span class="keyword">LAST_VALUE</span>(P2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> FinalNode,</span><br><span class="line">        <span class="keyword">COUNT</span>(P2.userName) <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span> (GRAPH <span class="keyword">PATH</span>) <span class="keyword">AS</span> <span class="keyword">Levels</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        Person P1,</span><br><span class="line">        Person <span class="keyword">FOR</span> <span class="keyword">PATH</span> P2,</span><br><span class="line">        Follow <span class="keyword">FOR</span> <span class="keyword">PATH</span> Follow</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        <span class="keyword">MATCH</span>(SHORTEST_PATH(P1(-(Follow)-&gt;P2)+))</span><br><span class="line"> ) <span class="keyword">AS</span> Q</span><br><span class="line"> <span class="keyword">WHERE</span> Q.FinalNode = <span class="string">'C'</span></span><br></pre></td></tr></table></figure><p>結果如下，<br><img src="/2022/12/27/mssql-graph-query-find-all-path-node/04.png" title="C在關係中的所有路徑"></p><p>另外，本來要針對 Levels 來過濾，但發現查詢速度會變慢，<br>例如原本近 0 秒結果會出來，加上 Levels 來過濾會變成 4~10 秒。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://stackoverflow.com/questions/59632206/sql-server-graph-query-find-all-paths-to-node" target="_blank" rel="noopener">sql server graph query, find all paths to node</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近將資料存到 MSSQL 的 Graph Table 之中，&lt;br&gt;想要查到某個 Node 在所有關系中路徑，例如下圖 C 的所有 Pat
      
    
    </summary>
    
    
      <category term="node" scheme="https://rainmakerho.github.io/tags/node/"/>
    
      <category term="mssql" scheme="https://rainmakerho.github.io/tags/mssql/"/>
    
      <category term="graph" scheme="https://rainmakerho.github.io/tags/graph/"/>
    
      <category term="all path" scheme="https://rainmakerho.github.io/tags/all-path/"/>
    
      <category term="edge" scheme="https://rainmakerho.github.io/tags/edge/"/>
    
  </entry>
  
  <entry>
    <title>AntV G6 資料更新顯示</title>
    <link href="https://rainmakerho.github.io/2022/12/27/ant-g6-update-graph/"/>
    <id>https://rainmakerho.github.io/2022/12/27/ant-g6-update-graph/</id>
    <published>2022-12-27T05:20:40.000Z</published>
    <updated>2022-12-27T05:50:32.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近將資料存到 MSSQL 的 Graph Table 之中，然後再取出資料透過 <a href="https://g6.antv.antgroup.com/" target="_blank" rel="noopener">G6 图可视化引擎</a>，只要給 起點、Label 及終點就可以把關係圖畫出來。<br>在 Button 的 Click 事件之中，取得資料，建立 graph ，給 graph 資料，呼叫 graph.render 來畫面關係圖。<br>但第 2 次資料有更新時，圖卻不會跟著更新，要怎麼解決呢?</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>在 Button 的 Click 事件之中，取得資料，建立 graph ，給 graph 資料，呼叫 graph.render 來畫面關係圖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const data = 依條件取得資料 ...</span></span><br><span class="line">$(<span class="string">"#btnSearch"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> graph = <span class="keyword">new</span> G6.Graph(&#123;</span><br><span class="line">    container: <span class="string">"mountNode"</span>,</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">500</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  graph.data(data);</span><br><span class="line">  graph.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是雖然資料有改變，但圖還是沒有更新。</p><p>後來參考 <a href="https://stackoverflow.com/questions/67108651/antv-g6-and-react-how-to-update-graph" target="_blank" rel="noopener">antv/g6 and react. How to update graph?</a> ，建立全域的 graph 變數，當 graph 不是 null 時，再建立 <strong>G6.Graph</strong> 就可以正常更新圖了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> graph = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//const data = 依條件取得資料 ...</span></span><br><span class="line">$(<span class="string">"#btnSearch"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!graph) &#123;</span><br><span class="line">    <span class="keyword">const</span> graph = <span class="keyword">new</span> G6.Graph(&#123;</span><br><span class="line">      container: <span class="string">"mountNode"</span>,</span><br><span class="line">      width: <span class="number">800</span>,</span><br><span class="line">      height: <span class="number">500</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  graph.data(data);</span><br><span class="line">  graph.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/67108651/antv-g6-and-react-how-to-update-graph" target="_blank" rel="noopener">antv/g6 and react. How to update graph?</a><br><a href="https://g6.antv.antgroup.com/" target="_blank" rel="noopener">G6 图可视化引擎</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近將資料存到 MSSQL 的 Graph Table 之中，然後再取出資料透過 &lt;a href=&quot;https://g6.antv.antg
      
    
    </summary>
    
    
      <category term="AntV" scheme="https://rainmakerho.github.io/tags/AntV/"/>
    
      <category term="G6" scheme="https://rainmakerho.github.io/tags/G6/"/>
    
      <category term="Update" scheme="https://rainmakerho.github.io/tags/Update/"/>
    
      <category term="Graph" scheme="https://rainmakerho.github.io/tags/Graph/"/>
    
      <category term="G6.Graph" scheme="https://rainmakerho.github.io/tags/G6-Graph/"/>
    
  </entry>
  
  <entry>
    <title>AxiosError &#39;127.0.0.1&#39; &#39;ECONNREFUSED&#39;</title>
    <link href="https://rainmakerho.github.io/2022/12/20/AxiosError-127-0-0-1-ECONNREFUSED/"/>
    <id>https://rainmakerho.github.io/2022/12/20/AxiosError-127-0-0-1-ECONNREFUSED/</id>
    <published>2022-12-20T10:09:25.000Z</published>
    <updated>2022-12-20T09:50:45.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>同事詢問，程式透過 axios 來發出 post ，<br>URL 給的是 <code>http://localhost:3978</code> ，<br>但卻會發生 AxiosError ECONNREFUSED 的錯誤，<br><img src="/2022/12/20/AxiosError-127-0-0-1-ECONNREFUSED/01.jpg" title="AxiosError"></p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>同事開啟 Browser 連到 <code>http://localhost:3978</code> 卻是可以正常顯示網頁，<br>看 axios 噴出的錯誤 Address 是 127.0.0.1 ，<br>於是請同事在 Browser 上改輸入 <code>http://127.0.0.1:3978</code> 結果會出現 <strong>ERR_CONNECTION_REFUSED</strong> 的錯誤，<br>改用自已的 IP ，也是會出現 <strong>ERR_CONNECTION_REFUSED</strong> 的錯誤。</p><p>Bingo….<br>從這個問題想帶給大家的是 Debug 的觀念，<br>有時在 Debug 時，會因為習慣，而導致忽略掉細微的資訊，<br>大家都會認為 localhost 就是 127.0.0.1 ，<br>所以在 Browser 上 <code>http://localhost</code> 可以正常呈現，<code>http://127.0.0.1</code> 也一定可以。<br>就會導致將問題導向程式本身，懷疑程式是不是寫的有問題，而浪費的許多時間。</p><p>殊不知，<code>localhost</code> 是對應到 ipv6 的 <code>::1:</code> ，而同事的本機 ipv4 是被連到的。<br>後來請同事參考 <a href="https://stackoverflow.com/questions/25652409/localhost-is-working-but-not-127-0-0-1-in-windows-7" target="_blank" rel="noopener">localhost is working but not 127.0.0.1 in windows 7</a> ，讓它的 ipv4 可以被連到。</p><blockquote><p>雖然這問題不難，但容易讓除錯的人進入到誤區之中<br>筆者有時也會進入到這種偵錯的誤區之中，還好有同事、朋友的一起幫忙來找到正確的方向<br>在此也希望大家在除錯時，可以多跟同事、朋友討論，或許他們的一句話，就會讓你有突錯點<br>大家一起加油 ^_^</p></blockquote><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/25652409/localhost-is-working-but-not-127-0-0-1-in-windows-7" target="_blank" rel="noopener">localhost is working but not 127.0.0.1 in windows 7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;同事詢問，程式透過 axios 來發出 post ，&lt;br&gt;URL 給的是 &lt;code&gt;http://localhost:3978&lt;/cod
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://rainmakerho.github.io/tags/Node-js/"/>
    
      <category term="axios" scheme="https://rainmakerho.github.io/tags/axios/"/>
    
      <category term="AxiosError" scheme="https://rainmakerho.github.io/tags/AxiosError/"/>
    
      <category term="ECONNREFUSED" scheme="https://rainmakerho.github.io/tags/ECONNREFUSED/"/>
    
      <category term="127.0.0.1" scheme="https://rainmakerho.github.io/tags/127-0-0-1/"/>
    
      <category term="ipv4" scheme="https://rainmakerho.github.io/tags/ipv4/"/>
    
  </entry>
  
  <entry>
    <title>多執行緒/多行程在 Node.js 的使用時機</title>
    <link href="https://rainmakerho.github.io/2022/12/20/multithreading-in-node-js/"/>
    <id>https://rainmakerho.github.io/2022/12/20/multithreading-in-node-js/</id>
    <published>2022-12-20T03:12:38.000Z</published>
    <updated>2022-12-20T07:36:00.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在研究如何讓 Node.js 的程式可以同時接受大量的 Request ，<br>因為 Node.js 是單執行緖，想要達到目的，大約幾種方式，<br>1.) 增加 Thread 的數量<br>2.) 增加 Process 的數量<br>3.) 減少 Request 處理時間<br>減少 Request 處理時間可透過重構，調整程式 Logic 等方式，<br>接下來就 增加 Thread or Process 的方式及適用情況來說明</p><p>以下依 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-multithreading-in-node-js" target="_blank" rel="noopener">How To Use Multithreading in Node.js</a> 及 <a href="https://stackoverflow.com/questions/34855352/how-in-general-does-node-js-handle-10-000-concurrent-requests" target="_blank" rel="noopener">How, in general, does Node.js handle 10,000 concurrent requests?</a> 內容來分享</p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>1.) 增加 Thread 的數量<br>來自 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-multithreading-in-node-js" target="_blank" rel="noopener">How To Use Multithreading in Node.js</a> 說明，<br>一個 Node.js Process 包含 7 條 Thread，1 條 Main Thread， 4 條 Node.js Thread 及 2 條 V8 Thread<br>4 條 Node.js Thread 就是來幫忙處理 I/O 操作，讓它不會 Block 住 main thread，<br>所以針對 I/O 操作幾乎不需要自已建立 Thread 來處理，有時自已建立 Thread 來處理 I/O 操作還可能會有效能問題。<br>那什麼狀況下，需要增加 Thread 來處理呢?<br>如果是 CPU-bound 的工作，就可以透過增加的 Thread 來處理，以避免 Block 住 Main Thread<br>以下建立程式來試試看，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir multi-threading</span><br><span class="line">cd multi-threading</span><br><span class="line">npm init -y</span><br><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>新增 index.js 來測試 CPU-bound 工作會 Block 住 Main thread</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"><span class="comment">//the task itself of reading a file or a network request happens in parallel with the help of the threads</span></span><br><span class="line">app.get(<span class="string">"/non-blocking/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.status(<span class="number">200</span>).send(<span class="string">"this page is non-blocking"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/blocking"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// let counter = 0;</span></span><br><span class="line">  <span class="comment">// for(let i =0;i&lt;20_000_000_000;i++)&#123;</span></span><br><span class="line">  <span class="comment">//     counter++;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">const</span> counter = <span class="keyword">await</span> calculateCounter();</span><br><span class="line">  res.status(<span class="number">200</span>).send(<span class="string">`result is <span class="subst">$&#123;counter&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>_000_000_000; i++) &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(counter);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`App listening on port:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>程式中，在 <code>const counter = await calculateCounter()</code> 已使用了 <strong>async/await</strong> ，<br>它還是會 Block 住其他的 Request ，<br>執行 <code>node index.js</code><br>使用 Browser 連到 <code>http://localhost:3000/blocking</code> 後，<br>開啟另一個 Browser 連到 <code>http://localhost:3000/non-blocking</code>，<br>該網頁要等 <code>/blocking</code> 處理完後，才會呈現出來。</p><p>所以 CPU-bound 的工作，使用 <strong>async/await</strong> 並無法讓它 non-blocking ，<br>這時就可以透過 Node.js 的 <code>worker-threads</code> 模組來將 CPU-bound 的工作放到額外的 Thread 中執行，讓它變成 <strong>non-blocking</strong><br>因為建立<code>Worker</code>要傳入 js 檔案，所以新增<code>worker.js</code>，裡面是 CPU-bound 的工作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; parentPort &#125; = <span class="built_in">require</span>(<span class="string">"worker_threads"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>_000_000_000; i++) &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parentPort.postMessage(counter);</span><br></pre></td></tr></table></figure><p>將執行後的結果，透過<code>parentPort.postMessage</code>傳回給 Parent Thread，<br>新增 index2.js 透過 <code>Worker</code> 來建立額外的 Thread ，<br>並透過 <code>worker.on(&#39;Event&#39;, fun)</code> 來取得資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Worker &#125; = <span class="built_in">require</span>(<span class="string">"worker_threads"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/non-blocking/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.status(<span class="number">200</span>).send(<span class="string">"this page is non-blocking"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/blocking"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">"./worker.js"</span>);</span><br><span class="line">  worker.on(<span class="string">"message"</span>, (data) =&gt; &#123;</span><br><span class="line">    res.status(<span class="number">200</span>).send(<span class="string">`result is <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  worker.on(<span class="string">"error"</span>, (msg) =&gt; &#123;</span><br><span class="line">    res.status(<span class="number">404</span>).send(<span class="string">`An error occurred:<span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`App listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>執行 <code>node index2.js</code><br>使用 Browser 連到 <code>http://localhost:3000/blocking</code> 後，<br>開啟另一個 Browser 連到 <code>http://localhost:3000/non-blocking</code>，<br>該網頁會馬上呈現，並不會被 <code>/blocking</code> Block 住。</p><p>那如果一個 CPU-bound 的工作執行太久，則可以想辦法將它們拆分成不同個工作，<br>然後建立多個 <code>Worker</code> 來處理，<br>就像 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-multithreading-in-node-js" target="_blank" rel="noopener">How To Use Multithreading in Node.js</a> 最後的範例，<br>建立 4 個 Worker 並將回傳的 Promise 放到 Array 之中，最後透過 <code>Promise.all</code> 等它們執行完畢。</p><p>2.) 增加 Process 的數量<br>如果已將 CPU-bound 工作放到額外的 Thread 執行，效能還是有問題，<br>則可以透過 <code>Cluster</code> 來增加 Process 處理大量的 Request<br>建立 index4.js ，在 <code>/blocking</code> 中還是執行 CPU-bound 工作，<br>最後透過 <code>cluster.fork</code> 建立多個 Process，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">"cluster"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">let</span> globalVar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> globalVarB = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//the task itself of reading a file or a network request happens in parallel with the help of the threads</span></span><br><span class="line">app.get(<span class="string">"/non-blocking/"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  globalVarB++;</span><br><span class="line">  res</span><br><span class="line">    .status(<span class="number">200</span>)</span><br><span class="line">    .send(</span><br><span class="line">      <span class="string">`this page is non-blocking,Worker <span class="subst">$&#123;process.pid&#125;</span>,globalVarB: <span class="subst">$&#123;globalVarB&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/blocking"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>_000_000_000; i++) &#123;</span><br><span class="line">    counter++;</span><br><span class="line">  &#125;</span><br><span class="line">  globalVar++;</span><br><span class="line">  <span class="comment">//const counter = await calculateCounter();</span></span><br><span class="line">  res</span><br><span class="line">    .status(<span class="number">200</span>)</span><br><span class="line">    .send(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span>,globalVar: <span class="subst">$&#123;globalVar&#125;</span>,result is <span class="subst">$&#123;counter&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>_000_000_000; i++) &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(counter);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app.listen(port, ()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(`App listening on port:$&#123;port&#125;`);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the number of available CPU.</span></span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">"os"</span>).cpus().length;</span><br><span class="line"><span class="comment">// For Master process</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fork workers.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">    cluster.fork();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// This event is firs when worker died</span></span><br><span class="line">  cluster.on(<span class="string">"exit"</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// For Worker</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Workers can share any TCP connection</span></span><br><span class="line">  <span class="comment">// In this case it is an HTTP server</span></span><br><span class="line">  app.listen(port, (err) =&gt; &#123;</span><br><span class="line">    err</span><br><span class="line">      ? <span class="built_in">console</span>.log(<span class="string">"Error in server setup"</span>)</span><br><span class="line">      : <span class="built_in">console</span>.log(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行 <code>node index4.js</code><br>如果開啟 Browser 連到 <code>http://localhost:3000/blocking</code> 或是 <code>http://localhost:3000/non-blocking</code> ，<br>可以發現有時會被 Block 住，有時又不會，<br>當執行在同一個 Process 中，就會被 Block，不同就不會 Block 到。<br>另外要注意的是，因為是不同的 Process ，所以是不同的 Memory ，<br>可以發現 <code>globalVar</code> 及 <code>globalVarB</code> 在不同的 Process 是不會影響到的。</p><p>3.) iisNode 的設定<br>iisNode 並不 Support Cluster ，如果要多個 Node.js Process ，<br>則可以透過設定 <code>nodeProcessCountPerApplication</code> 的值(預設是 1)<br>詳細可以參考 <a href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/iisnode.yml#L21" target="_blank" rel="noopener">iisnode.yml</a></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-multithreading-in-node-js" target="_blank" rel="noopener">How To Use Multithreading in Node.js</a><br><a href="https://stackoverflow.com/questions/34855352/how-in-general-does-node-js-handle-10-000-concurrent-requests" target="_blank" rel="noopener">How, in general, does Node.js handle 10,000 concurrent requests?</a><br><a href="https://blog.logrocket.com/optimizing-node-js-app-performance-clustering/" target="_blank" rel="noopener">Optimizing your Node.js app’s performance with clustering</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在研究如何讓 Node.js 的程式可以同時接受大量的 Request ，&lt;br&gt;因為 Node.js 是單執行緖，想要達到目的，大約幾
      
    
    </summary>
    
    
      <category term="iisnode" scheme="https://rainmakerho.github.io/tags/iisnode/"/>
    
      <category term="Node.js" scheme="https://rainmakerho.github.io/tags/Node-js/"/>
    
      <category term="Worker" scheme="https://rainmakerho.github.io/tags/Worker/"/>
    
      <category term="worker_threads" scheme="https://rainmakerho.github.io/tags/worker-threads/"/>
    
      <category term="cluster" scheme="https://rainmakerho.github.io/tags/cluster/"/>
    
  </entry>
  
  <entry>
    <title>使用 MQTTnet 存取遠端 mosquitto Broker with username</title>
    <link href="https://rainmakerho.github.io/2022/12/16/mqttnet-connect-mosquitto-usernam-password/"/>
    <id>https://rainmakerho.github.io/2022/12/16/mqttnet-connect-mosquitto-usernam-password/</id>
    <published>2022-12-16T01:46:46.000Z</published>
    <updated>2022-12-16T03:09:23.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇 <a href="https://rainmakerho.github.io/2022/12/15/mosquitto-allow-remote-access/">使用 MQTTnet 匿名存取遠端 mosquitto Broker</a> 設定 mosquitto 的 <code>listener 1883</code> 及 <code>allow_anonymous true</code> 讓它允許匿名遠端存取。<br>為了安全性，連線時應該要使用帳/密驗證，<br>所以本文介紹如何設定 <strong>mosquitto Broker</strong> ，<br>讓它可以透過使用者帳號及密碼驗證才能連線。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>要設定 <a href="https://mosquitto.org/man/mosquitto-conf-5.html" target="_blank" rel="noopener">mosquitto</a> 使用帳/密驗證，<br>調整如下，</p><p>1.建立 password file 檔案<br>例如 pwdfile.txt，新增帳號及密碼，使用 : 分隔，先建立一個帳/密資料，如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mqttuser:p@ssw0rD</span><br></pre></td></tr></table></figure><p>2.使用 mosquitto_passwd.exe<br>使用 mosquitto 管理帳/密檔案的工具(<strong>mosquitto_passwd.exe</strong>)，<br>來將帳/密檔中的密碼轉成 Hash 值，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_passwd.exe -U pwdfile.txt</span><br></pre></td></tr></table></figure><img src="/2022/12/16/mqttnet-connect-mosquitto-usernam-password/01.png" title="pwdfile.txt"><img src="/2022/12/16/mqttnet-connect-mosquitto-usernam-password/02.png" title="pwdfile.txt with hash"><p>3.設定 <strong>mosquitto.conf</strong><br>在 <a href="https://mosquitto.org/man/mosquitto-conf-5.html" target="_blank" rel="noopener">mosquitto.conf</a> 中<br>3.1.將 <strong>allow_anonymous</strong> 設定成 <strong>false</strong><br>3.2.將 <strong>per_listener_settings</strong> 設定成 <strong>true</strong><br>3.3.設定 <strong>password_file</strong> ，後面接 <strong>實體檔案路徑</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">per_listener_settings true</span><br><span class="line">allow_anonymous false</span><br><span class="line">password_file C:\Program Files\mosquitto\pwdfile.txt</span><br></pre></td></tr></table></figure><p>4.重新啟動 mosquitto 服務<br>如果可以正常重新啟動，沒有錯誤表示設定沒有問題。</p><p>5.修改 MQControlCenter 專案<br>使用 MQTTnet 套件的 MQControlCenter 專案還是可以連接 mosquitto broker，<br>因為 mosquitto broker 需要帳/密驗證，<br>所以在建立 <strong>MqttClientOptionsBuilder</strong> 時，<br>需要加上 <strong>WithCredentials</strong> 設定帳/密。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MQTTnet.Client;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Extensions.ManagedClient;</span><br><span class="line"><span class="keyword">using</span> MQTTnet;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Packets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _mqttClient = <span class="keyword">new</span> MqttFactory().CreateManagedMqttClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">"controlCenter"</span>;</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"請輸入 MQTT Broker Server :"</span>);</span><br><span class="line"><span class="keyword">var</span> server = ReadLine();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(server))</span><br><span class="line">&#123;</span><br><span class="line">    server = <span class="string">"localhost"</span>;</span><br><span class="line">&#125;</span><br><span class="line">WriteLine(<span class="string">"請輸入連線帳密(例 mqttuser/p@ssw0rD):"</span>);</span><br><span class="line"><span class="keyword">var</span> userAndPwd = ReadLine();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(userAndPwd))</span><br><span class="line">&#123;</span><br><span class="line">    userAndPwd = <span class="string">"mqttuser/p@ssw0rD"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> userNpwd = userAndPwd.Split(<span class="string">'/'</span>, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> MqttClientOptionsBuilder()</span><br><span class="line">                .WithClientId(clientId)</span><br><span class="line">                .WithTcpServer(server)</span><br><span class="line">                .WithCredentials(userNpwd[<span class="number">0</span>], userNpwd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> ManagedMqttClientOptionsBuilder()</span><br><span class="line">                    .WithAutoReconnectDelay(TimeSpan.FromSeconds(<span class="number">60</span>))</span><br><span class="line">                    .WithClientOptions(builder.Build())</span><br><span class="line">                    .Build();</span><br><span class="line"><span class="comment">// Set up handlers</span></span><br><span class="line">_mqttClient.ConnectedAsync += _mqttClient_ConnectedAsync;</span><br><span class="line">_mqttClient.DisconnectedAsync += _mqttClient_DisconnectedAsync;</span><br><span class="line">_mqttClient.ConnectingFailedAsync += _mqttClient_ConnectingFailedAsync;</span><br><span class="line">_mqttClient.ApplicationMessageReceivedAsync += _mqttClient_ApplicationMessageReceivedAsync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topicFilters = <span class="keyword">new</span> List&lt;MqttTopicFilter&gt; &#123; <span class="keyword">new</span> MqttTopicFilter &#123; Topic= <span class="string">"home/temperature/#"</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">await</span> _mqttClient.SubscribeAsync(topicFilters);</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">$"<span class="subst">&#123;clientId&#125;</span> 連線到 MQTT Broker (<span class="subst">&#123;server&#125;</span>) ...."</span>);</span><br><span class="line"><span class="keyword">await</span> _mqttClient.StartAsync(options);</span><br><span class="line">WriteLine(<span class="string">"Press any key to stop receive message ..."</span>);</span><br><span class="line">ReadKey();</span><br><span class="line"></span><br><span class="line">Task _mqttClient_ConnectedAsync(MqttClientConnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_DisconnectedAsync(MqttClientDisconnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Disconnected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_ConnectingFailedAsync(ConnectingFailedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connection failed check network or broker!"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task _mqttClient_ApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> topic = arg?.ApplicationMessage?.Topic;</span><br><span class="line">    <span class="keyword">var</span> payloadText = Encoding.UTF8.GetString(</span><br><span class="line">            arg?.ApplicationMessage?.Payload ?? Array.Empty&lt;<span class="keyword">byte</span>&gt;());</span><br><span class="line"></span><br><span class="line">    WriteLine(<span class="string">$"Received: Topic:<span class="subst">&#123;topic&#125;</span>, Payload:<span class="subst">&#123;payloadText&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在原本透過 <strong>mosquitto_pub.exe</strong> 發送訊息，也是需要加上設定帳/密才可以發送哦~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -t &quot;home/temperature/sensor3&quot; -m &quot;message from azure vm sensor3&quot; -u mqttuser -P p@ssw0rD</span><br><span class="line">mosquitto_pub -t &quot;home/temperature/sensor1&quot; -m &quot;message from azure vm with username/pwd&quot; -u mqttuser -P p@ssw0rD</span><br></pre></td></tr></table></figure><p>測試結果如下，<br><img src="/2022/12/16/mqttnet-connect-mosquitto-usernam-password/03.png" title="mosquitto_pub"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://eves-internet-guide.com/mqtt-username-password-example/" target="_blank" rel="noopener">Mosquitto Username and Password Authentication</a><br><a href="http://www.steves-internet-guide.com/install-mosquitto-broker/" target="_blank" rel="noopener">How to Install The Mosquitto MQTT Broker on Windows</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇 &lt;a href=&quot;https://rainmakerho.github.io/2022/12/15/mosquitto-allow
      
    
    </summary>
    
    
      <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
      <category term="MQTTnet" scheme="https://rainmakerho.github.io/tags/MQTTnet/"/>
    
      <category term="mosquitto" scheme="https://rainmakerho.github.io/tags/mosquitto/"/>
    
      <category term="MQTT" scheme="https://rainmakerho.github.io/tags/MQTT/"/>
    
      <category term="mosquitto.conf" scheme="https://rainmakerho.github.io/tags/mosquitto-conf/"/>
    
      <category term="username" scheme="https://rainmakerho.github.io/tags/username/"/>
    
      <category term="password_file" scheme="https://rainmakerho.github.io/tags/password-file/"/>
    
  </entry>
  
  <entry>
    <title>使用 MQTTnet 匿名存取遠端 mosquitto Broker</title>
    <link href="https://rainmakerho.github.io/2022/12/15/mosquitto-allow-remote-access/"/>
    <id>https://rainmakerho.github.io/2022/12/15/mosquitto-allow-remote-access/</id>
    <published>2022-12-15T08:33:40.000Z</published>
    <updated>2022-12-16T01:53:01.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前一篇 <a href="https://rainmakerho.github.io/2022/12/15/mqtt-with-mqttnet/">C# MQTT using MQTTnet</a> 中，透過 <strong>ManagedMqttClient</strong> 可以接收到 <a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a> 的訊息。<br>可是，當我將 <a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a> 安裝在 Azure VM(20.121.35.xxx) 後，<br>啟動 mosquitto 服務後，從本機 Client 這卻連不到它。</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><h4 id="Firewall-設定"><a href="#Firewall-設定" class="headerlink" title="Firewall 設定"></a>Firewall 設定</h4><p>要在 Azure VM 中要允許 1833 Port 連入，</p><p>1.在 Network security group 設定 Inbound port rules ，<br>允許 TCP 1883 允許連入。<br><img src="/2022/12/15/mosquitto-allow-remote-access/02.png" title="Inbound port rules"></p><p>2.在 OS 控制台 Windows Defender Firewall 中的 Advanced settings 設定 Inbound Rules<br><img src="/2022/12/15/mosquitto-allow-remote-access/03.png" title="Windows Defender Firewall"><br><img src="/2022/12/15/mosquitto-allow-remote-access/04.png" title="Inbound Rules"></p><h4 id="設定-mosquitto-及測試"><a href="#設定-mosquitto-及測試" class="headerlink" title="設定 mosquitto 及測試"></a>設定 mosquitto 及測試</h4><p>將 <a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a> 服務起動後，<br>可以在 Command 視窗中下 <code>netstat -an | findstr 1883</code> 來查看一下是否有針對 <strong>1883</strong> Port 在 LISTENING，<br>內容如下，<br><img src="/2022/12/15/mosquitto-allow-remote-access/01.png" title="netstat -an"><br>從上圖可以發現，有針對 <strong>1883</strong> Port 在 LISTENING，<br>但它只允許本機存取，因為是 <strong>127.0.0.1:1883</strong>，<br>必須為 <strong>0.0.0.0:1883</strong> 才會允許遠端存取。</p><p>1.調整 <strong>mosquitto.conf</strong><br>新增 <strong>listener 1883</strong>，並先允許匿名存取</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># listener port-number [ip address/host name/unix socket path]</span></span><br><span class="line">listener 1883</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">allow_anonymous true</span><br></pre></td></tr></table></figure><ul><li>註:目前為測試不同機器存取，請勿設定在正式環境</li></ul><p>重啟服務後，在 Command 視窗中下 <code>netstat -an</code> 就可以發現，<br>已變成 <strong>0.0.0.0:1883</strong> 。</p><p>2.修改 MQControlCenter 專案<br>原本 MQControlCenter 專案 Server 固定為 localhost ，<br>改成從 Command 視窗中讀取使用者的輸入值，<br>並執行起來，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MQTTnet.Client;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Extensions.ManagedClient;</span><br><span class="line"><span class="keyword">using</span> MQTTnet;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Packets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _mqttClient = <span class="keyword">new</span> MqttFactory().CreateManagedMqttClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">"controlCenter"</span>;</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"請輸入 MQTT Broker Server:"</span>);</span><br><span class="line"><span class="keyword">var</span> server = ReadLine();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrWhiteSpace(server))</span><br><span class="line">&#123;</span><br><span class="line">    server = <span class="string">"localhost"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> MqttClientOptionsBuilder()</span><br><span class="line">                .WithClientId(clientId)</span><br><span class="line">                .WithTcpServer(server);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> ManagedMqttClientOptionsBuilder()</span><br><span class="line">                    .WithAutoReconnectDelay(TimeSpan.FromSeconds(<span class="number">60</span>))</span><br><span class="line">                    .WithClientOptions(builder.Build())</span><br><span class="line">                    .Build();</span><br><span class="line"><span class="comment">// Set up handlers</span></span><br><span class="line">_mqttClient.ConnectedAsync += _mqttClient_ConnectedAsync;</span><br><span class="line">_mqttClient.DisconnectedAsync += _mqttClient_DisconnectedAsync;</span><br><span class="line">_mqttClient.ConnectingFailedAsync += _mqttClient_ConnectingFailedAsync;</span><br><span class="line">_mqttClient.ApplicationMessageReceivedAsync += _mqttClient_ApplicationMessageReceivedAsync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topicFilters = <span class="keyword">new</span> List&lt;MqttTopicFilter&gt; &#123; <span class="keyword">new</span> MqttTopicFilter &#123; Topic= <span class="string">"home/temperature/#"</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">await</span> _mqttClient.SubscribeAsync(topicFilters);</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">$"<span class="subst">&#123;clientId&#125;</span> 連線到 MQTT Broker (<span class="subst">&#123;server&#125;</span>) ...."</span>);</span><br><span class="line"><span class="keyword">await</span> _mqttClient.StartAsync(options);</span><br><span class="line">WriteLine(<span class="string">"Press any key to stop receive message ..."</span>);</span><br><span class="line">ReadKey();</span><br><span class="line"></span><br><span class="line">Task _mqttClient_ConnectedAsync(MqttClientConnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_DisconnectedAsync(MqttClientDisconnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Disconnected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_ConnectingFailedAsync(ConnectingFailedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connection failed check network or broker!"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task _mqttClient_ApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> topic = arg?.ApplicationMessage?.Topic;</span><br><span class="line">    <span class="keyword">var</span> payloadText = Encoding.UTF8.GetString(</span><br><span class="line">            arg?.ApplicationMessage?.Payload ?? Array.Empty&lt;<span class="keyword">byte</span>&gt;());</span><br><span class="line"></span><br><span class="line">    WriteLine(<span class="string">$"Received: Topic:<span class="subst">&#123;topic&#125;</span>, Payload:<span class="subst">&#123;payloadText&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<strong>mosquitto_pub</strong>發佈訊息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -t <span class="string">"home/temperature/sensor1"</span> -m <span class="string">"hello world"</span></span><br><span class="line">mosquitto_pub -t <span class="string">"home/temperature/sensor2"</span> -m <span class="string">"message from azure vm"</span></span><br><span class="line">mosquitto_pub -t <span class="string">"home/temperature/sensor3"</span> -m <span class="string">"message from azure vm sensor3"</span></span><br></pre></td></tr></table></figure><p>4.最後在本機 Client 可以接收來自 Azure VM (MQTT Broker Server) 的訊息<br><img src="/2022/12/15/mosquitto-allow-remote-access/05.png" title="MQControlCenter執行結果"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2022/12/15/mqtt-with-mqttnet/">C# MQTT using MQTTnet</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前一篇 &lt;a href=&quot;https://rainmakerho.github.io/2022/12/15/mqtt-with-mqttn
      
    
    </summary>
    
    
      <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
      <category term="MQTTnet" scheme="https://rainmakerho.github.io/tags/MQTTnet/"/>
    
      <category term="mosquitto" scheme="https://rainmakerho.github.io/tags/mosquitto/"/>
    
      <category term="MQTT" scheme="https://rainmakerho.github.io/tags/MQTT/"/>
    
      <category term="allow_anonymous" scheme="https://rainmakerho.github.io/tags/allow-anonymous/"/>
    
      <category term="mosquitto.conf" scheme="https://rainmakerho.github.io/tags/mosquitto-conf/"/>
    
  </entry>
  
  <entry>
    <title>C# MQTT using MQTTnet</title>
    <link href="https://rainmakerho.github.io/2022/12/15/mqtt-with-mqttnet/"/>
    <id>https://rainmakerho.github.io/2022/12/15/mqtt-with-mqttnet/</id>
    <published>2022-12-15T02:37:56.000Z</published>
    <updated>2022-12-15T09:17:15.797Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近需要透過 MQTT 來收取 IOT Sensor 的資料，<br>所以到 <a href="https://mqtt.org/" target="_blank" rel="noopener">MQTT.org</a> 看一下有那些軟體可以當 MQTT Broker 及 MQTT Client。<br>有人使用 <a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a>，也有人使用 <a href="https://www.rabbitmq.com/mqtt.html" target="_blank" rel="noopener">RabbitMQ with MQTT Plugin</a>。<br>而 .NET 則可以使用 <a href="https://github.com/dotnet/MQTTnet" target="_blank" rel="noopener">MQTTnet</a>。<br>以下本文將使用 <a href="https://github.com/dotnet/MQTTnet" target="_blank" rel="noopener">MQTTnet</a> 來測試 Sensor 送資料到 Broker ，<br>再由 Backend ControlCenter 將訂閱的 Topic 訊息讀取出來，<br>最後再讀取來自 <a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a> 的訊息。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>建立 MQBroker, MQControlCenter 及 MQSensor 3 個 Console 專案，<br><img src="/2022/12/15/mqtt-with-mqttnet/01.png" title="MQTT方案"></p><h4 id="MQBroker-專案"><a href="#MQBroker-專案" class="headerlink" title="MQBroker 專案"></a>MQBroker 專案</h4><p>1.加入 <strong>MQTTnet</strong> 套件<br>要建立 MQTT Server，所以加入 <strong>MQTTnet</strong> 套件<br><img src="/2022/12/15/mqtt-with-mqttnet/02.png" title="MQTTnet 套件"></p><p>2.建立 MQTT Server，並啟動它<br>Program.cs 中建立 MQTT Server，並在 InterceptingPublishAsync 事件 Log 送進來的訊息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MQTTnet.Server;</span><br><span class="line"><span class="keyword">using</span> MQTTnet;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 預設 port 是 1883</span></span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> MqttServerOptionsBuilder()</span><br><span class="line">    <span class="comment">//Set endpoint to localhost</span></span><br><span class="line">    .WithDefaultEndpoint();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new mqtt server</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> MqttFactory().CreateMqttServer(options.Build());</span><br><span class="line"><span class="comment">//Add Interceptor for logging incoming messages</span></span><br><span class="line">server.InterceptingPublishAsync += Server_InterceptingPublishAsync;</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">"Start MQTTnet Server ..."</span>);</span><br><span class="line"><span class="comment">// Start the server</span></span><br><span class="line"><span class="keyword">await</span> server.StartAsync();</span><br><span class="line">WriteLine(<span class="string">"Press any key to stop Server ..."</span>);</span><br><span class="line">ReadKey();</span><br><span class="line"></span><br><span class="line"><span class="function">Task <span class="title">Server_InterceptingPublishAsync</span>(<span class="params">InterceptingPublishEventArgs arg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Convert Payload to string</span></span><br><span class="line">    <span class="keyword">var</span> payload = arg.ApplicationMessage?.Payload == <span class="literal">null</span> ? <span class="literal">null</span> : Encoding.UTF8.GetString(arg.ApplicationMessage?.Payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WriteLine(</span><br><span class="line">        <span class="string">" TimeStamp: &#123;0&#125; -- Message: ClientId = &#123;1&#125;, Topic = &#123;2&#125;, Payload = &#123;3&#125;, QoS = &#123;4&#125;, Retain-Flag = &#123;5&#125;"</span>,</span><br><span class="line"></span><br><span class="line">        DateTime.Now,</span><br><span class="line">        arg.ClientId,</span><br><span class="line">        arg.ApplicationMessage?.Topic,</span><br><span class="line">        payload,</span><br><span class="line">        arg.ApplicationMessage?.QualityOfServiceLevel,</span><br><span class="line">        arg.ApplicationMessage?.Retain);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MQControlCenter-專案"><a href="#MQControlCenter-專案" class="headerlink" title="MQControlCenter 專案"></a>MQControlCenter 專案</h4><p>1.加入 <strong>MQTTnet.Extensions.ManagedClient</strong> 套件<br>使用 MQTT Client，所以加入 <strong>MQTTnet.Extensions.ManagedClient</strong> 套件</p><p>2.建立 MQTT Client 並設定要訂閱的 Topic<br>在 Program.cs 中建立 MQTT Client 並設定要訂閱的 Topic Filter，<br>可使用萬用字元 <strong>+</strong> or <strong>#</strong> ，</p><p>在 ApplicationMessageReceivedAsync 事件中取得 Payload。</p><ul><li>註:因為要取得多個 Sensor 的資料，所以 Topic 使用 <strong>home/temperature/#</strong>，所以可以取得 Topic 開頭為 <strong>home/temperature/</strong> 的訊息</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MQTTnet.Client;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Extensions.ManagedClient;</span><br><span class="line"><span class="keyword">using</span> MQTTnet;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Packets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _mqttClient = <span class="keyword">new</span> MqttFactory().CreateManagedMqttClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">"controlCenter"</span>;</span><br><span class="line"><span class="keyword">var</span> server = <span class="string">"localhost"</span>;</span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> MqttClientOptionsBuilder()</span><br><span class="line">                .WithClientId(clientId)</span><br><span class="line">                .WithTcpServer(server);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> ManagedMqttClientOptionsBuilder()</span><br><span class="line">                    .WithAutoReconnectDelay(TimeSpan.FromSeconds(<span class="number">60</span>))</span><br><span class="line">                    .WithClientOptions(builder.Build())</span><br><span class="line">                    .Build();</span><br><span class="line"><span class="comment">// Set up handlers</span></span><br><span class="line">_mqttClient.ConnectedAsync += _mqttClient_ConnectedAsync;</span><br><span class="line">_mqttClient.DisconnectedAsync += _mqttClient_DisconnectedAsync;</span><br><span class="line">_mqttClient.ConnectingFailedAsync += _mqttClient_ConnectingFailedAsync;</span><br><span class="line">_mqttClient.ApplicationMessageReceivedAsync += _mqttClient_ApplicationMessageReceivedAsync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topicFilters = <span class="keyword">new</span> List&lt;MqttTopicFilter&gt; &#123; <span class="keyword">new</span> MqttTopicFilter &#123; Topic= <span class="string">"home/temperature/#"</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">await</span> _mqttClient.SubscribeAsync(topicFilters);</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">$"<span class="subst">&#123;clientId&#125;</span> 連線到 MQTT Broker (<span class="subst">&#123;server&#125;</span>) ...."</span>);</span><br><span class="line"><span class="keyword">await</span> _mqttClient.StartAsync(options);</span><br><span class="line">WriteLine(<span class="string">"Press any key to stop receive message ..."</span>);</span><br><span class="line">ReadKey();</span><br><span class="line"></span><br><span class="line">Task _mqttClient_ConnectedAsync(MqttClientConnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_DisconnectedAsync(MqttClientDisconnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Disconnected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_ConnectingFailedAsync(ConnectingFailedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connection failed check network or broker!"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task _mqttClient_ApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> topic = arg?.ApplicationMessage?.Topic;</span><br><span class="line">    <span class="keyword">var</span> payloadText = Encoding.UTF8.GetString(</span><br><span class="line">            arg?.ApplicationMessage?.Payload ?? Array.Empty&lt;<span class="keyword">byte</span>&gt;());</span><br><span class="line"></span><br><span class="line">    WriteLine(<span class="string">$"Received: Topic:<span class="subst">&#123;topic&#125;</span>, Payload:<span class="subst">&#123;payloadText&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MQSensor-專案"><a href="#MQSensor-專案" class="headerlink" title="MQSensor 專案"></a>MQSensor 專案</h4><p>1.加入 <strong>MQTTnet.Extensions.ManagedClient</strong> 套件<br>使用 MQTT Client，所以加入 <strong>MQTTnet.Extensions.ManagedClient</strong> 套件<br><img src="/2022/12/15/mqtt-with-mqttnet/03.png" title="MQTTnet.Extensions.ManagedClient 套件"></p><p>2.建立 MQTT Client 並設定要發送的 Topic 及 Payload<br>在 Program.cs 中建立 MQTT Client 並設定要發送的 Topic 及 Payload</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MQTTnet.Client;</span><br><span class="line"><span class="keyword">using</span> MQTTnet.Extensions.ManagedClient;</span><br><span class="line"><span class="keyword">using</span> MQTTnet;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _mqttClient = <span class="keyword">new</span> MqttFactory().CreateManagedMqttClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">"sensor1"</span>;</span><br><span class="line"><span class="keyword">var</span> server = <span class="string">"localhost"</span>;</span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> MqttClientOptionsBuilder()</span><br><span class="line">                .WithClientId(clientId)</span><br><span class="line">                .WithTcpServer(server);</span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> ManagedMqttClientOptionsBuilder()</span><br><span class="line">                    .WithAutoReconnectDelay(TimeSpan.FromSeconds(<span class="number">60</span>))</span><br><span class="line">                    .WithClientOptions(builder.Build())</span><br><span class="line">                    .Build();</span><br><span class="line"><span class="comment">// Set up handlers</span></span><br><span class="line">_mqttClient.ConnectedAsync += _mqttClient_ConnectedAsync;</span><br><span class="line">_mqttClient.DisconnectedAsync += _mqttClient_DisconnectedAsync;</span><br><span class="line">_mqttClient.ConnectingFailedAsync += _mqttClient_ConnectingFailedAsync;</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">$"<span class="subst">&#123;clientId&#125;</span> 連線到 MQTT Broker (<span class="subst">&#123;server&#125;</span>) ...."</span>);</span><br><span class="line"><span class="keyword">await</span> _mqttClient.StartAsync(options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"請輸入Topic, Like(home/temperature/sensor-1):"</span>);</span><br><span class="line">    <span class="keyword">var</span> topic = ReadLine();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">string</span>.IsNullOrWhiteSpace(topic))</span><br><span class="line">        topic=<span class="string">$"home/temperature/<span class="subst">&#123;clientId&#125;</span>"</span>;</span><br><span class="line">    WriteLine(<span class="string">"請輸入要傳送的訊息:"</span>);</span><br><span class="line">    <span class="keyword">var</span> message = ReadLine();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrWhiteSpace(message))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> json = JsonSerializer.Serialize(<span class="keyword">new</span> &#123; message, sent = DateTime.UtcNow &#125;);</span><br><span class="line">        <span class="keyword">await</span> _mqttClient.EnqueueAsync(topic, json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wait until the queue is fully processed.</span></span><br><span class="line">        SpinWait.SpinUntil(() =&gt; _mqttClient.PendingApplicationMessagesCount == <span class="number">0</span>, <span class="number">10000</span>);</span><br><span class="line">        WriteLine(<span class="string">$"Pending messages = <span class="subst">&#123;_mqttClient.PendingApplicationMessagesCount&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"訊息不可為空，請重新輸入!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Task _mqttClient_ConnectedAsync(MqttClientConnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_DisconnectedAsync(MqttClientDisconnectedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Disconnected"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line">Task _mqttClient_ConnectingFailedAsync(ConnectingFailedEventArgs arg)</span><br><span class="line">&#123;</span><br><span class="line">    WriteLine(<span class="string">"Connection failed check network or broker!"</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h4><p>程式寫好，分別將 MQBroker.exe, MQControlCenter.exe 及 MQSensor.exe 執行起來，<br>在 MQSensor.exe Console 中輸入 Topic 及 內容，<br>可以發現在 MQBroker.exe 會 Log 訊息，<br>在 MQControlCenter.exe 也可以接收到訂閱的訊息(sensor-1, sensor-2 及 sensor-3)。<br><img src="/2022/12/15/mqtt-with-mqttnet/04.png" title="Try Run"></p><h4 id="測試接收-mosquitto-訊息"><a href="#測試接收-mosquitto-訊息" class="headerlink" title="測試接收 mosquitto 訊息"></a>測試接收 mosquitto 訊息</h4><p>MQControlCenter.exe 也可以接收 <a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a> 的訊息。<br>先到 <a href="https://mosquitto.org/download/" target="_blank" rel="noopener">mosquitto Download</a> 下載安裝檔，<br>安裝完成後，直接開啟 <strong>mosquitto.exe</strong> 會啟動 MQTT Broker Server，<br>透過 <strong>mosquitto_pub</strong> 來發佈訊息 <code>mosquitto_pub -t &quot;home/temperature/sensor1&quot; -m &quot;hello world&quot;</code>，<br>透過 MQControlCenter.exe 則可以收到訂閱的訊息，如下，<br><img src="/2022/12/15/mqtt-with-mqttnet/05.png" title="Receive from mosquitto"></p><ul><li>註: 第三個發佈訊息因為 Topic 不符合訂閱的 Topic Filter (<strong>home/temperature/#</strong>)，所以不會被收到</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://mqtt.org/" target="_blank" rel="noopener">MQTT</a><br><a href="https://github.com/dotnet/MQTTnet" target="_blank" rel="noopener">MQTTnet</a><br><a href="https://blog.behroozbc.ir/c-mqtt-broker-using-mqttnet-version-4" target="_blank" rel="noopener">C# MQTT broker using MQTTnet version 4</a><br><a href="https://blog.behroozbc.ir/mqtt-client-with-mqttnet-4-and-c" target="_blank" rel="noopener">MQTT Client with MQTTnet 4 and C#</a><br><a href="https://mosquitto.org/" target="_blank" rel="noopener">mosquitto</a><br><a href="https://www.rabbitmq.com/mqtt.html" target="_blank" rel="noopener">RabbitMQ with MQTT Plugin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近需要透過 MQTT 來收取 IOT Sensor 的資料，&lt;br&gt;所以到 &lt;a href=&quot;https://mqtt.org/&quot; tar
      
    
    </summary>
    
    
      <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
      <category term="MQTTnet" scheme="https://rainmakerho.github.io/tags/MQTTnet/"/>
    
      <category term="mosquitto" scheme="https://rainmakerho.github.io/tags/mosquitto/"/>
    
      <category term="MQTT" scheme="https://rainmakerho.github.io/tags/MQTT/"/>
    
      <category term="IOT" scheme="https://rainmakerho.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET 4 在不分頁的 UltraWebGrid Scroll 時，會卡頓</title>
    <link href="https://rainmakerho.github.io/2022/12/13/UltraWebGrid-slow-ie11-net4/"/>
    <id>https://rainmakerho.github.io/2022/12/13/UltraWebGrid-slow-ie11-net4/</id>
    <published>2022-12-13T05:33:55.000Z</published>
    <updated>2022-12-13T07:20:18.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>同事將 ASP.NET 4 的系統從 Windows 2008 移到 Windows 2019 後，<br>使用者查看 不分頁的 UltraWebGrid ，<br>在 Scroll 時，會發生 頓頓的狀況。<br>但是在 Windows 2008 OS 中卻是 OK 的。<br>要怎麼解決呢?</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>請同事用 fiddler 錄一下正常跟 IE 卡頓的網頁來比較一下內容，<br>結果發現，卡頓的網頁中少了 <code>&lt;!DOCTYPE html PUBLIC &#39;-//W3C//DTD XHTML 1.0 Transitional//EN&#39;&gt;</code><br>再往下追發現，<strong>Request.Browser.Browser</strong> 的內容為 <strong>InternetExplorer</strong>，<br>因為是 ASP.NET 4，所以 IE 的 Browser 名稱為 <strong>InternetExplorer</strong>，<br>要讓它 Browser 名稱為 <strong>IE</strong>，<br>所以在 <strong>App_Browsers</strong> 目錄中加入 <strong>瀏覽器資訊檔</strong>，<br>將 Browser 名稱改為 <strong>IE</strong>，如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">browsers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">browser</span> <span class="attr">id</span>=<span class="string">"IE11OV"</span> <span class="attr">parentID</span>=<span class="string">"InternetExplorer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">identification</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">userAgent</span> <span class="attr">match</span>=<span class="string">"Trident"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">capability</span> <span class="attr">name</span>=<span class="string">"majorversion"</span> <span class="attr">match</span>=<span class="string">"11"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">identification</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">capabilities</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">capability</span> <span class="attr">name</span>=<span class="string">"browser"</span> <span class="attr">value</span>=<span class="string">"IE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">capabilities</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">browser</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">browsers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>註: 如果已有其他的 Browser 設定，請加到 browsers 區塊中即可。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://dotblogs.com.tw/rainmaker/2014/01/09/139427" target="_blank" rel="noopener">Infragistics 的 UltraWebGrid 在 IE11 上無法正常顯示問題</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;同事將 ASP.NET 4 的系統從 Windows 2008 移到 Windows 2019 後，&lt;br&gt;使用者查看 不分頁的 Ultra
      
    
    </summary>
    
    
      <category term="ASP.NET" scheme="https://rainmakerho.github.io/tags/ASP-NET/"/>
    
      <category term="IE" scheme="https://rainmakerho.github.io/tags/IE/"/>
    
      <category term="UltraWebGrid" scheme="https://rainmakerho.github.io/tags/UltraWebGrid/"/>
    
      <category term="Infragistics" scheme="https://rainmakerho.github.io/tags/Infragistics/"/>
    
      <category term="slow" scheme="https://rainmakerho.github.io/tags/slow/"/>
    
  </entry>
  
  <entry>
    <title>為什麼 iis log 中會有從 AWS 發出的 Request ?</title>
    <link href="https://rainmakerho.github.io/2022/12/08/why-iis-have-addition-request-from-aws/"/>
    <id>https://rainmakerho.github.io/2022/12/08/why-iis-have-addition-request-from-aws/</id>
    <published>2022-12-08T06:07:10.000Z</published>
    <updated>2022-12-14T10:17:58.310Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近有朋友詢問為什麼 IIS Log 中會有從 AWS 連進去的 IP，<br>而且 url 跟台灣測試人員連進去的 url 一模一樣，<br>在 台灣測試人員的 log 相近 2 秒內，<br>就會有相同的 url 要求，IP 來自 AWS。</p><h3 id="釋疑"><a href="#釋疑" class="headerlink" title="釋疑"></a>釋疑</h3><p>原本以為是有人從 AWS 的 VM 連到該 Server ，<br>但跟台灣測試人員連進去的 url 一模一樣 …<br>判斷有可能是因為 Chrome 有裝了 Plugins ，<br>而該 Plugin 會將 Client 連到的網站也 Copy 一份去連接分析看看。</p><p>詢問之後發現，該測試人員 Chrome 有安裝 <strong>防詐達人</strong> ，<br>使用 Chrome <strong>無痕模式</strong> 去操作，就不會有來自 AWS 的 request 。</p><p>判斷 <strong>防詐達人</strong> Server 是放在 AWS 上面，<br>如果在進行一些測試，可以把 Chrome 的 Plugins 停用，<br>或是改用 <strong>無痕模式</strong> 以避免誤會。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近有朋友詢問為什麼 IIS Log 中會有從 AWS 連進去的 IP，&lt;br&gt;而且 url 跟台灣測試人員連進去的 url 一模一樣，&lt;b
      
    
    </summary>
    
    
      <category term="Chrome" scheme="https://rainmakerho.github.io/tags/Chrome/"/>
    
      <category term="iis" scheme="https://rainmakerho.github.io/tags/iis/"/>
    
      <category term="Plugins" scheme="https://rainmakerho.github.io/tags/Plugins/"/>
    
      <category term="防詐達人" scheme="https://rainmakerho.github.io/tags/%E9%98%B2%E8%A9%90%E9%81%94%E4%BA%BA/"/>
    
      <category term="AWS" scheme="https://rainmakerho.github.io/tags/AWS/"/>
    
      <category term="IP" scheme="https://rainmakerho.github.io/tags/IP/"/>
    
      <category term="log" scheme="https://rainmakerho.github.io/tags/log/"/>
    
      <category term="waf" scheme="https://rainmakerho.github.io/tags/waf/"/>
    
  </entry>
  
  <entry>
    <title>資料庫連線字串(connectionString)中的密碼(password)有特殊字(例如;)要怎麼辦?</title>
    <link href="https://rainmakerho.github.io/2022/11/29/password-with-special-characters-in-connectionstring/"/>
    <id>https://rainmakerho.github.io/2022/11/29/password-with-special-characters-in-connectionstring/</id>
    <published>2022-11-29T06:22:00.000Z</published>
    <updated>2022-11-29T07:08:47.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天同事詢問一個問題，程式的連線字串中的密碼，<br>包含了<strong>;</strong>，<br>所以連線字串就會像以下的內容，<br><code>Server=(LocalDb)\\MSSQLLocalDB;Database=master;User Id=usr2;Password=gss;;Connect Timeout=30</code><br>結果程式一跑就出 <strong>Login failed for user</strong> 的錯誤。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>原本的測試程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> mobjConn = <span class="keyword">new</span> SqlConnection())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="string">"Server=(LocalDb)\\MSSQLLocalDB;Database=master;User Id=usr2;Password=gss;;Connect Timeout=30"</span>;</span><br><span class="line">    mobjConn.ConnectionString = conn;</span><br><span class="line">    mobjConn.Open();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面連線字串可以發現，密碼會取到 <code>gss</code> 而不是 <code>gss;</code> ，那怎麼辦呢?<br>我們可以參考 <a href="https://stackoverflow.com/questions/61486081/password-with-special-characters-in-connectionstring" target="_blank" rel="noopener">Password with special characters in connectionString</a> ，用<strong>單引號</strong>包起來就可以了<code>Password=&#39;gss;&#39;</code>，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> mobjConn = <span class="keyword">new</span> SqlConnection())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="string">"Server=(LocalDb)\\MSSQLLocalDB;Database=master;User Id=usr2;Password='gss;';Connect Timeout=30"</span>;</span><br><span class="line">    mobjConn.ConnectionString = conn;</span><br><span class="line">    mobjConn.Open();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果密碼包含單引號呢? 例如 <code>gss&#39;</code> 呢?<br>那一樣用<strong>單引號</strong>包起來，密碼中的 <strong>單引號</strong> 就變成<strong>重覆單引號</strong> 就可以了，<br>如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> mobjConn = <span class="keyword">new</span> SqlConnection())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="string">"Server=(LocalDb)\\MSSQLLocalDB;Database=master;User Id=usr2;Password='gss''';Connect Timeout=30"</span>;</span><br><span class="line">    mobjConn.ConnectionString = conn;</span><br><span class="line">    mobjConn.Open();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/61486081/password-with-special-characters-in-connectionstring" target="_blank" rel="noopener">Password with special characters in connectionString</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天同事詢問一個問題，程式的連線字串中的密碼，&lt;br&gt;包含了&lt;strong&gt;;&lt;/strong&gt;，&lt;br&gt;所以連線字串就會像以下的內容，&lt;b
      
    
    </summary>
    
    
      <category term="password" scheme="https://rainmakerho.github.io/tags/password/"/>
    
      <category term="connectionString" scheme="https://rainmakerho.github.io/tags/connectionString/"/>
    
      <category term="semicolon" scheme="https://rainmakerho.github.io/tags/semicolon/"/>
    
      <category term="single quote" scheme="https://rainmakerho.github.io/tags/single-quote/"/>
    
  </entry>
  
  <entry>
    <title>使用 DefaultRequestHeaders.Authorization 卻被 Checkmarx 判斷有 Privacy Violation 的 Issue</title>
    <link href="https://rainmakerho.github.io/2022/11/25/checkmarx-headers-authorization-privacy-violation/"/>
    <id>https://rainmakerho.github.io/2022/11/25/checkmarx-headers-authorization-privacy-violation/</id>
    <published>2022-11-25T01:19:42.000Z</published>
    <updated>2022-11-25T06:50:26.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>透過 HttpClient 呼叫 api 時，透過 <code>DefaultRequestHeaders.Authorization</code> 設定 Token 的程式碼，<br>被 <strong>Checkmarx V9.4.5 HF16</strong> 掃出有 Privacy Violation 的 Issue。<br>為什麼這樣呢?</p><h3 id="研究與解法"><a href="#研究與解法" class="headerlink" title="研究與解法"></a>研究與解法</h3><p>測試的程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ParameterModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Token &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Text &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"[action]"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">CheckParameter</span>(<span class="params">ParameterModel data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">httpClient.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, data.Token);</span><br><span class="line"><span class="keyword">var</span> parameters = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line">parameters[<span class="string">"text"</span>] = data.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.PostAsync(<span class="string">$"api/Eye/CheckSPEEDEyeEditParameter"</span>, <span class="keyword">new</span> FormUrlEncodedContent(parameters));</span><br><span class="line"><span class="keyword">var</span> contents = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"><span class="keyword">return</span> HttpUtility.HtmlEncode(contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Checkmarx 的說明:<br>方法 CheckParameter 在 WebApplication1/WebApplication1/Controllers/WeatherForecastController.cs 第 89 行將<br>使用者個人資訊送至應用程式外。這可能構成侵犯隱私權(Privacy Violation)<br>Source: Authorization<br>Target: contents</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">92.</span> httpClient.DefaultRequestHeaders.Authorization = <span class="keyword">new</span></span><br><span class="line">AuthenticationHeaderValue(<span class="string">"Bearer"</span>, data.Token);</span><br><span class="line">....</span><br><span class="line"><span class="number">98.</span> <span class="keyword">return</span> HttpUtility.HtmlEncode(contents);</span><br></pre></td></tr></table></figure><h4 id="Checkmarx-是怎麼找的呢"><a href="#Checkmarx-是怎麼找的呢" class="headerlink" title="Checkmarx 是怎麼找的呢?"></a>Checkmarx 是怎麼找的呢?</h4><p>在 checkmarx 中會找一些個人資訊相關的欄位資訊，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CxList tempResult = All.FindByShortNames(<span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; &#123;</span><br><span class="line"><span class="string">"*Credit*"</span>,</span><br><span class="line"><span class="string">"*credentials*"</span>,</span><br><span class="line"><span class="string">"*secret*"</span>,</span><br><span class="line"><span class="string">"*Account*"</span>,</span><br><span class="line"><span class="string">"*SSN"</span>,</span><br><span class="line"><span class="string">"DOB"</span>,</span><br><span class="line"><span class="string">"SSN*"</span>,</span><br><span class="line"><span class="string">"*SocialSecurity*"</span>,</span><br><span class="line"><span class="string">"DeviceUniqueId"</span>,</span><br><span class="line"><span class="string">"auth*"</span>,</span><br><span class="line"><span class="string">"*passport*"</span>&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>而 <code>httpClient.DefaultRequestHeaders.Authorization</code> 中的 <strong>Authorization</strong> 符合 <code>auth*</code> ，<br>找到後，最後又呼叫 httpClient.PostAsync 取回資料，傳出 contents。<br>所以 Checkmarx 覺得有問題，因為它並不知道它是 api 所需要的 HTTP Header。</p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>有以下 2 種解決方式</p><p>1.在 Checkmarx 上，將該問題設定為 <strong>不可利用</strong>。</p><p>2.改使用 字串的方式(<code>httpClient.DefaultRequestHeaders.Add(&quot;Authorization&quot;, $&quot;Bearer {data.Token}&quot;)</code>)，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"[action]"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">CheckParameter2</span>(<span class="params">ParameterModel data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="comment">//httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", data.Token);</span></span><br><span class="line">httpClient.DefaultRequestHeaders.Add(<span class="string">"Authorization"</span>, <span class="string">$"Bearer <span class="subst">&#123;data.Token&#125;</span>"</span>);</span><br><span class="line"><span class="keyword">var</span> parameters = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line">parameters[<span class="string">"text"</span>] = data.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.PostAsync(<span class="string">$"api/Eye/CheckSPEEDEyeEditParameter"</span>, <span class="keyword">new</span> FormUrlEncodedContent(parameters));</span><br><span class="line"><span class="keyword">var</span> contents = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"><span class="keyword">return</span> HttpUtility.HtmlEncode(contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/rainmakerho/Vulnerability-Analysis/issues/5" target="_blank" rel="noopener">Privacy Violation - Checkmarx V9.4.5 HF16</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;透過 HttpClient 呼叫 api 時，透過 &lt;code&gt;DefaultRequestHeaders.Authorization&lt;/c
      
    
    </summary>
    
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="DefaultRequestHeaders.Authorization" scheme="https://rainmakerho.github.io/tags/DefaultRequestHeaders-Authorization/"/>
    
      <category term="Privacy Violation" scheme="https://rainmakerho.github.io/tags/Privacy-Violation/"/>
    
  </entry>
  
  <entry>
    <title>在 Microsoft SQL Server 2019 如果有太多的 if-else 在 Scalar Function 中，執行該 Function 會跑很久?</title>
    <link href="https://rainmakerho.github.io/2022/11/24/sql-2019-too-many-if-else-cause-hang/"/>
    <id>https://rainmakerho.github.io/2022/11/24/sql-2019-too-many-if-else-cause-hang/</id>
    <published>2022-11-24T02:50:52.000Z</published>
    <updated>2022-11-25T06:51:05.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同事詢問一個很奇怪的問題，他們有一個 Scalar Function 在 MSSQL 2019 (15.0.2000.5)上面執行，<br>透過 SSMS 直接執行該 Function ，結果一直跑不出來。<br>直接跑 Function 裡面的 Script，卻一下子就跑出來。<br>一樣的程式，在另一台 Server (15.0.4153.1)上也一下子就跑出來了。<br>到底是怎麼一回事呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>SQL 的 Scalar Function 大約長的如下的程式碼(if else if ….大約 <strong>19 個</strong>)，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> [dbo].[ufn_get_user_info3](</span><br><span class="line"> @strUserName <span class="keyword">NVARCHAR</span>(<span class="number">256</span>),</span><br><span class="line"> @strKIND <span class="keyword">NVARCHAR</span>(<span class="number">50</span>) = <span class="string">'USER_NAME'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">NVARCHAR</span>(<span class="number">4000</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line"> <span class="keyword">DECLARE</span> @strRTN_VAL <span class="keyword">NVARCHAR</span>(<span class="number">4000</span>) = <span class="string">''</span>;    <span class="comment">--回傳值</span></span><br><span class="line"> if @strKIND = 'UserName'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = UserName</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'NormalizedUserName'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = NormalizedUserName</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'Name'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [<span class="keyword">Name</span>]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'Surname'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [Surname]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'Email'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [Email]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'NormalizedEmail'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [NormalizedEmail]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'PasswordHash'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [PasswordHash]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'PhoneNumber'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [PhoneNumber]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'SecurityStamp'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = [SecurityStamp]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'ExtraProperties'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL =[ExtraProperties]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'ConcurrencyStamp'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL =[ConcurrencyStamp]</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'CreationTime'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">convert</span>(<span class="keyword">nvarchar</span>(<span class="number">4000</span>),[CreationTime], <span class="number">120</span>)</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'LastModificationTime'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">convert</span>(<span class="keyword">nvarchar</span>(<span class="number">4000</span>),[LastModificationTime] , <span class="number">120</span>)</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'DeletionTime'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">convert</span>(<span class="keyword">nvarchar</span>(<span class="number">4000</span>),[DeletionTime] , <span class="number">120</span>)</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'Id'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">cast</span>(<span class="keyword">Id</span> <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">200</span>))</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'TenantId'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">cast</span>([TenantId] <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">200</span>))</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'CreatorId'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">cast</span>([CreatorId] <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">200</span>))</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'LastModifierId'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">cast</span>([LastModifierId] <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">200</span>))</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> else if @strKIND = 'DeleterId'</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SELECT</span> @strRTN_VAL = <span class="keyword">cast</span>([DeleterId] <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">200</span>))</span><br><span class="line">          <span class="keyword">FROM</span> [AbpUsers] <span class="keyword">WITH</span>(NOLOCK)</span><br><span class="line">  <span class="keyword">WHERE</span> UserName = @strUserName;</span><br><span class="line"> <span class="keyword">end</span>;</span><br><span class="line"> return @strRTN_VAL;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>直接在 SSMS 下 <code>Select [dbo].[ufn_get_user_info3](&#39;admin&#39;, &#39;NormalizedEmail&#39;)</code> 就沒有回應了。</p><p>原本想說會不會是使用了太多 CPU 的原因，<br>所以在原本的 Script 後加上 <code>OPTION (MAXDOP 1)</code> ，<br>還是一樣的狀況。在測試環境上，約跑了 <strong>1 分 24 秒</strong> 資料才出來。<br><img src="/2022/11/24/sql-2019-too-many-if-else-cause-hang/01.png" title="跑1分24秒"></p><p>預估的執行計劃如下，<br><img src="/2022/11/24/sql-2019-too-many-if-else-cause-hang/02.png" title="執行計劃"></p><p>但刪掉一些 if-else 資料就可以很順利的跑出來。<br>完全沒想法，感覺 SQL 都到了 2019 應該不會有這種 問題呀~~~<br>…<br>…<br>…<br>結果後來同事將 MSSQL 2019 更新到新的版本，執行就沒問題了。<br>目前測試在 SQL Server 2019 版本 15.0.4153.1 上跑是沒問題的。</p><p>下次要懷疑自已前，先懷疑軟體是否有更新到新的版本。</p><ul><li>註: <a href="https://mvp.microsoft.com/zh-tw/PublicProfile/4033535?fullName=Terry%20Chuang" target="_blank" rel="noopener">Terry Chuang</a> 有將 if-else 改成 case when 就不會有這種問題，感謝 <a href="https://mvp.microsoft.com/zh-tw/PublicProfile/4033535?fullName=Terry%20Chuang" target="_blank" rel="noopener">Terry Chuang</a> 的分享。</li></ul><p>測試的資料如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers](</span><br><span class="line">[<span class="keyword">Id</span>] [uniqueidentifier] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[TenantId] [uniqueidentifier] <span class="literal">NULL</span>,</span><br><span class="line">[UserName] [<span class="keyword">nvarchar</span>](<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[NormalizedUserName] [<span class="keyword">nvarchar</span>](<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[<span class="keyword">Name</span>] [<span class="keyword">nvarchar</span>](<span class="number">64</span>) <span class="literal">NULL</span>,</span><br><span class="line">[Surname] [<span class="keyword">nvarchar</span>](<span class="number">64</span>) <span class="literal">NULL</span>,</span><br><span class="line">[Email] [<span class="keyword">nvarchar</span>](<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[NormalizedEmail] [<span class="keyword">nvarchar</span>](<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[EmailConfirmed] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[PasswordHash] [<span class="keyword">nvarchar</span>](<span class="number">256</span>) <span class="literal">NULL</span>,</span><br><span class="line">[SecurityStamp] [<span class="keyword">nvarchar</span>](<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[IsExternal] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[PhoneNumber] [<span class="keyword">nvarchar</span>](<span class="number">16</span>) <span class="literal">NULL</span>,</span><br><span class="line">[PhoneNumberConfirmed] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[IsActive] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[TwoFactorEnabled] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[LockoutEnd] [datetimeoffset](<span class="number">7</span>) <span class="literal">NULL</span>,</span><br><span class="line">[LockoutEnabled] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[AccessFailedCount] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[ExtraProperties] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line">[ConcurrencyStamp] [<span class="keyword">nvarchar</span>](<span class="number">40</span>) <span class="literal">NULL</span>,</span><br><span class="line">[CreationTime] [datetime2](<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[CreatorId] [uniqueidentifier] <span class="literal">NULL</span>,</span><br><span class="line">[LastModificationTime] [datetime2](<span class="number">7</span>) <span class="literal">NULL</span>,</span><br><span class="line">[LastModifierId] [uniqueidentifier] <span class="literal">NULL</span>,</span><br><span class="line">[IsDeleted] [<span class="built_in">bit</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">[DeleterId] [uniqueidentifier] <span class="literal">NULL</span>,</span><br><span class="line">[DeletionTime] [datetime2](<span class="number">7</span>) <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_AbpUsers] PRIMARY <span class="keyword">KEY</span> CLUSTERED</span><br><span class="line">(</span><br><span class="line">[<span class="keyword">Id</span>] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>, OPTIMIZE_FOR_SEQUENTIAL_KEY = <span class="keyword">OFF</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY] TEXTIMAGE_ON [PRIMARY]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> [dbo].[AbpUsers] ([<span class="keyword">Id</span>], [TenantId], [UserName], [NormalizedUserName], [<span class="keyword">Name</span>], [Surname], [Email], [NormalizedEmail], [EmailConfirmed], [PasswordHash], [SecurityStamp], [IsExternal], [PhoneNumber], [PhoneNumberConfirmed], [IsActive], [TwoFactorEnabled], [LockoutEnd], [LockoutEnabled], [AccessFailedCount], [ExtraProperties], [ConcurrencyStamp], [CreationTime], [CreatorId], [LastModificationTime], [LastModifierId], [IsDeleted], [DeleterId], [DeletionTime]) <span class="keyword">VALUES</span> (N<span class="string">'eaeeb5db-5209-0e71-b58c-3a0380591d83'</span>, <span class="literal">NULL</span>, N<span class="string">'admin'</span>, N<span class="string">'ADMIN'</span>, N<span class="string">'admin'</span>, N<span class="string">''</span>, N<span class="string">'rainmaker_ho@gss.com.tw'</span>, N<span class="string">'RAINMAKER_HO@GSS.COM.TW'</span>, <span class="number">0</span>, N<span class="string">'AQAAAAEAACcQAAAAEBtitT9fC5a4FAueYPe3RUKq9/lq9mLTQuax0+7vgydsV05Xtf4lzjq+4C9LAfChPA=='</span>, N<span class="string">'GXPCPZASRPVU7LUMWXR4OESDEFZDUCS4'</span>, <span class="number">0</span>, N<span class="string">''</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>, N<span class="string">'&#123;&#125;'</span>, N<span class="string">'c353047ea876484bba0901b79ccf4533'</span>, <span class="keyword">CAST</span>(N<span class="string">'2022-04-28T11:17:16.9722713'</span> <span class="keyword">AS</span> DateTime2), <span class="literal">NULL</span>, <span class="keyword">CAST</span>(N<span class="string">'2022-04-28T16:29:42.7502832'</span> <span class="keyword">AS</span> DateTime2), N<span class="string">'eaeeb5db-5209-0e71-b58c-3a0380591d83'</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> (<span class="keyword">CONVERT</span>([<span class="built_in">bit</span>],(<span class="number">0</span>))) <span class="keyword">FOR</span> [EmailConfirmed]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> (<span class="keyword">CONVERT</span>([<span class="built_in">bit</span>],(<span class="number">0</span>))) <span class="keyword">FOR</span> [IsExternal]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> (<span class="keyword">CONVERT</span>([<span class="built_in">bit</span>],(<span class="number">0</span>))) <span class="keyword">FOR</span> [PhoneNumberConfirmed]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> (<span class="keyword">CONVERT</span>([<span class="built_in">bit</span>],(<span class="number">0</span>))) <span class="keyword">FOR</span> [TwoFactorEnabled]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> (<span class="keyword">CONVERT</span>([<span class="built_in">bit</span>],(<span class="number">0</span>))) <span class="keyword">FOR</span> [LockoutEnabled]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> ((<span class="number">0</span>)) <span class="keyword">FOR</span> [AccessFailedCount]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [dbo].[AbpUsers] <span class="keyword">ADD</span>  <span class="keyword">DEFAULT</span> (<span class="keyword">CONVERT</span>([<span class="built_in">bit</span>],(<span class="number">0</span>))) <span class="keyword">FOR</span> [IsDeleted]</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同事詢問一個很奇怪的問題，他們有一個 Scalar Function 在 MSSQL 2019 (15.0.2000.5)上面執行，&lt;b
      
    
    </summary>
    
    
      <category term="hang" scheme="https://rainmakerho.github.io/tags/hang/"/>
    
      <category term="windows" scheme="https://rainmakerho.github.io/tags/windows/"/>
    
      <category term="mssql" scheme="https://rainmakerho.github.io/tags/mssql/"/>
    
      <category term="sql 2019" scheme="https://rainmakerho.github.io/tags/sql-2019/"/>
    
      <category term="15.0 RTM" scheme="https://rainmakerho.github.io/tags/15-0-RTM/"/>
    
      <category term="15.0.2000.5" scheme="https://rainmakerho.github.io/tags/15-0-2000-5/"/>
    
      <category term="Timeout" scheme="https://rainmakerho.github.io/tags/Timeout/"/>
    
  </entry>
  
  <entry>
    <title>探索 ABP Framework Web 方案</title>
    <link href="https://rainmakerho.github.io/2022/11/17/abp-structuring-solution-ddd/"/>
    <id>https://rainmakerho.github.io/2022/11/17/abp-structuring-solution-ddd/</id>
    <published>2022-11-17T03:09:30.000Z</published>
    <updated>2022-11-18T03:04:24.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ABP Framework 的 Template 方案，是依 Domain-Driven Design (DDD) 原則去實現分層應用，<br>但是為什麼它所建立出來的方案中會多出許多的專案呢?<br>以下就讓我們來了解一番 ^_^</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>Domain-Driven Design (DDD) 常見到的就是以下的圖，<br><img src="/2022/11/17/abp-structuring-solution-ddd/01.png" title="DDD"></p><ul><li>上圖來自 <a href="https://dzone.com/articles/onion-architecture-is-interesting" target="_blank" rel="noopener">Onion Architecture Is Interesting</a></li></ul><h5 id="基本的-DDD-Web-系統"><a href="#基本的-DDD-Web-系統" class="headerlink" title="基本的 DDD Web 系統"></a>基本的 DDD Web 系統</h5><p>所以 DDD 的 Web 系統基本上會建立 4 個專案(以 ProductManagement 為例)，</p><p>1.Domain<br>包含 business object 及 Repository interface ，例如 Product class (aggregate root entity), IProductRepository interface</p><p>2.Application<br>參考 Domain 專案，建立 Service class 利用 Repository interface 來操作 business object，例如 ProductAppService class 中透過 IProductRepository interface 針對 Product class 進行 CRUD</p><p>3.Infrastructure<br>參考 Domain 專案，實作 Repository interface，進行實際的資料操作</p><p>4.Web<br>參考 Application 專案，建立 UI 提供使用者使用，透過 Application 的 Service 來進行各項操作。<br>執行時 Application 需要 Infrastructure 去存取資料庫。</p><p>所以各專案的關連就如下圖，<br><img src="/2022/11/17/abp-structuring-solution-ddd/02.png" title="DDD Projects Relation"></p><h5 id="ABP-Framework-的-Template-方案"><a href="#ABP-Framework-的-Template-方案" class="headerlink" title="ABP Framework 的 Template 方案"></a>ABP Framework 的 Template 方案</h5><p>當我們透過 ABP CLI 來建立方案時，會有以下幾個專案，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ProductManagement</span><br><span class="line"><span class="built_in">cd</span> ProductManagement</span><br><span class="line">ABP new ProductManagement</span><br></pre></td></tr></table></figure><img src="/2022/11/17/abp-structuring-solution-ddd/03.png" title="ABP Projects"><p>ABP 存取資料庫是使用 EntityFrameworkCore 所以它會對應到 Infrastructure 專案。<br>但如果只有這 4 個專案會有一個問題，<br>就是 Web 專案會間接參考到 Domain 專案 (透過 Application 專案)，<br>就沒達到分層的意義。</p><p>所以 ABP template 就將 application layer 分成 2 個專案，<br>1.Application.Contracts<br>定義 application service interface 及相關的 DTOs ，例如 IProductAppService interface 及 ProductCreationDto class</p><p>2.Application<br>實作 Application.Contracts 專案定義的 service interface，例如 ProductAppService 實作 IProductAppService</p><p>所以，Web 專案原本是參考 Application 專案 及間接參考到 Domain 專案，<br>會改成參考 Application.Contracts 專案，也不會再間接參考到 Domain 專案，<br>透過 Application.Contracts 中的 service interface 來進行各項的操作，<br>而原本需要使用到的 business object 則改使用 DTOs。<br>當然，在執行時，還是會使用實作 interface 的 Application 專案及 EntityFrameworkCore 專案。</p><p>但在實際上，可能想要重用 Domain 專案中的一些類別或是數值的定義，<br>例如 ProductType enum 或是 產品名稱最大長度。<br>這些都是一樣的，不想重覆在 Domain 專案及 ApplicationContracts 專案之中。</p><p>所以 ABP template 就再多一個 Domain.Shared 專案，來放這些共用的 type 及 常數。<br>到這裡，ABP template 各專案的關連就如下圖，<br><img src="/2022/11/17/abp-structuring-solution-ddd/04.png" title="ABP Projects Relation"></p><p>但是，ABP template 方案中，還有其他的專案，它們又是做什麼的呢?</p><p>1.HttpApi<br>使用 ABP 的 <a href="https://github.com/ABPframework/ABP/blob/dev/docs/en/API/Auto-API-Controllers.md" target="_blank" rel="noopener">Auto API Controllers</a> 功能，依 Application.Contracts 專案中定義的 service interface 自動建立 API Controller</p><p>2.HttpApi.Client<br>使用 ABP 的 <a href="https://github.com/ABPframework/ABP/blob/dev/docs/en/API/Dynamic-CSharp-API-Clients.md" target="_blank" rel="noopener">Dynamic C# API Clients</a> 功能，封裝 Application.Contracts 專案中定義的 service interface ，讓 application 或是其他 .NET client 可以很容易的使用，它則會自動去 call 我們的 HTTP API，並 Handle Retry，不需要我們自已去建立 HttpClient 呼叫 API</p><p>加進 HttpApi 及 HttpApi.Client，ABP template 各專案的關連就如下圖，<br><img src="/2022/11/17/abp-structuring-solution-ddd/05.png" title="ABP Projects Relation 2"></p><p>3.DbMigrator<br>參考 Application.Contracts 專案及 EntityFrameworkCore 專案，來建立資料庫(如果需要)，執行 database migrations 及 seeds initial data(如果需要)的 Console 程式</p><p>但是查看 Web 專案，為什麼它的專案相依性卻是 Application 專案 及 EntityFrameworkCore 專案呢?<br><img src="/2022/11/17/abp-structuring-solution-ddd/06.png" title="Web Project Refs"></p><p>雖然在整個 Web 專案的 Page 程式中並沒有使用到，<br>但因為 Web 專案在執行時，需要 Application 專案 及 EntityFrameworkCore 專案，<br>所以才將它們加入參考。</p><p>當然，如果覺得這樣子不 OK， Web 專案應該只需要參考 Application.Contracts 專案。<br>則可以參考 <a href="https://github.com/PacktPublishing/Mastering-ABP-Framework/tree/main/Samples/Chapter-09/SeparateHosting" target="_blank" rel="noopener">SeparateHosting example</a> ，新增一個 Web.Host 的專案，加入執行時需要的 Application 專案、 EntityFrameworkCore 專案、 HttpApi 專案及 Web 專案參考，而 Web 專案則改只參考 Application.Contracts 專案。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://github.com/ABPframework/ABP/blob/dev/docs/en/Startup-Templates/Application.md" target="_blank" rel="noopener">Application Startup Template</a><br><a href="https://dzone.com/articles/onion-architecture-is-interesting" target="_blank" rel="noopener">Onion Architecture Is Interesting</a><br><a href="https://github.com/PacktPublishing/Mastering-ABP-Framework/tree/main/Samples/Chapter-09/SeparateHosting" target="_blank" rel="noopener">ABP SeparateHosting example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;ABP Framework 的 Template 方案，是依 Domain-Driven Design (DDD) 原則去實現分層應用，&lt;b
      
    
    </summary>
    
    
      <category term="ABP" scheme="https://rainmakerho.github.io/tags/ABP/"/>
    
      <category term="ABP Framework" scheme="https://rainmakerho.github.io/tags/ABP-Framework/"/>
    
      <category term="DDD" scheme="https://rainmakerho.github.io/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>C# System.IO.Path.GetTempFileName 會產生 IOException 檔案存在(The file exists)的錯誤</title>
    <link href="https://rainmakerho.github.io/2022/11/15/Path-GetTempFileName-IOException-The-file-exists/"/>
    <id>https://rainmakerho.github.io/2022/11/15/Path-GetTempFileName-IOException-The-file-exists/</id>
    <published>2022-11-15T07:24:30.000Z</published>
    <updated>2022-11-18T00:56:14.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近收到一個 Crystal Report 匯出 PDF 檔案，然後給 Client 下載。<br>平常運作都正常，最近才出現 <strong>System.IO.IOException: 檔案存在。</strong>的錯誤。</p><p>詳細錯誤訊息如下，</p><blockquote><p>於 System.IO.<strong>Error.WinIOError(Int32 errorCode, String maybeFullPath)<br>於 System.IO.</strong>Error.WinIOError()<br>於 System.IO.Path.InternalGetTempFileName(Boolean checkHost)<br>於 System.IO.Path.GetTempFileName()<br>於 CrystalDecisions.ReportSource.EromReportSourceBase.ExportToStream(ExportRequestContext reqContext)<br>於 CrystalDecisions.CrystalReports.Engine.FormatEngine.ExportToStream(ExportRequestContext reqContext)<br>於 CrystalDecisions.CrystalReports.Engine.ReportDocument.ExportToStream(ExportOptions options)<br>於 CrystalDecisions.CrystalReports.Engine.ReportDocument.ExportToHttpResponse(ExportOptions options, HttpResponse response, Boolean asAttachment, String attachmentName)<br>於 CrystalDecisions.CrystalReports.Engine.ReportDocument.ExportToHttpResponse(ExportFormatType formatType, HttpResponse response, Boolean asAttachment, String attachmentName)<br>於 CRViewer.ExportPDF(String RptName)</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Crystal Report 的程式碼蠻簡單的，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.Response.ContentType = <span class="string">"application/pdf"</span>;</span><br><span class="line">rptDoc.ExportToHttpResponse(ExportFormatType.PortableDocFormat, <span class="literal">true</span>, <span class="keyword">this</span>.Response, <span class="literal">true</span>, <span class="string">"報表名稱"</span>);</span><br><span class="line"><span class="keyword">this</span>.Response.Flush()</span><br><span class="line"><span class="keyword">this</span>.Response.End();</span><br></pre></td></tr></table></figure><p><code>System.IO.Path.GetTempFileName()</code> 應該是不會發生錯誤呀~<br>除非是權限不足。<br>但… 之前卻是可以的… 於是再 Search 看看有沒有相似的錯誤…<br>結果真的找到 <a href="https://stackoverflow.com/questions/50906117/crystal-report-file-exists-error" target="_blank" rel="noopener">Crystal Report - File Exists Error</a> 感覺是一樣的問題。</p><blockquote><p>This exception is documented in .NET and is raised when the temp directory reaches the limit of 65535 files.<br>這個問題是因為 Temp 目錄達到限制的 <strong>65,535</strong> 個檔案所引發的錯誤。</p></blockquote><p>在 <a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.io.path.gettempfilename?view=netframework-4.8" target="_blank" rel="noopener">Path.GetTempFileName 方法</a> 有說明</p><blockquote><p>如果方法用來建立超過 65535 個檔案，而不刪除先前的暫存檔案，則 GetTempFileName 此方法會引發 IOException</p></blockquote><p>再來就是檢查 Temp 目錄中是否真的超出 65,535 個檔案，<br>結果同事回答是 65,734 個，<br>所以就請同事將檔案刪少於 65,535 再試試看，就沒有問題了。</p><p>註: Temp 目錄的路徑是 環境變數 ，系統變數(S) 中的 TEMP 的設定值(檔案總管中，在”本機”上按右鍵，選”內容”，在右邊”關於”下方，點選”進階系統設定”)<br><img src="/2022/11/15/Path-GetTempFileName-IOException-The-file-exists/01.png" title="環境變數"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/microsoft/azure-pipelines-agent/issues/2305" target="_blank" rel="noopener">System.IO.IOException: The file exists</a><br><a href="https://stackoverflow.com/questions/50906117/crystal-report-file-exists-error" target="_blank" rel="noopener">Crystal Report - File Exists Error</a><br><a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.io.path.gettempfilename?view=netframework-4.8" target="_blank" rel="noopener">Path.GetTempFileName 方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近收到一個 Crystal Report 匯出 PDF 檔案，然後給 Client 下載。&lt;br&gt;平常運作都正常，最近才出現 &lt;stron
      
    
    </summary>
    
    
      <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
      <category term="GetTempFileName" scheme="https://rainmakerho.github.io/tags/GetTempFileName/"/>
    
      <category term="IOException" scheme="https://rainmakerho.github.io/tags/IOException/"/>
    
      <category term="CrystalReports" scheme="https://rainmakerho.github.io/tags/CrystalReports/"/>
    
      <category term="ExportToHttpResponse" scheme="https://rainmakerho.github.io/tags/ExportToHttpResponse/"/>
    
      <category term="檔案存在" scheme="https://rainmakerho.github.io/tags/%E6%AA%94%E6%A1%88%E5%AD%98%E5%9C%A8/"/>
    
      <category term="The file exists" scheme="https://rainmakerho.github.io/tags/The-file-exists/"/>
    
      <category term="65535" scheme="https://rainmakerho.github.io/tags/65535/"/>
    
  </entry>
  
  <entry>
    <title>標楷體(DFKai-SB)的Word檔中有些字透過 Aspose.Words 另存成 PDF 後，會變成&quot;空白&quot;字</title>
    <link href="https://rainmakerho.github.io/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/"/>
    <id>https://rainmakerho.github.io/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/</id>
    <published>2022-11-15T03:43:15.000Z</published>
    <updated>2022-11-15T06:23:37.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>標楷體的 Word 文件中有些 Unicode 透過 Aspose.Words 另存成 PDF 時，該字會變成”空白字”，<br>例如 <a href="https://unicode-table.com/en/2FA6/" target="_blank" rel="noopener">U+2FA6(⾦)</a> 這個字，可是在 Word 中明明可以正常顯示。<br>我們可以參考 <a href="https://rainmakerho.github.io/2022/11/15/aspose-kangxi-radical-word-2-pdf-square-box/">有些字透過 Aspose.Words 讀取 Word 檔，另存成 PDF 後，會變成空白框(square box)是變成 空白字</a> 將 Word 內容轉成 「<strong>Microsoft YaHei</strong>」字型後，<br>再另存成 PDF 就可以解決 <a href="https://unicode-table.com/en/2FA6/" target="_blank" rel="noopener">U+2FA6(⾦)</a> 無法在 PDF 中顯示的問題。<br>但是，如果我的字型一定要<strong>標楷體(DFKai-SB)</strong>，要怎麼辦呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>測試的 C# 程式如下(請先加入 Aspose.Words 套件)，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docxPath = <span class="string">@"c:\temp\h2docx.docx"</span>;</span><br><span class="line"><span class="keyword">var</span> pdfPath = <span class="string">@"c:\temp\h2pdf.pdf"</span>;</span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">new</span> Aspose.Words.Document(docxPath);</span><br><span class="line"><span class="keyword">var</span> fontChanger = <span class="keyword">new</span> FontChanger(<span class="string">"DFKai-SB"</span>);</span><br><span class="line">doc.Accept(fontChanger);</span><br><span class="line">doc.Save(pdfPath);</span><br></pre></td></tr></table></figure><p>將字型全改成<strong>標楷體(DFKai-SB)</strong>，在 PDF 中還是變成一個空白，<br><img src="/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/01.png" title="square box in pdf"></p><p>查看 <a href="https://www.fileformat.info/info/unicode/font/dfkai-sb/list.htm" target="_blank" rel="noopener">Unicode characters supported by the 標楷體 font</a> ，<br>裡面的確找不到 <a href="https://unicode-table.com/en/2FA6/" target="_blank" rel="noopener">⾦</a>，<br>所以要找到有包含 <a href="https://unicode-table.com/en/2FA6/" target="_blank" rel="noopener">⾦</a> 的字型檔案，<br>同時要像 <strong>標楷體(DFKai-SB)</strong> 的字型。</p><p>…</p><p>後來筆者找到了 <a href="https://data.gov.tw/dataset/5961" target="_blank" rel="noopener">CNS11643 中文標準交換碼全字庫</a>，<br><img src="/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/03.png" title="全字庫"></p><p>裡面就包含了 <strong>全字庫正楷體</strong>(TW-Kai-98_1.ttf)，就跟 <strong>標楷體(DFKai-SB)</strong> 長的蠻像的。<br>下載 ZIP 檔案後，解壓縮後，開啟 Open_Data\Fonts 目錄，<br>DBClick TW-Kai-98_1.ttf ，按下 <strong>「安裝(I)」</strong> 將字型安裝到系統之中。<br><img src="/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/04.png" title="安裝全字庫"></p><p>在 Word 中， Copy 一份內容，改用 <strong>全字庫正楷體</strong> 來比較一下，<br>可以發現跟<strong>標楷體(DFKai-SB)</strong>差不多，而且在 PDF 中也可以正常顯示 <a href="https://unicode-table.com/en/2FA6/" target="_blank" rel="noopener">⾦</a>，<br>測試程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docxPath = <span class="string">@"c:\temp\h2docx.docx"</span>;</span><br><span class="line"><span class="keyword">var</span> pdfPath = <span class="string">@"c:\temp\h2pdf.pdf"</span>;</span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">new</span> Aspose.Words.Document(docxPath);</span><br><span class="line">doc.Save(pdfPath);</span><br></pre></td></tr></table></figure><img src="/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/02.png" title="標楷體與全字庫正楷體"><p>即然使用<strong>全字庫正楷體</strong>字型另存成 PDF 沒問題，那就將 Word 所有文字的字體改成 <strong>全字庫正楷體</strong> ，再另存就可以了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docxPath = <span class="string">@"c:\temp\h2docx.docx"</span>;</span><br><span class="line"><span class="keyword">var</span> pdfPath = <span class="string">@"c:\temp\h2pdf.pdf"</span>;</span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">new</span> Aspose.Words.Document(docxPath);</span><br><span class="line"><span class="keyword">var</span> fontChanger = <span class="keyword">new</span> FontChanger(<span class="string">"全字庫正楷體"</span>);</span><br><span class="line">doc.Accept(fontChanger);</span><br><span class="line">doc.Save(pdfPath);</span><br></pre></td></tr></table></figure><img src="/2022/11/15/aspose-kangxi-radical-dfkai-sb-pdf-square-box/05.png" title="全字庫正楷體PDF"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2022/11/15/aspose-kangxi-radical-word-2-pdf-square-box/">有些字透過 Aspose.Words 讀取 Word 檔，另存成 PDF 後，會變成空白框(square box)是變成 空白字</a><br><a href="https://data.gov.tw/dataset/5961" target="_blank" rel="noopener">CNS11643 中文標準交換碼全字庫</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;標楷體的 Word 文件中有些 Unicode 透過 Aspose.Words 另存成 PDF 時，該字會變成”空白字”，&lt;br&gt;例如 &lt;a
      
    
    </summary>
    
    
      <category term="PDF" scheme="https://rainmakerho.github.io/tags/PDF/"/>
    
      <category term="Aspose" scheme="https://rainmakerho.github.io/tags/Aspose/"/>
    
      <category term="DFKai-SB" scheme="https://rainmakerho.github.io/tags/DFKai-SB/"/>
    
      <category term="Word" scheme="https://rainmakerho.github.io/tags/Word/"/>
    
      <category term="空白框" scheme="https://rainmakerho.github.io/tags/%E7%A9%BA%E7%99%BD%E6%A1%86/"/>
    
      <category term="square box" scheme="https://rainmakerho.github.io/tags/square-box/"/>
    
      <category term="kangxi radical" scheme="https://rainmakerho.github.io/tags/kangxi-radical/"/>
    
      <category term="unicode" scheme="https://rainmakerho.github.io/tags/unicode/"/>
    
      <category term="空白字" scheme="https://rainmakerho.github.io/tags/%E7%A9%BA%E7%99%BD%E5%AD%97/"/>
    
      <category term="標楷體" scheme="https://rainmakerho.github.io/tags/%E6%A8%99%E6%A5%B7%E9%AB%94/"/>
    
      <category term="全字庫" scheme="https://rainmakerho.github.io/tags/%E5%85%A8%E5%AD%97%E5%BA%AB/"/>
    
  </entry>
  
</feed>
