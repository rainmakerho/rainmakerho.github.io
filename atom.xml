<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客 - Re:從零開始的軟體開發生活</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Re:從零開始的軟體開發生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2022-05-11T08:20:37.136Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AADSTS50011 The redirect URI &#39;https://.../licensemanagement/signin-azuread-oidc&#39; specified in the request does not match the redirect URIs configured for the application &#39;appid&#39;</title>
    <link href="https://rainmakerho.github.io/2022/05/11/AADSTS50011/"/>
    <id>https://rainmakerho.github.io/2022/05/11/AADSTS50011/</id>
    <published>2022-05-11T07:41:58.000Z</published>
    <updated>2022-05-11T08:20:37.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近一個系統整合 Azure AD 登入，不定時會出現 <strong>AADSTS50011: The redirect URI</strong> 的錯誤</p><blockquote><p>抱歉，我們無法將您登入。<br>AADSTS50011: The redirect URI ‘https://…/licensemanagement/signin-azuread-oidc’ specified in the request does not match the redirect URIs configured for the application ‘5000xxxx-xxxx-xxxx-b9cf-1dxxxx1dxxxx’. Make sure the redirect URI sent in the request matches one added to your application in the Azure portal. Navigate to <a href="https://aka.ms/redirectUriMismatchError" target="_blank" rel="noopener">https://aka.ms/redirectUriMismatchError</a> to learn more about how to fix this. More details: Reply address did not match because of case sensitivity.</p></blockquote><img src="/2022/05/11/AADSTS50011/01.png" title="AADSTS50011"><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>看錯誤訊息中所顯示的 URI 跟 Azure AD 的 App registrations 中該 AP 的 Authentication 功能中，<br>Redirect URIs 裡面設定的是一樣的!</p><p>因為同事 HiHi 測試會錯誤，而我測試則正確，結果同事將它的 URL 傳給我，<br>並詢問我該 URL 是否正確。<br>我點下該 URL 登入，居然也出現 <strong>AADSTS50011</strong> 的錯誤。<br>而我另開 Browser 自行輸入 URL 登入，居然又沒問題了。<br>於是我將 2 個 URL 比較了一下，終於發現問題。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://.../licensemanagement</span><br><span class="line">https://.../Licensemanagement</span><br></pre></td></tr></table></figure><p>不知眼尖的朋友有沒有發現問題所在?<br>沒錯，就是<strong>大小寫</strong>的問題。</p><p>因為我在 Azure AD 中設定的是 <code>Licensemanagement</code> ，<br>而錯誤的 URL 卻是 <code>licensemanagement</code> 。</p><p>後來將全小寫的 URL 也新增到 Azure AD 該 App 的 Redirect URIs 之中就沒問題了。</p><ul><li>註: 感謝同事 HiHi Paul 一起幫忙找出問題 ^_^</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.microsoft.com/en-us/troubleshoot/azure/active-directory/error-code-aadsts50011-reply-url-mismatch" target="_blank" rel="noopener">Error AADSTS50011 - The reply URL ‘reply URL sent’ specified in the request does not match the reply URLs configured for the application ‘appId’</a><br><a href="https://docs.abp.io/zh-Hans/abp/latest/How-To/Azure-Active-Directory-Authentication-MVC" target="_blank" rel="noopener">如何对MVC / Razor页面应用程序使用Azure Active Directory身份验证</a><br><a href="https://stackoverflow.com/questions/56447508/can-i-turn-off-case-sensitivity-for-azure-ad-redirecturi" target="_blank" rel="noopener">Can I turn off case sensitivity for Azure AD RedirectURI</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近一個系統整合 Azure AD 登入，不定時會出現 &lt;strong&gt;AADSTS50011: The redirect URI&lt;/str
      
    
    </summary>
    
    
      <category term="AADSTS50011" scheme="https://rainmakerho.github.io/tags/AADSTS50011/"/>
    
      <category term="Azure" scheme="https://rainmakerho.github.io/tags/Azure/"/>
    
      <category term="Azure AD" scheme="https://rainmakerho.github.io/tags/Azure-AD/"/>
    
      <category term="signin-azuread-oidc" scheme="https://rainmakerho.github.io/tags/signin-azuread-oidc/"/>
    
      <category term="Redirect URIs" scheme="https://rainmakerho.github.io/tags/Redirect-URIs/"/>
    
      <category term="case sensitivity" scheme="https://rainmakerho.github.io/tags/case-sensitivity/"/>
    
  </entry>
  
  <entry>
    <title>JanusGraph 學習 - 以朋友關係為例</title>
    <link href="https://rainmakerho.github.io/2022/05/10/gremlin-friends-examples/"/>
    <id>https://rainmakerho.github.io/2022/05/10/gremlin-friends-examples/</id>
    <published>2022-05-10T02:25:48.000Z</published>
    <updated>2022-05-10T05:59:44.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>學習最好的方式就是練習，以下使用 person-&gt;friends-&gt;person 的朋友關係資料來練習。</p><ol><li>Dave 的朋友是那些人?</li><li>Dave 的朋友的朋友是那些人?</li><li>Ted 要如何關連到 Denise ?</li></ol><h3 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h3><p>使用 Docker 最方便，所以第一次透過 <code>docker run</code> 將 JanusGraph 下載下來並執行<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --name janusgraph-default docker.io/janusgraph/janusgraph:latest</span><br></pre></td></tr></table></figure></p><img src="/2022/05/10/gremlin-friends-examples/01.png" title="docker run"><p>如果要停止 janusgraph ，可執行 <code>docker stop janusgraph-default</code><br>要再執行 janusgraph ，可執行 <code>docker start janusgraph-default</code><br><img src="/2022/05/10/gremlin-friends-examples/02.png" title="docker stop/start"></p><p>當 JanusGraph 執行起來後，開啟 Gremlin Console<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it janusgraph-default ./bin/gremlin.sh</span><br></pre></td></tr></table></figure></p><img src="/2022/05/10/gremlin-friends-examples/03.png" title="docker exec -it"><p>連到 JanusGraph 的 Gremlin Server，並將 Gremlin Console 切換到 Remote<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:remote connect tinkerpop.server conf/remote.yaml session</span><br><span class="line"></span><br><span class="line">:remote console</span><br></pre></td></tr></table></figure></p><img src="/2022/05/10/gremlin-friends-examples/04.png" title="gremlin console"><h3 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h3><p>在 Gremlin Console 中，貼上以下的 groovy 程式，以新增朋友的資料<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Remove any existing data to allow this to be rerun</span></span><br><span class="line">g.V().drop().iterate()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Dave and saves it to a variable</span></span><br><span class="line">dave = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Dave'</span>).next()</span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Josh and saves it to a variable</span></span><br><span class="line">josh = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Josh'</span>).next()</span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Ted and saves it to a variable</span></span><br><span class="line">ted = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Ted'</span>).next()</span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Hank and saves it to a variable</span></span><br><span class="line">hank = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Hank'</span>).next()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adds a friends edge between Dave and Ted</span></span><br><span class="line">g.addE(<span class="string">'friends'</span>).from(dave).to(ted).next()</span><br><span class="line"><span class="comment">//Adds a friends edge between Dave and Josh</span></span><br><span class="line">g.addE(<span class="string">'friends'</span>).from(dave).to(josh).next()</span><br><span class="line"><span class="comment">//Adds a friends edge between Dave and Hank</span></span><br><span class="line">g.addE(<span class="string">'friends'</span>).from(dave).to(hank).next()</span><br><span class="line"><span class="comment">//Adds a friends edge between Josh and Hank</span></span><br><span class="line">g.addE(<span class="string">'friends'</span>).from(josh).to(hank).next()</span><br><span class="line"><span class="comment">//Adds a friends edge between Ted and Josh</span></span><br><span class="line">g.addE(<span class="string">'friends'</span>).from(ted).to(josh).next()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Kelly and saves it to a variable</span></span><br><span class="line">kelly = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Kelly'</span>).next()</span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Jim and saves it to a variable</span></span><br><span class="line">jim = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Jim'</span>).next()</span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Paras and saves it to a variable</span></span><br><span class="line">paras = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Paras'</span>).next()</span><br><span class="line"><span class="comment">//Adds a person vertex with a name of Denise and saves it to a variable</span></span><br><span class="line">denise = g.addV(<span class="string">'person'</span>).property(<span class="string">'first_name'</span>, <span class="string">'Denise'</span>).next()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Adds friends edges</span></span><br><span class="line">g.addE(<span class="string">'friends'</span>).from(dave).to(jim).</span><br><span class="line">        addE(<span class="string">'friends'</span>).from(dave).to(kelly).</span><br><span class="line">        addE(<span class="string">'friends'</span>).from(kelly).to(jim).</span><br><span class="line">        addE(<span class="string">'friends'</span>).from(kelly).to(denise).</span><br><span class="line">        addE(<span class="string">'friends'</span>).from(jim).to(denise).</span><br><span class="line">        addE(<span class="string">'friends'</span>).from(jim).to(paras).</span><br><span class="line">        addE(<span class="string">'friends'</span>).from(paras).to(denise).iterate()</span><br></pre></td></tr></table></figure></p><ul><li>註: 以上資料來自 <a href="https://www.ituring.com.cn/book/2889" target="_blank" rel="noopener">图数据库实战</a> 的《图数据库实战》源代码文件.zip</li></ul><h3 id="練習問題"><a href="#練習問題" class="headerlink" title="練習問題"></a>練習問題</h3><h4 id="Dave-的朋友是那些人"><a href="#Dave-的朋友是那些人" class="headerlink" title="Dave 的朋友是那些人?"></a>Dave 的朋友是那些人?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g.V().has(&apos;person&apos;, &apos;first_name&apos;, &apos;Dave&apos;).outE(&apos;friends&apos;).inV().values(&apos;first_name&apos;)</span><br></pre></td></tr></table></figure><ul><li>註:<code>outE(&#39;friends&#39;) + inV()</code> 可以改用 <code>out(&#39;friends&#39;)</code>，所以 gremlin 可以改成<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g.V().has(<span class="string">'person'</span>, <span class="string">'first_name'</span>, <span class="string">'Dave'</span>).out(<span class="string">'friends'</span>).values(<span class="string">'first_name'</span>)</span><br></pre></td></tr></table></figure></li></ul><img src="/2022/05/10/gremlin-friends-examples/05.png" title="找朋友"><h4 id="Dave-的朋友的朋友是那些人"><a href="#Dave-的朋友的朋友是那些人" class="headerlink" title="Dave 的朋友的朋友是那些人?"></a>Dave 的朋友的朋友是那些人?</h4><p>朋友的朋友，就是找朋友 <strong>2</strong> 次，所以可以用 <code>times(2)</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g.V().has(<span class="string">'person'</span>, <span class="string">'first_name'</span>, <span class="string">'Dave'</span>).</span><br><span class="line">repeat(</span><br><span class="line">  out(<span class="string">'friends'</span>)</span><br><span class="line">).times(<span class="number">2</span>).values(<span class="string">'first_name'</span>)</span><br></pre></td></tr></table></figure></p><ul><li>註: 因為有重覆的人，可以使用 <code>dedup()</code> 去除重覆資料 Denise 就只會顯示一筆<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">g.V().has(<span class="string">'person'</span>, <span class="string">'first_name'</span>, <span class="string">'Dave'</span>).</span><br><span class="line">repeat(</span><br><span class="line">  out(<span class="string">'friends'</span>)</span><br><span class="line">).times(<span class="number">2</span>).</span><br><span class="line">dedup().</span><br><span class="line">values(<span class="string">'first_name'</span>)</span><br></pre></td></tr></table></figure></li></ul><img src="/2022/05/10/gremlin-friends-examples/06.png" title="找朋友的朋友"><h4 id="Ted-要如何關連到-Denise"><a href="#Ted-要如何關連到-Denise" class="headerlink" title="Ted 要如何關連到 Denise ?"></a>Ted 要如何關連到 Denise ?</h4><p>所以從 Ted <code>until</code> 到 Denise ，然後 <code>repeat</code> 來取出路徑，再顯示出 first_name<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g.V().has(<span class="string">'person'</span>, <span class="string">'first_name'</span>, <span class="string">'Ted'</span>).</span><br><span class="line">until(has(<span class="string">'person'</span>, <span class="string">'first_name'</span>, <span class="string">'Denise'</span>)).</span><br><span class="line">repeat(</span><br><span class="line">both(<span class="string">'friends'</span>).simplePath()</span><br><span class="line">).path().by(values(<span class="string">'first_name'</span>))</span><br></pre></td></tr></table></figure></p><img src="/2022/05/10/gremlin-friends-examples/07.png" title="Ted 要如何關連到 Denise"><ul><li>註: GraphDatabase 的查詢通常是從 Vertex(Node) 開始，從 Edge 開始通常會有效能問題</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="tactsunny.medium.com/out-vs-oute-janusgraph-and-gremlin-e19cebb9556e">out() vs. outE() — JanusGraph and Gremlin</a><br><a href="https://www.ituring.com.cn/book/2889" target="_blank" rel="noopener">图数据库实战</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;學習最好的方式就是練習，以下使用 person-&amp;gt;friends-&amp;gt;person 的朋友關係資料來練習。&lt;/p&gt;
&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="GraphDatabase" scheme="https://rainmakerho.github.io/tags/GraphDatabase/"/>
    
      <category term="JanusGraph" scheme="https://rainmakerho.github.io/tags/JanusGraph/"/>
    
      <category term="Gremlin" scheme="https://rainmakerho.github.io/tags/Gremlin/"/>
    
      <category term="person" scheme="https://rainmakerho.github.io/tags/person/"/>
    
      <category term="friends" scheme="https://rainmakerho.github.io/tags/friends/"/>
    
      <category term="path()" scheme="https://rainmakerho.github.io/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>System.Security.Authentication.AuthenticationException - The remote certificate is invalid because of errors in the certificate chain - PartialChain</title>
    <link href="https://rainmakerho.github.io/2022/05/04/openidconnecthandler-getuserinformationasync-tls-error/"/>
    <id>https://rainmakerho.github.io/2022/05/04/openidconnecthandler-getuserinformationasync-tls-error/</id>
    <published>2022-05-04T07:15:31.000Z</published>
    <updated>2022-05-04T07:58:20.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我們有個 Web App 部署到正式環境，透過 Azure AD 登入後，<br>程式會轉到 Web App 的 <strong>/signin-azuread-oidc</strong> 然後它會轉址到錯誤頁面，<br>錯誤的Log如下，</p><blockquote><p>[ERR] Exception occurred while processing message.<br>System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.<br> —&gt; System.Security.Authentication.AuthenticationException: The remote certificate is invalid because of errors in the certificate chain: PartialChain<br>   at System.Net.Security.SslStream.SendAuthResetSignal(ProtocolToken message, ExceptionDispatchInfo exception)<br>   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](TIOAdapter adapter, Boolean receiveFirst, Byte[] reAuthenticationData, Boolean isApm)<br>   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Boolean async, Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)<br>   — End of inner exception stack trace —<br>   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Boolean async, Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)<br>   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)<br>   at System.Net.Http.DiagnosticsHandler.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)<br>   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler.GetUserInformationAsync(OpenIdConnectMessage message, JwtSecurityToken jwt, ClaimsPrincipal principal, AuthenticationProperties properties)<br>   at Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler.HandleRemoteAuthenticateAsync()</p></blockquote><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>因為不知道到 <strong>login.microsoftonline.com</strong> 登入後，<br><code>POST webap/signin-azuread-oidc</code> 後會發生錯誤，<br>從 Log 並不知道錯誤的 URL 是那一個，<br>所以請同事透過 VS.NET 並開啟 Fiddler 錄看看，<br>結果同事在 Fiddler 中發現它還會連到 <strong><a href="https://graph.microsoft.com" target="_blank" rel="noopener">https://graph.microsoft.com</a></strong>，<br>而在正式機開啟 Browser 連到 <strong><a href="https://graph.microsoft.com" target="_blank" rel="noopener">https://graph.microsoft.com</a></strong> ，<br>發現它會轉址到 <strong><a href="https://developer.microsoft.com/graph" target="_blank" rel="noopener">https://developer.microsoft.com/graph</a></strong>，<br>在網頁中，該網址會被 FortiGuard 擋掉。<br><img src="/2022/05/04/openidconnecthandler-getuserinformationasync-tls-error/01.png" title="FortiGuard Block URL"></p><p>後來申請正式機允許可以連出到 <strong><a href="https://developer.microsoft.com" target="_blank" rel="noopener">https://developer.microsoft.com</a></strong>，<br>Web App 就可以正常登入了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我們有個 Web App 部署到正式環境，透過 Azure AD 登入後，&lt;br&gt;程式會轉到 Web App 的 &lt;strong&gt;/sign
      
    
    </summary>
    
    
      <category term="Azure" scheme="https://rainmakerho.github.io/tags/Azure/"/>
    
      <category term="OpenIdConnectHandler.GetUserInformationAsync" scheme="https://rainmakerho.github.io/tags/OpenIdConnectHandler-GetUserInformationAsync/"/>
    
      <category term="OpenIdConnectHandler.HandleRemoteAuthenticateAsync" scheme="https://rainmakerho.github.io/tags/OpenIdConnectHandler-HandleRemoteAuthenticateAsync/"/>
    
      <category term="FortiGuard" scheme="https://rainmakerho.github.io/tags/FortiGuard/"/>
    
      <category term="SSL" scheme="https://rainmakerho.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Teams 在 Calendar 上建立 會議 ，並設定它是線上會議</title>
    <link href="https://rainmakerho.github.io/2022/05/04/teams-create-enable-online-meeting/"/>
    <id>https://rainmakerho.github.io/2022/05/04/teams-create-enable-online-meeting/</id>
    <published>2022-05-04T00:22:22.000Z</published>
    <updated>2022-05-04T03:40:27.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2022/04/29/teams-app-access-meetings-behalf-user/">Teams App 代替使用者建立線上會議，讓該使用者為會議主持人</a> 可以透過 App 快速建立 <strong>線上會議</strong> 。<br>但這樣只是建立線上會議，跟 Calendar 無關，而且還要透過 Access Policy 去設定。<br>所以更方便的做法就是在 Calendar 上建立 會議 ，並設定它是線上會議，這樣就不用特別去設定 Access Policy。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>因為要建立 Calendar ，所以 App 需要的 Application permissions 為 <strong>Calendars.ReadWrite</strong>，而原本需要的 <strong>OnlineMeetings.ReadWrite.All</strong><br>權限則可以 <strong>Revoke admin consent</strong> 後，再 <strong>Remove premission</strong>。<br>將 App 從 Access Policy 中移除，移除套用 Access Policy 的使用者， 並將 Access Policy 移除。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除套用 Access Policy 的使用者</span></span><br><span class="line">Get-CsOnlineUser | Grant-CsApplicationAccessPolicy -PolicyName <span class="literal">$Null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 App 從 Access Policy 中移除</span></span><br><span class="line">Set-CsApplicationAccessPolicy -Identity <span class="string">"teams-meetings-policy"</span> -AppIds @&#123;Remove=<span class="string">"要移的Application (client) ID"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#將 Access Policy 移除</span></span><br><span class="line">Remove-CsApplicationAccessPolicy -Identity <span class="string">"teams-meetings-policy"</span></span><br></pre></td></tr></table></figure></p><p>加入 <strong>Calendars.ReadWrite</strong> 權限後，一樣需要 <strong>Grant admin consent</strong>。</p><p>再來就是取得 <strong>App 的 Token</strong><br>依 <a href="https://docs.microsoft.com/en-us/graph/auth-v2-service" target="_blank" rel="noopener">Get access without a user</a> 的 <strong>4. Get an access token</strong> ，<br>依 Application (client) ID 及 Client secrets，Scope 給 <strong><a href="https://graph.microsoft.com/.default" target="_blank" rel="noopener">https://graph.microsoft.com/.default</a></strong> 來取回 Token。<br><img src="https://rainmakerho.github.io/2022/04/29/teams-app-access-meetings-behalf-user/02.png" alt="Get App Token"></p><h4 id="在-Calendar-上建立-會議-，並設定它是線上會議"><a href="#在-Calendar-上建立-會議-，並設定它是線上會議" class="headerlink" title="在 Calendar 上建立 會議 ，並設定它是線上會議"></a>在 Calendar 上建立 會議 ，並設定它是線上會議</h4><p>依 <a href="https://docs.microsoft.com/en-us/graph/outlook-calendar-online-meetings?tabs=http" target="_blank" rel="noopener">Enable an event as an online meeting in an Outlook calendar</a>，拿上述取得的 App Token ，使用 <code>https://graph.microsoft.com/v1.0/users/{user Object Id}/events</code> ，並給會議的資訊，例如，<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"subject"</span>: <span class="string">"線上會議測試"</span>,</span><br><span class="line">  <span class="attr">"body"</span>: &#123;</span><br><span class="line">    <span class="attr">"contentType"</span>: <span class="string">"HTML"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"&lt;h3&gt;hello events&lt;/h3&gt;線上會議測試--- 有時間嗎?"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"start"</span>: &#123;</span><br><span class="line">      <span class="attr">"dateTime"</span>: <span class="string">"2022-05-03T18:00:00.0000000+08:00"</span>,</span><br><span class="line">      <span class="attr">"timeZone"</span>: <span class="string">"Pacific Standard Time"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"end"</span>: &#123;</span><br><span class="line">      <span class="attr">"dateTime"</span>: <span class="string">"2022-05-03T18:30:00.0000000+08:00"</span>,</span><br><span class="line">      <span class="attr">"timeZone"</span>: <span class="string">"Pacific Standard Time"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"location"</span>:&#123;</span><br><span class="line">      <span class="attr">"displayName"</span>:<span class="string">"666 會議室"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"attendees"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"emailAddress"</span>: &#123;</span><br><span class="line">        <span class="attr">"address"</span>:<span class="string">"rainmaker@rm.com.tw"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"rainmaker"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"required"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"allowNewTimeProposals"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"isOnlineMeeting"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"onlineMeetingProvider"</span>: <span class="string">"teamsForBusiness"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣就會在行事曆中顯示該線上會議，<br><img src="/2022/05/04/teams-create-enable-online-meeting/01.png" title="Post events"></p><img src="/2022/05/04/teams-create-enable-online-meeting/02.png" title="線上會議"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.microsoft.com/en-us/graph/outlook-calendar-online-meetings?tabs=http" target="_blank" rel="noopener">Enable an event as an online meeting in an Outlook calendar</a><br><a href="https://docs.microsoft.com/en-us/powershell/module/skype/grant-csapplicationaccesspolicy?view=skype-ps" target="_blank" rel="noopener">Grant-CsApplicationAccessPolicy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2022/04/29/teams-app-access-m
      
    
    </summary>
    
    
      <category term="OnlineMeetings.ReadWrite.All" scheme="https://rainmakerho.github.io/tags/OnlineMeetings-ReadWrite-All/"/>
    
      <category term="teams" scheme="https://rainmakerho.github.io/tags/teams/"/>
    
      <category term="meeting" scheme="https://rainmakerho.github.io/tags/meeting/"/>
    
      <category term="outlook" scheme="https://rainmakerho.github.io/tags/outlook/"/>
    
      <category term="calendar" scheme="https://rainmakerho.github.io/tags/calendar/"/>
    
      <category term="Calendars.ReadWrite" scheme="https://rainmakerho.github.io/tags/Calendars-ReadWrite/"/>
    
  </entry>
  
  <entry>
    <title>Teams App 代替使用者建立線上會議，讓該使用者為會議主持人</title>
    <link href="https://rainmakerho.github.io/2022/04/29/teams-app-access-meetings-behalf-user/"/>
    <id>https://rainmakerho.github.io/2022/04/29/teams-app-access-meetings-behalf-user/</id>
    <published>2022-04-29T02:53:08.000Z</published>
    <updated>2022-05-04T03:15:03.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Application 可以設定所需要的 Permissions，<br>再透過 Microsoft Graph API 去存取。<br>而所需的 Permissions ，可以區分成 <strong>Delegated</strong> 及 <strong>Application</strong>，<br>詳細可以參考 <a href="https://docs.microsoft.com/en-us/graph/permissions-reference" target="_blank" rel="noopener">Microsoft Graph permissions reference</a>。<br>大部份是設定 <strong>Delegated</strong> 的 Permissions 讓 End User 去做自已的事，<br>我們有個情境需要替使用者建立一個線上會議，所以需要的就是 <strong>Application</strong> 的 <strong>OnlineMeetings.ReadWrite.All</strong> Permission。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="1-在-Azure-AD-註冊-App"><a href="#1-在-Azure-AD-註冊-App" class="headerlink" title="1.在 Azure AD 註冊 App"></a>1.在 Azure AD 註冊 App</h4><p>所以可以依 <a href="https://docs.microsoft.com/en-us/graph/auth-v2-service" target="_blank" rel="noopener">Get access without a user</a> 來註冊 App 並設定 <strong>User.Read.All</strong>(測試用) 及 <strong>OnlineMeetings.ReadWrite.All</strong> Permissions，並建立 App 的 Client secrets。</p><h4 id="2-Grant-admin-consent"><a href="#2-Grant-admin-consent" class="headerlink" title="2.Grant admin consent"></a>2.Grant admin consent</h4><p>註冊好之後，請 Azure AD 管理人員到 Azure Active Directory -&gt; App registrations 找到 註冊的 App ，<br>點選該 App ，再點選 API permissions 去 <strong>Grant admin consent</strong><br><img src="/2022/04/29/teams-app-access-meetings-behalf-user/01.png" title="Grant admin consent"></p><h4 id="3-取回-App-的-Token"><a href="#3-取回-App-的-Token" class="headerlink" title="3.取回 App 的 Token"></a>3.取回 App 的 Token</h4><p>依 <a href="https://docs.microsoft.com/en-us/graph/auth-v2-service" target="_blank" rel="noopener">Get access without a user</a> 的 <strong>4. Get an access token</strong> ，<br>依 Application (client) ID 及 Client secrets，Scope 給 <strong><a href="https://graph.microsoft.com/.default" target="_blank" rel="noopener">https://graph.microsoft.com/.default</a></strong> 來取回 Token。<br><img src="/2022/04/29/teams-app-access-meetings-behalf-user/02.png" title="Get App access token"></p><h4 id="4-取得使用者資訊"><a href="#4-取得使用者資訊" class="headerlink" title="4.取得使用者資訊"></a>4.取得使用者資訊</h4><p>依 <a href="https://docs.microsoft.com/en-us/graph/auth-v2-service" target="_blank" rel="noopener">Get access without a user</a> 的 <strong>5. Use the access token to call Microsoft Graph</strong> ，拿上述取得的 Token 來取回使用者資資訊，<br><img src="/2022/04/29/teams-app-access-meetings-behalf-user/03.png" title="取得使用者資訊"></p><h4 id="5-替某個使用者建立線上會議"><a href="#5-替某個使用者建立線上會議" class="headerlink" title="5.替某個使用者建立線上會議"></a>5.替某個使用者建立線上會議</h4><p>依 <a href="https://docs.microsoft.com/en-us/graph/api/application-post-onlinemeetings?view=graph-rest-1.0&amp;amp%3Btabs=http&amp;tabs=http" target="_blank" rel="noopener">Create onlineMeeting</a> ，拿上述取得的 Token ，使用 <code>POST /users/{user Object Id}/onlineMeetings</code>，為該使用者建立線上會議。<br>結果會出現 <strong>No Application Access Policy found for this app.</strong> 的錯誤。<br>那是因為，如果 App 要為使用者建立線上會議，需要依 <a href="https://docs.microsoft.com/en-us/graph/cloud-communication-online-meeting-application-access-policy" target="_blank" rel="noopener">Allow applications to access online meetings on behalf of a user</a> 的設定。</p><p>以<strong>系統管理員</strong>身份開啟 Power Shell 視窗，連接到 Teams。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> MicrosoftTeams</span><br><span class="line">Connect-MicrosoftTeams</span><br></pre></td></tr></table></figure></p><blockquote><p>註:如果沒有 MicrosoftTeams Module 請參考 <a href="https://docs.microsoft.com/en-us/microsoftteams/teams-powershell-install" target="_blank" rel="noopener">Install Microsoft Teams PowerShell Module</a> 安裝</p></blockquote><p>建立 Application Access Policy ，並將 App 加入<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-CsApplicationAccessPolicy -Identity <span class="string">"teams-meetings-policy"</span> -AppIds <span class="string">"Application (client) ID"</span> -Description <span class="string">"Allow applications to access online meetings on behalf of a user"</span></span><br></pre></td></tr></table></figure></p><p>設定某個使用者去套用 Application Access Policy<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant-CsApplicationAccessPolicy -PolicyName <span class="string">"teams-meetings-policy"</span> -Identity <span class="string">"使用者的ObjectId"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>註:如果針對整個 tenant 可以設定 <code>-Global</code><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant-CsApplicationAccessPolicy -PolicyName <span class="string">"teams-meetings-policy"</span> -Global</span><br></pre></td></tr></table></figure></p></blockquote><p>設定好之後，就可以透過 <code>POST /users/{userId}/onlineMeetings</code> 來幫該使用者建立線上會議<br><img src="/2022/04/29/teams-app-access-meetings-behalf-user/04.png" title="Create onlineMeetings"></p><blockquote><p>註:如果沒有設定使用者套用 Application Access Policy，則會出現 <strong>403</strong> <strong>No Application Access Policy found for this app.</strong> 的錯誤</p></blockquote><img src="/2022/04/29/teams-app-access-meetings-behalf-user/05.png" title="No Application Access Policy found for this app."><h4 id="6-Application-Access-Policy-相關設定"><a href="#6-Application-Access-Policy-相關設定" class="headerlink" title="6.Application Access Policy 相關設定"></a>6.Application Access Policy 相關設定</h4><p>增加 App 到 Policy<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-CsApplicationAccessPolicy -Identity <span class="string">"teams-meetings-policy"</span> -AppIds @&#123;Add=<span class="string">"新的Application (client) ID"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>從 Policy 移除 App<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-CsApplicationAccessPolicy -Identity <span class="string">"teams-meetings-policy"</span> -AppIds @&#123;Remove=<span class="string">"要移的Application (client) ID"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>設定 User 不套用 Access Policy<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grant-CsApplicationAccessPolicy -Identity <span class="string">"使用者的ObjectId"</span> -PolicyName <span class="literal">$Null</span></span><br></pre></td></tr></table></figure></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://docs.microsoft.com/en-us/graph/cloud-communication-online-meeting-application-access-policy" target="_blank" rel="noopener">Allow applications to access online meetings on behalf of a user</a><br><a href="https://blog.thoughtstuff.co.uk/2020/09/you-can-now-create-microsoft-teams-meetings-as-an-application-without-a-users-needing-to-be-present-heres-how-to-use-application-access-policy/" target="_blank" rel="noopener">You can now create Microsoft Teams meetings as an application without a users needing to be present: here’s how to use Application Access Policy</a><br><a href="https://docs.microsoft.com/en-us/microsoftteams/teams-powershell-install" target="_blank" rel="noopener">Install Microsoft Teams PowerShell Module</a><br><a href="https://docs.microsoft.com/en-us/graph/auth-v2-service" target="_blank" rel="noopener">Get access without a user</a><br><a href="https://docs.microsoft.com/en-us/graph/api/application-post-onlinemeetings?view=graph-rest-1.0&amp;amp%3Btabs=http&amp;tabs=http" target="_blank" rel="noopener">Create onlineMeeting</a><br><a href="https://docs.microsoft.com/en-us/microsoft-365/enterprise/manage-skype-for-business-online-with-microsoft-365-powershell?view=o365-worldwide" target="_blank" rel="noopener">Manage Skype for Business Online with PowerShell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Application 可以設定所需要的 Permissions，&lt;br&gt;再透過 Microsoft Graph API 去存取。&lt;br&gt;而
      
    
    </summary>
    
    
      <category term="Teams" scheme="https://rainmakerho.github.io/tags/Teams/"/>
    
      <category term="meetings" scheme="https://rainmakerho.github.io/tags/meetings/"/>
    
      <category term="behalf of a user" scheme="https://rainmakerho.github.io/tags/behalf-of-a-user/"/>
    
      <category term="Microsoft Graph" scheme="https://rainmakerho.github.io/tags/Microsoft-Graph/"/>
    
      <category term="Access Policy" scheme="https://rainmakerho.github.io/tags/Access-Policy/"/>
    
      <category term="No Application Access Policy found for this app." scheme="https://rainmakerho.github.io/tags/No-Application-Access-Policy-found-for-this-app/"/>
    
      <category term="OnlineMeetings.ReadWrite.All" scheme="https://rainmakerho.github.io/tags/OnlineMeetings-ReadWrite-All/"/>
    
  </entry>
  
  <entry>
    <title>Teams 中的 Bot 是 Disabled 狀態</title>
    <link href="https://rainmakerho.github.io/2022/04/28/teams-bot-disabled/"/>
    <id>https://rainmakerho.github.io/2022/04/28/teams-bot-disabled/</id>
    <published>2022-04-28T03:54:39.000Z</published>
    <updated>2022-04-28T05:59:25.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>同事將寫好的 Teams Bot 上傳到 Teams 後，要使用 Bot 時，卻發現它是 Disabled 的狀態。<br><img src="/2022/04/28/teams-bot-disabled/01.png" title="Bot-Disabled"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>在 <a href="https://admin.teams.microsoft.com/policies/manage-apps" target="_blank" rel="noopener">Microsoft Teams admin center - Manage apps(管理應用程式) 功能</a> 畫面中，<br>按下 「Org-wide app settings(全域應用程式設定)」 Button，<br>發現 <strong>發行到市集的新協力廠商應用程式</strong> 及 <strong>與自訂應用程式戶動</strong> 沒有開啟，<br>將它們設定成開啟後， Bot 就可以使用了哦!<br><img src="/2022/04/28/teams-bot-disabled/02.png" title="全域應用程式設定"></p><p>如果要測試 Teams Bot 有沒有問題，也可以透過 <a href="https://dev.teams.microsoft.com/appvalidation.html" target="_blank" rel="noopener">Teams app validator</a> 來驗證看看。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://dev.teams.microsoft.com/appvalidation.html" target="_blank" rel="noopener">Teams app validator</a><br><a href="https://admin.teams.microsoft.com" target="_blank" rel="noopener">Microsoft Teams admin center</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;同事將寫好的 Teams Bot 上傳到 Teams 後，要使用 Bot 時，卻發現它是 Disabled 的狀態。&lt;br&gt;&lt;img src
      
    
    </summary>
    
    
      <category term="Teams" scheme="https://rainmakerho.github.io/tags/Teams/"/>
    
      <category term="Bot" scheme="https://rainmakerho.github.io/tags/Bot/"/>
    
      <category term="Disabled" scheme="https://rainmakerho.github.io/tags/Disabled/"/>
    
      <category term="Teams app validator" scheme="https://rainmakerho.github.io/tags/Teams-app-validator/"/>
    
      <category term="Org-wide app settings" scheme="https://rainmakerho.github.io/tags/Org-wide-app-settings/"/>
    
  </entry>
  
  <entry>
    <title>RequestSizeLimit 屬性在 Abp Framework 中，沒有作用</title>
    <link href="https://rainmakerho.github.io/2022/04/25/requestsizelimit-attribute-not-working-abp/"/>
    <id>https://rainmakerho.github.io/2022/04/25/requestsizelimit-attribute-not-working-abp/</id>
    <published>2022-04-25T08:13:44.000Z</published>
    <updated>2022-05-04T03:09:59.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2022/04/22/aspnetcore-request-entity-too-large/">ASP.NET Core File Upload Size Limit</a> 說明，當設定整個系統的上傳檔案大小後，<br>如果要針對某個 Method 調整成別 Size ，<br>可以透過設定 <strong>RequestSizeLimit</strong> 屬性來達成。<br>最近使用 Abp Framework 來測試時，使用 <a href="https://community.abp.io/posts/file-uploaddownload-with-blob-storage-system-in-asp.net-core-abp-framework-d01cbe12" target="_blank" rel="noopener">File Upload/Download with BLOB Storage System in ASP.NET Core &amp; ABP Framework</a> 範例來測試上傳檔案，設定 <strong>RequestSizeLimit</strong> 屬性卻沒有效果。</p><h3 id="研究-求助"><a href="#研究-求助" class="headerlink" title="研究/求助"></a>研究/求助</h3><p>所以一樣在 Action Method 那設定 <strong>RequestSizeLimit</strong> 屬性，限制為 2011 Bytes，<br>並設定中斷點來查看 <strong>HttpContext.Features.MaxRequestBodySize</strong>，<br>發現它的值並沒有變成 2011，而是預設值 <strong>30,000,000</strong><br><img src="/2022/04/25/requestsizelimit-attribute-not-working-abp/01.png" title="HttpContext.Features.MaxRequestBodySize"></p><p>而且 Log 裡面有一段是說 IHttpRequestBodySizeFeature 是 read-only</p><blockquote><p>[WRN] A request body size limit could not be applied. The IHttpRequestBodySizeFeature for the server is read-only.</p></blockquote><p>所以就在 abp github 上填一個 issue 求助，<br><a href="https://github.com/abpframework/abp/issues/12336" target="_blank" rel="noopener">RequestSizeLimit attribute not working</a><br>他們的回覆很快速，一天就有了結果。<br>因為 RequestSizeLimit 屬性與 Abp Framework 有些衝突，<br>所以目前是無法正常運作的。<br>所以只能透過自定義的屬性搭配 Middleware 來設定 HttpContext.Features.MaxRequestBodySize 的值，如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (MultiTenancyConsts.IsEnabled)</span><br><span class="line">&#123;</span><br><span class="line">    app.Use(<span class="keyword">async</span> (httpContext, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> endpoint = httpContext.GetEndpoint();</span><br><span class="line">        <span class="keyword">var</span> requestSizeLimitAttribute = endpoint?.Metadata.GetMetadata&lt;MyRequestSizeLimitAttribute&gt;();</span><br><span class="line">        <span class="keyword">if</span> (requestSizeLimitAttribute != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> maxRequestBodySizeFeature = httpContext.Features.Get&lt;IHttpMaxRequestBodySizeFeature&gt;();</span><br><span class="line">            <span class="keyword">if</span> (maxRequestBodySizeFeature != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                maxRequestBodySizeFeature.MaxRequestBodySize = requestSizeLimitAttribute.Bytes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.UseMultiTenancy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyRequestSizeLimitAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> Bytes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequestSizeLimitAttribute</span>(<span class="params"><span class="keyword">long</span> bytes</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">Route(<span class="meta-string">"upload"</span>)</span>]</span><br><span class="line">[<span class="meta">MyRequestSizeLimit(20)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">UploadAsync</span>(<span class="params">IFormFile formFile</span>)</span></span><br></pre></td></tr></table></figure></p><p>使用 MyRequestSizeLimit 後，HttpContext.Features.MaxRequestBodySize 的值，就是 MyRequestSizeLimit 設定值。</p><h3 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h3><p><a href="https://github.com/abpframework/abp/issues/12336" target="_blank" rel="noopener">RequestSizeLimit attribute not working</a><br><a href="https://rainmakerho.github.io/2022/04/22/aspnetcore-request-entity-too-large/">ASP.NET Core File Upload Size Limit</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2022/04/22/aspnetcore-request
      
    
    </summary>
    
    
      <category term="RequestSizeLimit" scheme="https://rainmakerho.github.io/tags/RequestSizeLimit/"/>
    
      <category term="Abp Framework" scheme="https://rainmakerho.github.io/tags/Abp-Framework/"/>
    
      <category term="HttpContext.Features.MaxRequestBodySize" scheme="https://rainmakerho.github.io/tags/HttpContext-Features-MaxRequestBodySize/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core File Upload Size Limit</title>
    <link href="https://rainmakerho.github.io/2022/04/22/aspnetcore-request-entity-too-large/"/>
    <id>https://rainmakerho.github.io/2022/04/22/aspnetcore-request-entity-too-large/</id>
    <published>2022-04-22T14:55:39.000Z</published>
    <updated>2022-04-22T15:33:47.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大部份的系統都有上傳檔案功能，當上傳檔案超過預設的大小時，系統就會發出 too large 的錯誤，如下，</p><blockquote><p>IIS 10.0 Detailed Error - 413.1 - Request Entity Too Large 要求篩選模組設定為拒絕超過要求內容長度的要求</p></blockquote><blockquote><p>Failed to read the request form. Request body too large. The max request body size is 30000000 bytes.</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>1.先建立 ASP.NET Core WebAPI 專案，並建立測試的 File Upload Controller，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"Upload"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">UploadAsync</span>(<span class="params">IFormFile formFile</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> size = formFile.Length;</span><br><span class="line"><span class="keyword">return</span> Ok(<span class="keyword">new</span> &#123; count = <span class="number">1</span>, size &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"Upload2"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Upload2Async</span>(<span class="params">IFormFile formFile</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> size = formFile.Length;</span><br><span class="line"><span class="keyword">return</span> Ok(<span class="keyword">new</span> &#123; count = <span class="number">1</span>, size &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就可以透過 Postman 上測試上傳檔案<br><img src="/2022/04/22/aspnetcore-request-entity-too-large/05.png" title="Postman"></p><h4 id="IIS-上的解法"><a href="#IIS-上的解法" class="headerlink" title="IIS 上的解法"></a>IIS 上的解法</h4><p>當部署在 IIS 上面時，Client 發出 Request 時，會先到 IIS 才會再交給 我們的程式，<br>所以如果檔案超過 <strong>30,000,000 bytes</strong> 時，就會噴 <strong>IIS 10.0 Detailed Error - 413.1 - Request Entity Too Large 要求篩選模組設定為拒絕超過要求內容長度的要求</strong> 的錯誤，並要求在 web.config 設定 maxAllowedContentLength 的值，如下，<br><img src="/2022/04/22/aspnetcore-request-entity-too-large/01.png" title="413.1 - Request Entity Too Large"></p><p>所以這時，就需要在 web.config 設定 maxAllowedContentLength，例如設定最大為 60MB，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">requestFiltering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">requestLimits</span> <span class="attr">maxAllowedContentLength</span>=<span class="string">"62914560"</span>&gt;</span><span class="tag">&lt;/<span class="name">requestLimits</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">requestFiltering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="Kestrel-上的解法"><a href="#Kestrel-上的解法" class="headerlink" title="Kestrel 上的解法"></a>Kestrel 上的解法</h4><p>因為 Kestrel 不會去看 web.config ，所以要在程式中設定它，如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//program.cs</span></span><br><span class="line">builder.WebHost.ConfigureKestrel(serverOptions =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    serverOptions.Limits.MaxRequestBodySize = <span class="number">60</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>註: 以上是針對整個系統設定，所以在 Upload 的 Action 設定中斷點，查看 <strong>HttpContext.Features.MaxRequestBodySize</strong> 它的值就是 62914560，如下，<br><img src="/2022/04/22/aspnetcore-request-entity-too-large/02.png" title="HttpContext.Features.MaxRequestBodySize"></p><h4 id="Action-微調"><a href="#Action-微調" class="headerlink" title="Action 微調"></a>Action 微調</h4><p>如果要針對某個 Class or Action 設定不同於全域的檔案大小，則可以透過 <strong>RequestSizeLimit</strong> 屬性來設定，<br>例如在 UploadAsync 及 Upload2Async 分別設定 RequestSizeLimit 為 2,222 及 3,333 ，<br><strong>HttpContext.Features.MaxRequestBodySize</strong> 也會為 2,222 及 3,333<br><img src="/2022/04/22/aspnetcore-request-entity-too-large/03.png" title="UploadAsync"></p><img src="/2022/04/22/aspnetcore-request-entity-too-large/04.png" title="Upload2Async"><ul><li>註: 如果是在 IIS 的話，如果上傳的檔案大於 30000000 bytes，一定要設定 Web.config。其他 Action 如果要縮小 Size ，就再設定 <strong>RequestSizeLimit</strong> 屬性<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads" target="_blank" rel="noopener">Upload files in ASP.NET Core</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大部份的系統都有上傳檔案功能，當上傳檔案超過預設的大小時，系統就會發出 too large 的錯誤，如下，&lt;/p&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="https://rainmakerho.github.io/tags/ASP-NET-Core/"/>
    
      <category term="Upload" scheme="https://rainmakerho.github.io/tags/Upload/"/>
    
      <category term="File" scheme="https://rainmakerho.github.io/tags/File/"/>
    
      <category term="MaxRequestBodySize" scheme="https://rainmakerho.github.io/tags/MaxRequestBodySize/"/>
    
      <category term="Request Entity Too Large" scheme="https://rainmakerho.github.io/tags/Request-Entity-Too-Large/"/>
    
      <category term="Request body too large" scheme="https://rainmakerho.github.io/tags/Request-body-too-large/"/>
    
      <category term="requestLimits" scheme="https://rainmakerho.github.io/tags/requestLimits/"/>
    
      <category term="maxAllowedContentLength" scheme="https://rainmakerho.github.io/tags/maxAllowedContentLength/"/>
    
  </entry>
  
  <entry>
    <title>for loop 讀取字串中的字，有些字會是「亂碼」? Surrogate pair</title>
    <link href="https://rainmakerho.github.io/2022/04/06/unicode-surrogate-pair/"/>
    <id>https://rainmakerho.github.io/2022/04/06/unicode-surrogate-pair/</id>
    <published>2022-04-06T06:03:10.000Z</published>
    <updated>2022-04-06T11:45:20.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同事開會時，提到一個 unicode 的問題，<br>而 unicode 的問題，大多是 Big5 編碼時才會遇到，例如「堃」這個字。<br>當使用 utf8 編碼後，常常遇到的問題，大多是「自造字」(EUDC)的問題。<br>同事給的字是 「善」 這個字，但它卻跟一般的 「善」 不同。<br>「善」 vs 「善」 差在那裡呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>如果把 「善」 vs 「善」 貼到 Notepad (Windows 10 繁體中文版)中，會發現，前面的 善 變成了一個”白方框”，如下，<br><img src="/2022/04/06/unicode-surrogate-pair/01.png" title="unicode-Surrogate-pair"></p><p>直覺來看，應該是「自造字」，但以 Chrome Browser 來開啟它，卻又可以正常顯示，這就表示它 <strong>不是</strong>「自造字」(EUDC)。<br>所以可以從 <a href="https://unicode-table.com/" target="_blank" rel="noopener">unicode-table.com</a> 來查詢，<br>一般 「善」 這個字則是 CJK， escape 出來內容是 <strong>%u5584</strong><br><img src="/2022/04/06/unicode-surrogate-pair/03.png" title="U+5584"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>(<span class="string">'善'</span>); </span><br><span class="line"><span class="comment">// %u5584</span></span><br></pre></td></tr></table></figure></p><p>而有問題的 「善」 這個字是 <strong>CJK Compatibility Ideograph-2F846</strong> ,<br>escape 出來卻是 <strong>%uD87E%uDC46</strong><br><img src="/2022/04/06/unicode-surrogate-pair/02.png" title="U+2F846"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>(<span class="string">'善'</span>); </span><br><span class="line"><span class="comment">// %uD87E%uDC46</span></span><br></pre></td></tr></table></figure></p><p>它在 <a href="https://unicode-table.com/" target="_blank" rel="noopener">unicode-table.com</a> 可以找到，所以它是 <strong>unicode</strong>，<br>從 <strong>%uD87E%uDC46</strong> 來看，別人只有一個 code unit，它卻有 <strong>2個</strong>。<br>所以它是 <strong>Surrogate pair</strong> </p><blockquote><p>Surrogate pair is a representation for a single abstract character that consists of a sequence of code units of two 16-bit code units, where the first value of the pair is a high-surrogate code unit and the second value is a low-surrogate code unit.</p></blockquote><p>Surrogate pair(High-surrogate: 0xD800 ~ 0xDBFF, Low-surrogate: 0xDC00 ~ 0xDFFF) ，<br>大多用在 emoji (表情符號)及擴充字，這個 「善」 就是 CJK 擴充字。</p><p>那回過頭來，Surrogate pair 會有什麼問題呢?<br>就是透過 for loop 處理字串時，它會變<strong>亂碼</strong>，</p><h4 id="JavaScript-處理"><a href="#JavaScript-處理" class="headerlink" title="JavaScript 處理"></a>JavaScript 處理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a善b善c善d'</span>; <span class="comment">//length:9</span></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"for-loop charAt"</span>, str.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/04/06/unicode-surrogate-pair/04.png" title="js亂碼"><p>那要怎麼辦才能取到正常的字呢?<br>判斷如果是 High-surrogate 就取下一個 code unit，再判斷是否為 Low-surrogate，是則一次取2個 code unit，如下，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSymbols</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> length = string.length;</span><br><span class="line">    <span class="keyword">var</span> output = [];</span><br><span class="line">    <span class="keyword">for</span> (; index &lt; length; ++index) &#123;</span><br><span class="line">        <span class="keyword">var</span> charCode = string.charCodeAt(index);</span><br><span class="line">        <span class="keyword">if</span> (charCode &gt;= <span class="number">0xD800</span> &amp;&amp; charCode &lt;= <span class="number">0xDBFF</span>) &#123;</span><br><span class="line">            charCode = string.charCodeAt(index + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (charCode &gt;= <span class="number">0xDC00</span> &amp;&amp; charCode &lt;= <span class="number">0xDFFF</span>) &#123;</span><br><span class="line">                output.push(string.slice(index, index + <span class="number">2</span>));</span><br><span class="line">                ++index;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output.push(string.charAt(index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'a善b善c善d'</span>;</span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">var</span> strAry2 = getSymbols(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strAry2.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getSymbols:"</span>, strAry2[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2022/04/06/unicode-surrogate-pair/06.png" title="getSymbols"><p>如果ES6直接使用 Array.from 就行了，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strAry = <span class="built_in">Array</span>.from(str); <span class="comment">//strAry length:7</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strAry.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Array.from"</span>, strAry[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2022/04/06/unicode-surrogate-pair/05.png" title="Array.from"><ul><li>註: Most JavaScript engines use UTF-16 encoding</li></ul><h4 id="NET-處理"><a href="#NET-處理" class="headerlink" title=".NET 處理"></a>.NET 處理</h4><p>如果直接 for each 也是會變亂碼，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"a善b善c善d"</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">char</span> c <span class="keyword">in</span> str)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"foreach char:<span class="subst">&#123;c&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2022/04/06/unicode-surrogate-pair/07.png" title="CSharp foreach"><p>所以也是要判斷是否為 Surrogate pair，可利用 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char.issurrogatepair" target="_blank" rel="noopener">Char.IsSurrogatePair</a> + <a href="https://docs.microsoft.com/en-us/dotnet/api/system.char.converttoutf32" target="_blank" rel="noopener">Char.ConvertToUtf32</a> ，如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"a善b善c善d"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Length; i += Char.IsSurrogatePair(str, i) ? <span class="number">2</span> : <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = Char.ConvertToUtf32(str, i);</span><br><span class="line">    <span class="keyword">var</span> chrStr = Char.ConvertFromUtf32(x);</span><br><span class="line">    Console.WriteLine(<span class="string">"U+&#123;0:X4&#125; &#123;1&#125; at &#123;2&#125;"</span>, x, chrStr, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2022/04/06/unicode-surrogate-pair/08.png" title="Char.IsSurrogatePair"><p>所以 for-loop 處理字串時，要檢查是否會有 Surrogate Pair 的狀況。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://dmitripavlutin.com/what-every-javascript-developer-should-know-about-unicode/" target="_blank" rel="noopener">What every JavaScript developer should know about Unicode</a><br><a href="https://mathiasbynens.be/notes/javascript-unicode" target="_blank" rel="noopener">JavaScript has a Unicode problem</a><br><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" target="_blank" rel="noopener">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a><br><a href="https://www.lighttag.io/blog/unicode-surrogate-pairs/" target="_blank" rel="noopener">Javascript String Offsets And Unicode Surrogate Pairs</a><br><a href="https://www.unicodepedia.com/groups/cjk-compatibility-ideographs-supplement/" target="_blank" rel="noopener">CJK Compatibility Ideographs Supplement</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同事開會時，提到一個 unicode 的問題，&lt;br&gt;而 unicode 的問題，大多是 Big5 編碼時才會遇到，例如「堃」這個字。&lt;
      
    
    </summary>
    
    
      <category term="自造字" scheme="https://rainmakerho.github.io/tags/%E8%87%AA%E9%80%A0%E5%AD%97/"/>
    
      <category term="unicode" scheme="https://rainmakerho.github.io/tags/unicode/"/>
    
      <category term="Surrogate pair" scheme="https://rainmakerho.github.io/tags/Surrogate-pair/"/>
    
      <category term="CJK Compatibility" scheme="https://rainmakerho.github.io/tags/CJK-Compatibility/"/>
    
      <category term="難字" scheme="https://rainmakerho.github.io/tags/%E9%9B%A3%E5%AD%97/"/>
    
      <category term="Char.IsSurrogatePair" scheme="https://rainmakerho.github.io/tags/Char-IsSurrogatePair/"/>
    
      <category term="Char.ConvertToUtf32" scheme="https://rainmakerho.github.io/tags/Char-ConvertToUtf32/"/>
    
  </entry>
  
  <entry>
    <title>azure nodejs webapp The page cannot be displayed because an internal server error has occurred.</title>
    <link href="https://rainmakerho.github.io/2022/03/29/azure-webapp-nodejs-internal-server-error/"/>
    <id>https://rainmakerho.github.io/2022/03/29/azure-webapp-nodejs-internal-server-error/</id>
    <published>2022-03-29T01:40:25.000Z</published>
    <updated>2022-03-29T02:49:53.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近將 NodeJS 的程式部署到 Azrue WebApp (windows) 之後，<br>去瀏覽網頁一看，居然顯示以下的錯誤，</p><blockquote><p>The page cannot be displayed because an internal server error has occurred.</p></blockquote><p>原本發生錯誤會寫到 iisnode 目錄之中的 log 也沒有寫，<br>透過 <strong>App Service Editor</strong> 查看 WebApp 的 Output 也都沒有任何東西。</p><h3 id="研究與解決"><a href="#研究與解決" class="headerlink" title="研究與解決"></a>研究與解決</h3><p>原本沒問題的，現在有問題，那應該是有什麼異動吧。<br>所以就先檢查 WebApp 的 Configuration 中的 <strong>WEBSITE_NODE_DEFAULT_VERSION</strong> 版本是否有在現在 Azure 所 Support 的 Node Runtime 之中。</p><blockquote><p>可以連到 https://[你的webapp名稱].scm.azurewebsites.net/api/diagnostics/runtime 查看，</p></blockquote><p>我將設定值改成 12.15.0 ，再執行還是一樣的錯誤。<br>再來就是測試一下 web.config ，於是拿 <a href="https://github.com/rainmakerho/offline_dl/blob/master/web.config" target="_blank" rel="noopener">沒問題的web.config</a> 更新上去，<br>再執行程式，居然好了。 那問題就是出在 web.config 上面。</p><p>最後發現是因為 web.config 中，在 rewrite 區段中，有加入 <strong>allowedServerVariables</strong> 的區段，導致 WebApp 直接錯誤。<br>原本的 web.config 如下，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpCookies</span> <span class="attr">httpOnlyCookies</span>=<span class="string">"true"</span> <span class="attr">requireSSL</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">webSocket</span> <span class="attr">enabled</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"Strict-Transport-Security"</span> <span class="attr">value</span>=<span class="string">"max-age=31536000; includeSubDomains"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"nodejs"</span> <span class="attr">path</span>=<span class="string">"*.js"</span> <span class="attr">verb</span>=<span class="string">"*"</span> <span class="attr">modules</span>=<span class="string">"iisnode"</span> <span class="attr">resourceType</span>=<span class="string">"File"</span> <span class="attr">requireAccess</span>=<span class="string">"Script"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">allowedServerVariables</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                    ● 此設定是用來解決在iisnode上URL Encode的問題</span></span><br><span class="line"><span class="comment">                    ● 另外，需要ApplicationHost.config的將allowedServerVariables的overrideModeDefault改成Allow</span></span><br><span class="line"><span class="comment">                    ● 詳細設定請參考下面連結</span></span><br><span class="line"><span class="comment">                    [github issue: https://github.com/tjanczuk/iisnode/issues/217]</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"HTTP_X_ORIGINAL_URL"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"UNENCODED_URL"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                    ● 此設定是用來解決在 iisnode 上 Firefox Websocket 問題</span></span><br><span class="line"><span class="comment">                    ● 詳細設定請參考下面連結</span></span><br><span class="line"><span class="comment">                    [github issue: https://github.com/tjanczuk/iisnode/issues/497]</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"HTTP_CONNECTION"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">allowedServerVariables</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"/*"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Rewrite"</span> <span class="attr">url</span>=<span class="string">"index.js"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">"Firefox_Websocket"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">"stream"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">"Rewrite"</span> <span class="attr">url</span>=<span class="string">"index.js"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">conditions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTP_CONNECTION&#125;"</span> <span class="attr">pattern</span>=<span class="string">"keep-alive, Upgrade"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">"&#123;HTTP_UPGRADE&#125;"</span> <span class="attr">pattern</span>=<span class="string">"websocket"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">serverVariables</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"HTTP_CONNECTION"</span> <span class="attr">value</span>=<span class="string">"Upgrade"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">serverVariables</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (node_env: "development" (開發), "production" (產品)) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iisnode</span> <span class="attr">node_env</span>=<span class="string">"PRODUCTION"</span> <span class="attr">nodeProcessCountPerApplication</span>=<span class="string">"1"</span> <span class="attr">maxConcurrentRequestsPerProcess</span>=<span class="string">"1024"</span> <span class="attr">maxNamedPipeConnectionRetry</span>=<span class="string">"100"</span> <span class="attr">namedPipeConnectionRetryDelay</span>=<span class="string">"250"</span> <span class="attr">maxNamedPipeConnectionPoolSize</span>=<span class="string">"512"</span> <span class="attr">maxNamedPipePooledConnectionAge</span>=<span class="string">"30000"</span> <span class="attr">asyncCompletionThreadCount</span>=<span class="string">"0"</span> <span class="attr">initialRequestBufferSize</span>=<span class="string">"4096"</span> <span class="attr">maxRequestBufferSize</span>=<span class="string">"65536"</span> <span class="attr">uncFileChangesPollingInterval</span>=<span class="string">"5000"</span> <span class="attr">gracefulShutdownTimeout</span>=<span class="string">"60000"</span> <span class="attr">loggingEnabled</span>=<span class="string">"true"</span> <span class="attr">logDirectory</span>=<span class="string">"iisnode"</span> <span class="attr">debuggingEnabled</span>=<span class="string">"true"</span> <span class="attr">debugHeaderEnabled</span>=<span class="string">"false"</span> <span class="attr">debuggerPortRange</span>=<span class="string">"5058-6058"</span> <span class="attr">debuggerPathSegment</span>=<span class="string">"debug"</span> <span class="attr">maxLogFileSizeInKB</span>=<span class="string">"128"</span> <span class="attr">maxTotalLogFileSizeInKB</span>=<span class="string">"1024"</span> <span class="attr">maxLogFiles</span>=<span class="string">"20"</span> <span class="attr">devErrorsEnabled</span>=<span class="string">"true"</span> <span class="attr">flushResponse</span>=<span class="string">"false"</span> <span class="attr">enableXFF</span>=<span class="string">"false"</span> <span class="attr">promoteServerVars</span>=<span class="string">""</span> <span class="attr">configOverrides</span>=<span class="string">"iisnode.yml"</span> <span class="attr">watchedFiles</span>=<span class="string">"web.config;*.js"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>目前就先將該區段移除 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近將 NodeJS 的程式部署到 Azrue WebApp (windows) 之後，&lt;br&gt;去瀏覽網頁一看，居然顯示以下的錯誤，&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="node" scheme="https://rainmakerho.github.io/tags/node/"/>
    
      <category term="iisnode" scheme="https://rainmakerho.github.io/tags/iisnode/"/>
    
      <category term="nodejs" scheme="https://rainmakerho.github.io/tags/nodejs/"/>
    
      <category term="windows" scheme="https://rainmakerho.github.io/tags/windows/"/>
    
      <category term="azure" scheme="https://rainmakerho.github.io/tags/azure/"/>
    
      <category term="webapp" scheme="https://rainmakerho.github.io/tags/webapp/"/>
    
      <category term="internal server error" scheme="https://rainmakerho.github.io/tags/internal-server-error/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Visual Studio 無法將憑證新增至受信任的根憑證存放區 - 無法信任憑證</title>
    <link href="https://rainmakerho.github.io/2022/03/22/visual-studio-adding-certificate-to-trusted-root-failed/"/>
    <id>https://rainmakerho.github.io/2022/03/22/visual-studio-adding-certificate-to-trusted-root-failed/</id>
    <published>2022-03-22T14:35:35.000Z</published>
    <updated>2022-03-22T15:24:52.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>今天開啟 Visual Studio Web 專案執行時，先是提示「要信任 ASP.NET Core SSL 憑證嗎?」，按下「是」後，卻噴「無法信任憑證」的錯誤，<br><img src="/2022/03/22/visual-studio-adding-certificate-to-trusted-root-failed/01.png" title="要信任 ASP.NET Core SSL 憑證嗎?"></p><img src="/2022/03/22/visual-studio-adding-certificate-to-trusted-root-failed/02.png" title="無法將憑證新增至受信任的根憑證存放區"><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>開啟「管理電腦憑證」，在<strong>憑證-本機電腦</strong>的 <strong>個人/憑證</strong> 中有一個 <strong>localhost</strong> 的憑證，查看它的詳細資料中憑證指紋與Browser的並不相同。</p><blockquote><p>註:如果 Browser 查看憑證內容中的 憑證指紋與 個人/憑證 中有的 <strong>localhost</strong> 相同，則可以將它移到 <strong>受信任的根憑證授權單位/憑證</strong> 之中。</p></blockquote><p>所以參考 <a href="https://docs.microsoft.com/en-us/dotnet/core/additional-tools/self-signed-certificates-guide" target="_blank" rel="noopener">Generate self-signed certificates with the .NET CLI</a> 重新建立一個 ASP.NET Core 的自簽憑證，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dotnet dev-certs https -ep $env:USERPROFILE\.aspnet\https\aspnetapp.pfx -p 你的憑證pwd</span><br></pre></td></tr></table></figure><p>並將它放到 <strong>受信任的根憑證授權單位/憑證</strong> 之中，</p><img src="/2022/03/22/visual-studio-adding-certificate-to-trusted-root-failed/03.png" title="受信任的根憑證授權單位/憑證"><p>再重新開啟 Visual Studio Web 專案，執行 Debug 就正常了。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://stackoverflow.com/questions/47413183/visual-studio-2017-gives-adding-the-certificate-to-the-trusted-root-certificate" target="_blank" rel="noopener">Visual Studio 2017 gives ‘Adding the Certificate to The Trusted Root Certificates store failed with the following Errror’</a><br><a href="https://docs.microsoft.com/en-us/dotnet/core/additional-tools/self-signed-certificates-guide" target="_blank" rel="noopener">Generate self-signed certificates with the .NET CLI</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;今天開啟 Visual Studio Web 專案執行時，先是提示「要信任 ASP.NET Core SSL 憑證嗎?」，按下「是」後，卻噴
      
    
    </summary>
    
    
      <category term="Microsoft Visual Studio" scheme="https://rainmakerho.github.io/tags/Microsoft-Visual-Studio/"/>
    
      <category term="無法將憑證新增至受信任的根憑證存放區" scheme="https://rainmakerho.github.io/tags/%E7%84%A1%E6%B3%95%E5%B0%87%E6%86%91%E8%AD%89%E6%96%B0%E5%A2%9E%E8%87%B3%E5%8F%97%E4%BF%A1%E4%BB%BB%E7%9A%84%E6%A0%B9%E6%86%91%E8%AD%89%E5%AD%98%E6%94%BE%E5%8D%80/"/>
    
      <category term="Adding the certificate to the Trusted Root Certificates store failed with the following error" scheme="https://rainmakerho.github.io/tags/Adding-the-certificate-to-the-Trusted-Root-Certificates-store-failed-with-the-following-error/"/>
    
      <category term="Access is denied" scheme="https://rainmakerho.github.io/tags/Access-is-denied/"/>
    
      <category term="無法信任憑證" scheme="https://rainmakerho.github.io/tags/%E7%84%A1%E6%B3%95%E4%BF%A1%E4%BB%BB%E6%86%91%E8%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>DataTable 透過 DataView 來做 Distinct 會很慢</title>
    <link href="https://rainmakerho.github.io/2022/03/15/datatable-distinct-dataview-slow/"/>
    <id>https://rainmakerho.github.io/2022/03/15/datatable-distinct-dataview-slow/</id>
    <published>2022-03-15T09:59:01.000Z</published>
    <updated>2022-03-22T01:05:24.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一般要將 DataTable 重覆的資料，可以透過 DataView 的 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.dataview.totable" target="_blank" rel="noopener"><code>ToTable</code> Method</a> 中的 <strong>distinct</strong> 參數設定為 true ，就可以回傳 Distinct 過的 DataTable。例如，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataView dv1 = <span class="keyword">new</span> DataView(dt);</span><br><span class="line">DataTable dtNew1 = dv1.ToTable(<span class="literal">true</span>, <span class="string">"Id"</span>, <span class="string">"Name"</span>, <span class="string">"Role"</span>, <span class="string">"DataColumn1"</span>, <span class="string">"DataColumn2"</span>, <span class="string">"DataColumn3"</span>, <span class="string">"DataColumn4"</span>, <span class="string">"DataColumn5"</span>, <span class="string">"DataColumn6"</span>, <span class="string">"DataColumn7"</span>);</span><br></pre></td></tr></table></figure></p><p>但如果資料多時，就會很慢很慢。 那怎麼辦呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>我們可以參考 <a href="http://dotnetstep.blogspot.com/2013/11/dataview-totable-vs-linq-to-find.html" target="_blank" rel="noopener">DataView ToTable Vs Linq to find distinct</a> ，改用 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinct" target="_blank" rel="noopener">Linq 的 Distinct Method</a><br>測試資料及結果如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> System.Diagnostics.Stopwatch watch = <span class="keyword">new</span> System.Diagnostics.Stopwatch();</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> totalRows = <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line">        DataTable dtSample = GenerateTable(totalRows, <span class="number">80000</span>);</span><br><span class="line">        Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Total Count:&#123;0:n0&#125;"</span>, totalRows));</span><br><span class="line">        <span class="keyword">var</span> withoutDataView = NormalDataSetWithOutDataView(dtSample);</span><br><span class="line">        Console.WriteLine(<span class="string">"========== Distinc Without DataView ========"</span>);</span><br><span class="line">        Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Row Count:&#123;0:n0&#125;, Time Spend:&#123;1:n0&#125; Milliseconds"</span>, withoutDataView.Item1, withoutDataView.Item2));</span><br><span class="line">        <span class="keyword">var</span> withoutDataViewGroupBy = NormalDataSetWithOutDataViewGroupBy(dtSample);</span><br><span class="line">        Console.WriteLine(<span class="string">"========== Distinc Without DataView Use Group By ========"</span>);</span><br><span class="line">        Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Row Count:&#123;0:n0&#125;, Time Spend:&#123;1:n0&#125; Milliseconds"</span>, withoutDataViewGroupBy.Item1, withoutDataViewGroupBy.Item2));</span><br><span class="line">        <span class="keyword">var</span> withDataView = NormalDataSetWithDataView(dtSample);</span><br><span class="line">        Console.WriteLine(<span class="string">"========== Distinc With DataView ========"</span>);</span><br><span class="line">        Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Row Count:&#123;0:n0&#125;, Time Spend:&#123;1:n0&#125; Milliseconds"</span>, withDataView.Item1, withDataView.Item2));</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt; <span class="title">NormalDataSetWithDataView</span>(<span class="params">DataTable dt</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StopWatchEnable(watch, <span class="literal">true</span>);</span><br><span class="line">        DataView dv1 = <span class="keyword">new</span> DataView(dt);</span><br><span class="line">        DataTable dtNew1 = dv1.ToTable(<span class="literal">true</span>, <span class="string">"Id"</span>, <span class="string">"Name"</span>, <span class="string">"Role"</span>, <span class="string">"DataColumn1"</span>, <span class="string">"DataColumn2"</span>, <span class="string">"DataColumn3"</span>, <span class="string">"DataColumn4"</span>, <span class="string">"DataColumn5"</span>, <span class="string">"DataColumn6"</span>, <span class="string">"DataColumn7"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt;(dtNew1.Rows.Count, StopWatchEnable(watch, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt; <span class="title">NormalDataSetWithOutDataView</span>(<span class="params">DataTable dt</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StopWatchEnable(watch, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> items = dt.AsEnumerable().Distinct(System.Data.DataRowComparer.Default).ToList();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt;(items.Count, StopWatchEnable(watch, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt; <span class="title">NormalDataSetWithOutDataViewGroupBy</span>(<span class="params">DataTable dt</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StopWatchEnable(watch, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> items = dt.AsEnumerable()</span><br><span class="line">                        .GroupBy(d =&gt; <span class="keyword">string</span>.Join(<span class="string">","</span>, d.ItemArray))</span><br><span class="line">                        .Select(d =&gt; d.First())</span><br><span class="line">                        .ToList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt;(items.Count, StopWatchEnable(watch, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataTable <span class="title">GenerateTable</span>(<span class="params"><span class="keyword">int</span> noOfRows, <span class="keyword">int</span> modules</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">        dt.Columns.Add(<span class="string">"Id"</span>, <span class="keyword">typeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"Name"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"Role"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn1"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn2"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn3"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn4"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn5"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn6"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">"DataColumn7"</span>, <span class="keyword">typeof</span>(<span class="keyword">string</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; noOfRows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id = i % modules;</span><br><span class="line">            dt.Rows.Add(<span class="keyword">new</span> <span class="keyword">object</span>[]</span><br><span class="line">                          &#123; id,</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString(),</span><br><span class="line">                                <span class="string">"Test"</span> + id.ToString() &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">StopWatchEnable</span>(<span class="params">System.Diagnostics.Stopwatch watch, <span class="keyword">bool</span> enable</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (enable)</span><br><span class="line">        &#123;</span><br><span class="line">            watch.Restart();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            watch.Stop();</span><br><span class="line">            <span class="keyword">return</span> watch.ElapsedMilliseconds;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下測試環境為  i7-8569U CPU @ 2.80GHz, 16G RAM, SSD<br>資料筆數為 100,000<br>資料欄位為 10<br>分別使用 <code>AsEnumerable().Distinct</code> , <code>AsEnumerable().GroupBy</code> 及 <code>DataView.ToTable(true,...</code> ，結果如下，<br><img src="/2022/03/15/datatable-distinct-dataview-slow/01.png" title="Distinct Comparison"></p><p>可以發現，使用 DataView.ToTable 真的粉慢</p><ul><li>註: 如果要將 IEnumerable<datarow> 轉成 DataTable ，可以使用 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datatableextensions.copytodatatable" target="_blank" rel="noopener">CopyToDataTable<datarow>()</datarow></a> 這個 Extension Method哦! 例如上述範例，可以改成</datarow></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt; <span class="title">NormalDataSetWithOutDataView</span>(<span class="params">DataTable dt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StopWatchEnable(watch, <span class="literal">true</span>);</span><br><span class="line">    DataTable dtNew1 =  dt.AsEnumerable().Distinct(DataRowComparer.Default).CopyToDataTable&lt;DataRow&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;<span class="keyword">int</span>, <span class="keyword">long</span>&gt;(dtNew1.Rows.Count, StopWatchEnable(watch, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://dotnetstep.blogspot.com/2013/11/dataview-totable-vs-linq-to-find.html" target="_blank" rel="noopener">DataView ToTable Vs Linq to find distinct</a><br><a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datatableextensions.copytodatatable" target="_blank" rel="noopener">CopyToDataTable<datarow>()</datarow></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一般要將 DataTable 重覆的資料，可以透過 DataView 的 &lt;a href=&quot;https://docs.microsoft.c
      
    
    </summary>
    
    
      <category term="DataTable" scheme="https://rainmakerho.github.io/tags/DataTable/"/>
    
      <category term="Slow" scheme="https://rainmakerho.github.io/tags/Slow/"/>
    
      <category term="Distinct" scheme="https://rainmakerho.github.io/tags/Distinct/"/>
    
      <category term="DataView" scheme="https://rainmakerho.github.io/tags/DataView/"/>
    
      <category term="DataTable.AsEnumerable" scheme="https://rainmakerho.github.io/tags/DataTable-AsEnumerable/"/>
    
      <category term="Linq" scheme="https://rainmakerho.github.io/tags/Linq/"/>
    
      <category term="CopyToDataTable" scheme="https://rainmakerho.github.io/tags/CopyToDataTable/"/>
    
  </entry>
  
  <entry>
    <title>.NET 從附檔名取得 ContentType (MIME Type)</title>
    <link href="https://rainmakerho.github.io/2022/03/11/get-contenttype-from-file-extensions/"/>
    <id>https://rainmakerho.github.io/2022/03/11/get-contenttype-from-file-extensions/</id>
    <published>2022-03-11T13:06:23.000Z</published>
    <updated>2022-03-11T14:16:13.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 .NET Framework 4.5(+)要取得 File 的 MIME type 可以透過 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mimemapping.getmimemapping?view=netframework-4.8" target="_blank" rel="noopener">MimeMapping.GetMimeMapping(String) Method</a><br>那在 .NET Core 要用什麼方法呢?</p><h3 id="NET-Core-解法"><a href="#NET-Core-解法" class="headerlink" title=".NET Core 解法"></a>.NET Core 解法</h3><p>在 .NET Core 可以使用 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.staticfiles.fileextensioncontenttypeprovider" target="_blank" rel="noopener">FileExtensionContentTypeProvider</a>，如下</p><p>在 Services 註冊為 FileExtensionContentTypeProvider 為 Singleton<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">builder.Services.AddSingleton&lt;FileExtensionContentTypeProvider&gt;();</span><br></pre></td></tr></table></figure></p><p>在API Controller 建構子中注入，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="meta-string">"api/[controller]"</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilesController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FileExtensionContentTypeProvider _fileExtensionContentTypeProvider;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilesController</span>(<span class="params">FileExtensionContentTypeProvider fileExtensionContentTypeProvider</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _fileExtensionContentTypeProvider = fileExtensionContentTypeProvider</span><br><span class="line">            ?? <span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentNullException(</span><br><span class="line">                <span class="keyword">nameof</span>(fileExtensionContentTypeProvider));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="meta-string">"&#123;fileId&#125;"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">GetFile</span>(<span class="params"><span class="keyword">string</span> fileId</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">string</span> DefaultContentType = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">        <span class="keyword">var</span> pathToFile = <span class="string">"rmfer.pdf"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!System.IO.File.Exists(pathToFile))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NotFound();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!_fileExtensionContentTypeProvider.TryGetContentType(</span><br><span class="line">            pathToFile, <span class="keyword">out</span> <span class="keyword">var</span> contentType))</span><br><span class="line">        &#123;</span><br><span class="line">            contentType = DefaultContentType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes = System.IO.File.ReadAllBytes(pathToFile);</span><br><span class="line">        <span class="keyword">return</span> File(bytes, contentType, Path.GetFileName(pathToFile));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/1612767/file-extensions-and-mime-types-in-net" target="_blank" rel="noopener">File extensions and MIME Types in .NET</a><br><a href="https://harrybellamy.com/posts/getting-mime-types-from-file-extensions-in-net-core/" target="_blank" rel="noopener">Getting MIME Types from File Extensions in .Net Core</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 .NET Framework 4.5(+)要取得 File 的 MIME type 可以透過 &lt;a href=&quot;https://docs
      
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://rainmakerho.github.io/tags/NET-Core/"/>
    
      <category term="File" scheme="https://rainmakerho.github.io/tags/File/"/>
    
      <category term="MIME" scheme="https://rainmakerho.github.io/tags/MIME/"/>
    
      <category term="ContentType" scheme="https://rainmakerho.github.io/tags/ContentType/"/>
    
      <category term="Download" scheme="https://rainmakerho.github.io/tags/Download/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Resource Owner Password Credentials (ROPC)</title>
    <link href="https://rainmakerho.github.io/2022/03/03/oauth2-ropc/"/>
    <id>https://rainmakerho.github.io/2022/03/03/oauth2-ropc/</id>
    <published>2022-03-03T04:38:44.000Z</published>
    <updated>2022-03-03T06:01:32.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在一些比較舊或是獨立的系統，常常會使用到 Resource Owner Password Credentials (ROPC) 的方式來取得 access token。<br>就是使用者在 Client Application 功能輸入帳/密後，再由 Client Application 將使用者的帳/密 Post 到 Authorization Server 來取回 access token。<br>這樣帳/密不就被 Client Application 取得了嗎!!!</p><h3 id="OAuth-2-0-Resource-Owner-Password-Credentials-ROPC"><a href="#OAuth-2-0-Resource-Owner-Password-Credentials-ROPC" class="headerlink" title="OAuth 2.0 - Resource Owner Password Credentials (ROPC)"></a>OAuth 2.0 - Resource Owner Password Credentials (ROPC)</h3><p>以下以 IdentityServer4 的方式來說明<br>1.在 IdentityServer4 中註冊使用 ROPC 的 Client<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Client</span><br><span class="line">&#123;</span><br><span class="line">    ClientId = <span class="string">"ropcclient"</span>,</span><br><span class="line">    ClientName = <span class="string">"Resource Owner Password Credentials (ROPC) OAuth Client"</span>,</span><br><span class="line">    AllowedScopes = &#123; <span class="string">"tid_api.full"</span>, <span class="string">"tid_api.read"</span> &#125;,</span><br><span class="line">    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,</span><br><span class="line">    ClientSecrets = &#123;</span><br><span class="line">        <span class="keyword">new</span> Secret(<span class="string">"ropcsecret"</span>.Sha256())</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.Post 帳/密資訊給 IdentityServer 的 token ，grant_type 為 password ，取回 access token，並放在 localStorage 之中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ropcUrl = <span class="string">`https://localhost:5001/connect/token`</span>;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: ropcUrl,</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            client_id: <span class="string">'ropcclient'</span>,</span><br><span class="line">            client_secret: <span class="string">'ropcsecret'</span>,</span><br><span class="line">            scope: <span class="string">'tid_api.read'</span>,</span><br><span class="line">            grant_type: <span class="string">'password'</span>,</span><br><span class="line">            username: <span class="string">'bob'</span>,</span><br><span class="line">            password:<span class="string">'bob'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            localStorage.setItem(<span class="string">"token_type"</span>, data.token_type);</span><br><span class="line">            localStorage.setItem(<span class="string">"access_token"</span>, data.access_token);</span><br><span class="line">            localStorage.setItem(<span class="string">"expires_in"</span>, data.expires_in);</span><br><span class="line">            localStorage.setItem(<span class="string">"expires_in"</span>, data.scope);</span><br><span class="line">            <span class="built_in">window</span>.location.reload();</span><br><span class="line">        &#125;,</span><br><span class="line">        failure: <span class="function"><span class="keyword">function</span> (<span class="params">errMsg</span>) </span>&#123;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><img src="/2022/03/03/oauth2-ropc/01.png" title="POST token endpoint"><p>很簡潔的方式，但使用者的帳/密卻被 Client Application 知道，<br>建議改用 <a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Proof Key for Code Exchange (PKCE)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在一些比較舊或是獨立的系統，常常會使用到 Resource Owner Password Credentials (ROPC) 的方式來取得
      
    
    </summary>
    
    
      <category term="oauth2" scheme="https://rainmakerho.github.io/tags/oauth2/"/>
    
      <category term="ROPC" scheme="https://rainmakerho.github.io/tags/ROPC/"/>
    
      <category term="Resource Owner Password Credentials" scheme="https://rainmakerho.github.io/tags/Resource-Owner-Password-Credentials/"/>
    
      <category term="grant_type=password" scheme="https://rainmakerho.github.io/tags/grant-type-password/"/>
    
  </entry>
  
  <entry>
    <title>OpenID Connect Authorization Code Flow</title>
    <link href="https://rainmakerho.github.io/2022/02/23/OpenId-oAuth2/"/>
    <id>https://rainmakerho.github.io/2022/02/23/OpenId-oAuth2/</id>
    <published>2022-02-23T09:09:14.000Z</published>
    <updated>2022-03-19T04:49:29.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源 =&gt; 授權。<br>但在存取前，我們需要的是驗證(Authentication)這個使用者是誰及取得這個使用者的其他資訊。</p><p>而要取得使用者的一些資訊，例如，名稱、Email、地址等資訊，<br>如果都是從 authorize 及 token 這2個 endpoint 來拿，又有點不太合適，<br>則會從 OpenID Connect UserInfo endpoint (通常是 /userinfo)來取得。</p><h3 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a><a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a></h3><p><a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a>是架構在 OAuth 2.0 之上，可以讓我們在 Authorization Server(這時變成 Identity Provider) 登入認證完成後，取回 Access Token 外，還可以取回 Identity Token。<br>以下使用<a href="https://www.oauth.com/playground/oidc.html" target="_blank" rel="noopener">OpenID Connect Authorization Code Flow</a>來演示。</p><p>1.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br><strong>response_type</strong>的值為<strong>code</strong>(表示我們要取回<strong>授權碼</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br><strong>scope</strong> 則為要求的 Resources，這裡給的值為 openid, profile, email (identity 的資料)及 photo ，這裡是用 <strong>+</strong>，有些是使用 <strong>空白</strong> 分隔，<br><strong>state</strong> 為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br><strong>nonce</strong> 會放在 Identity Token Payload 之中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=vMlmc7cEbsWF2CmFC_Uy7lgN</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/oidc.html</span><br><span class="line">  &amp;scope=openid+profile+email+photos</span><br><span class="line">  &amp;state=gBbLdtXyDGkC8mTP</span><br><span class="line">  &amp;nonce=9iX47YKplAznSlMH</span><br></pre></td></tr></table></figure></p><p>2.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/23/OpenId-oAuth2/02.png" title="input user Credential"></p><p>3.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/23/OpenId-oAuth2/03.png" title="User Consent"></p><p>4.當使用者同意後，Authorization Server 會把產生的 code (授權碼)及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(oidc.html)去驗證 state 值是否正確。<br><img src="/2022/02/23/OpenId-oAuth2/04.png" title="Verify the state parameter"></p><p>註:參數透過 QueryString ，所以 <code>response_mode=query</code></p><p>5.組出要透過 Code 來跟 Authorization Server 取回 AccessToken 及 Identity Token 的 URL(token)，<br>grant_type為authorization_code，code為剛才從 Authorization Server 取回的 授權碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorization-server.com/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=vMlmc7cEbsWF2CmFC_Uy7lgN</span><br><span class="line">&amp;client_secret=9234yuAokHSrB2LeBZOkZGMtvw6d_RzuarXFebXOcbqRMwci</span><br><span class="line">&amp;redirect_uri=https://www.oauth.com/playground/oidc.html</span><br><span class="line">&amp;code=9AKMAVWM5nF-jBlB3QYhNJ16jVcsgZfoKWhJz9ll74LlgvKe</span><br></pre></td></tr></table></figure></p><p>6.Post後就會得到 access_token 及 id_token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;C4BAD186C2DE0EF771F5E7DD8E0CB114867D6AC278ADCCAE3F2FC2BE0F04A86D&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;openid profile email photo&quot;,</span><br><span class="line">  &quot;id_token&quot;: &quot;.....&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>註: id_token 是 JWTs(Json Web Token)</li></ul><p>7.呼叫 <strong>userinfo</strong> Endpoint 取回使用者的相關資訊(可透過 IdentityModel 的擴充方法來取回使用者的資訊)<br>以下用 IdentityServer4 來測試，要求的 scopes 為 <strong>openid profile email address</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoResponse = <span class="keyword">await</span> tokenClient.GetUserInfoAsync(<span class="keyword">new</span> UserInfoRequest</span><br><span class="line">&#123;</span><br><span class="line">    Address = <span class="string">$"<span class="subst">&#123;IdpServer&#125;</span>/connect/userinfo"</span>,</span><br><span class="line">    Token = [上面取得的access_token]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> claims = userInfoResponse.Claims;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> claims)</span><br><span class="line">&#123;</span><br><span class="line">    System.Diagnostics.Debug.WriteLine(<span class="string">$"<span class="subst">&#123;claim.Type&#125;</span> =&gt; <span class="subst">&#123;claim.Value&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下為使用 postman 取回的資料畫面，<br><img src="/2022/02/23/OpenId-oAuth2/05.png" title="User Info"></p><ul><li>註: 如果要 IdentityServer4 自動取得 User 的相關資料，則在設定 Client 時，可以設定 <code>AlwaysIncludeUserClaimsInIdToken = true</code></li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a><br><a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Authorization Code Flow With PKCE</a><br><a href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/">OAuth 2.0 - Implicit Flow</a><br><a href="https://www.oauth.com/playground/" target="_blank" rel="noopener">OAuth 2.0 Playground</a><br><a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a><br><a href="https://stackoverflow.com/questions/46844285/difference-between-oauth-2-0-state-and-openid-nonce-parameter-why-state-cou" target="_blank" rel="noopener">Difference between OAuth 2.0 “state” and OpenID “nonce” parameter? Why state could not be reused?</a><br><a href="https://darutk.medium.com/diagrams-of-all-the-openid-connect-flows-6968e3990660" target="_blank" rel="noopener">Diagrams of All The OpenID Connect Flows</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源 =&amp;gt;
      
    
    </summary>
    
    
      <category term="Authentication" scheme="https://rainmakerho.github.io/tags/Authentication/"/>
    
      <category term="OpenID Connect" scheme="https://rainmakerho.github.io/tags/OpenID-Connect/"/>
    
      <category term="OAuth" scheme="https://rainmakerho.github.io/tags/OAuth/"/>
    
      <category term="oidc" scheme="https://rainmakerho.github.io/tags/oidc/"/>
    
  </entry>
  
  <entry>
    <title>Create Windows Form Application Custom URI Scheme</title>
    <link href="https://rainmakerho.github.io/2022/02/21/Custom-URI-Scheme/"/>
    <id>https://rainmakerho.github.io/2022/02/21/Custom-URI-Scheme/</id>
    <published>2022-02-21T02:19:35.000Z</published>
    <updated>2022-02-23T09:26:12.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>現在很多的桌面<strong>應用程式</strong>在登入時，會使用 OAuth2 ，所以在登入時，會開啟 Browser 到<strong>授權中心</strong>，讓<strong>使用者</strong>輸入帳/密後，再透過 Browser 來開啟 <strong>應用程式</strong>，如下，<br><img src="/2022/02/21/Custom-URI-Scheme/01.png" title="Open Native Application"><br>Windows Form 程式要如何做才可以達到這樣的功能呢?</p><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p>如果以 Windows 平台來看，只需要在機碼寫入設定值就可以了，<br>先在 <strong>HKEY_CLASSES_ROOT</strong> 機碼建立 <strong>AP Name</strong> (apname為 Tid-WinPKCE)的相關機碼如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT</span><br><span class="line">   Tid-WinPKCE</span><br><span class="line">      (Default) = &quot;&quot;</span><br><span class="line">      URL Protocol = URL:Tid-WinPKCE Protocol&quot;&quot;</span><br><span class="line">      shell</span><br><span class="line">         open</span><br><span class="line">            command</span><br><span class="line">               (Default) = &quot;C:\Projects\OAuth2\Tid.WinPKCE.exe&quot; &quot;%1&quot;</span><br></pre></td></tr></table></figure></p><img src="/2022/02/21/Custom-URI-Scheme/03.png" title="Custom URI Scheme 註冊機碼"><p>所以當在 Browser 網址列入 <strong>Tid-WinPKCE</strong> 再按下　<strong>:</strong> ，可以發現 Browser 網址列最前面的圖示會變成<strong>地球</strong>的圖示，<br>再按下 Enter ，就會提示是否要開啟該 App。<br><img src="/2022/02/21/Custom-URI-Scheme/02.png" title="Custom URI Scheme Address">s</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa767914(v=vs.85" target="_blank" rel="noopener">Registering an Application to a URI Scheme</a>?redirectedfrom=MSDN)<br><a href="https://css-tricks.com/hyperlinking-beyond-the-web/" target="_blank" rel="noopener">Hyperlinking Beyond the Web</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;現在很多的桌面&lt;strong&gt;應用程式&lt;/strong&gt;在登入時，會使用 OAuth2 ，所以在登入時，會開啟 Browser 到&lt;stro
      
    
    </summary>
    
    
      <category term="Custom URI Scheme" scheme="https://rainmakerho.github.io/tags/Custom-URI-Scheme/"/>
    
      <category term="Windows" scheme="https://rainmakerho.github.io/tags/Windows/"/>
    
      <category term="OAuth2" scheme="https://rainmakerho.github.io/tags/OAuth2/"/>
    
      <category term="Private-Use URI Scheme" scheme="https://rainmakerho.github.io/tags/Private-Use-URI-Scheme/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Proof Key for Code Exchange (PKCE)</title>
    <link href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/"/>
    <id>https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/</id>
    <published>2022-02-18T00:42:49.000Z</published>
    <updated>2022-03-22T05:06:54.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Native applications 因為是安裝在個人的設備上面，例如 手機，個人電腦。<br>這些 Native applications 通常會跟作業系統註冊 App-Claimed https URL (<a href="https://app.exp.com" target="_blank" rel="noopener">https://app.exp.com</a> 會開啟該 application) 或是使用 Custom URL Scheme(myapp://callback#token=…)。<br>因為<a href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/">OAuth 2.0 - Implicit Flow</a>可以用在 public client，<br>因為 Implicit Flow 比較不安全，所以現在大多改使用 PKCE，它是擴充自 Authorization Code Flow 。<br>在 <a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a> 在取得 Token 時，需要將 client_secret 一併傳出來取得 access token ，如果是 public client 就有可能會被知道 client_secret 的值，所以 PKCE 就是動態建立 Code Verifier 來取代 client_secret。<br>以下使用<a href="https://www.oauth.com/playground/authorization-code-with-pkce.html" target="_blank" rel="noopener">OAuth 2.0 Playground - pkce</a>來演示。</p><h3 id="OAuth-2-0-Authorization-Code-Flow-With-PKCE"><a href="#OAuth-2-0-Authorization-Code-Flow-With-PKCE" class="headerlink" title="OAuth 2.0 - Authorization Code Flow With PKCE"></a>OAuth 2.0 - Authorization Code Flow With PKCE</h3><p>1.建立 Code Verifier ( A-Z, a-z, 0-9, and the punctuation characters -._~ (hyphen, period, underscore, and tilde), between 43 and 128 characters long)<br>可透過 <strong>IdentityModel</strong> Nuget 套件的 CryptoRandom.CreateUniqueId 來建立<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> codeVerifier = CryptoRandom.CreateUniqueId(<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p>2.建立 Code Challenge<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> codeChallenge = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> sha256 = SHA256.Create())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> challengeBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(codeVerifier));</span><br><span class="line">    codeChallenge = Base64Url.Encode(challengeBytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2022/02/18/oAuth2-PKCE/01.png" title="Code Verifier"><p>3.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br>response_type的值為<strong>code</strong>(表示我們要取回<strong>授權碼</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br>state為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br>scope 則為要求的 Resources，這裡給的值為 photo 及 offline_access ，這裡是用 <strong>+</strong>，有些是使用 <strong>空白</strong> 分隔，<br>code_challenge就是前面 codeVerifier 透過 Sha256 算出 Hash 值轉成 Base64 字串，<br>為的就是在取 Access Token 時可以透過 codeVerfier 而不需傳遞 client_secret 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=d6O09tD6FCiCLxL6izEBBe3a</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/authorization-code-with-pkce.html</span><br><span class="line">  &amp;scope=photo+offline_access</span><br><span class="line">  &amp;state=s9IYwOaNw9iNRr89</span><br><span class="line">  &amp;code_challenge=LLruaPaJLgW0puyjcM5u9AbngsIXsUslae3eZNXT8YM</span><br><span class="line">  &amp;code_challenge_method=S256</span><br></pre></td></tr></table></figure></p><p>4.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/18/oAuth2-PKCE/02.png" title="input user Credential"></p><p>5.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/18/oAuth2-PKCE/03.png" title="User Consent"></p><p>6.當使用者同意後，Authorization Server 會把產生的 code (授權碼)及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(authorization-code-with-pkce.html)去驗證 state 值是否正確。<br></p><p>註:參數透過 QueryString ，所以 <code>response_mode=query</code></p><p>7.組出要透過 Code 及 Code Verifier 來跟 Authorization Server 取回 AccessToken 的 URL(token)，<br>grant_type為authorization_code，code為剛才從 Authorization Server 取回的 授權碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorization-server.com/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=d6O09tD6FCiCLxL6izEBBe3a</span><br><span class="line">&amp;client_secret=n9Esj_tJXmQoALz5GGx7pLsDaFEUvRiThVCfstiz1QSj0VvT</span><br><span class="line">&amp;redirect_uri=https://www.oauth.com/playground/authorization-code-with-pkce.html</span><br><span class="line">&amp;code=aLosw59x2JxvXGf4w35OXVWA9wUbqfoh32NmMgyziUsQKvWE</span><br><span class="line">&amp;code_verifier=ZDaKG5paqwvrjQ5luDSvxIMZgg9Ze2pySYWjRPFM1ZmvgkHE</span><br></pre></td></tr></table></figure></p><ul><li>註: 像 IdentityServer4 的 Client 可以設定 client_secret 不是必要的，所以 client_secret 就可以不需要傳遞</li></ul><p>8.Post後就會得到 AccessToken<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;OJ8LsvkJX75c4FvGVWQeCZ1m7k8hZwsMir-l1TpzE_6m2M7VmwX-gTR5_A_eGeAgcrBQbCrQ&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;photo offline_access&quot;,</span><br><span class="line">  &quot;refresh_token&quot;: &quot;ivHlMEInAeqqncUaMpGNCd31&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要呼叫 API 時，加入 access_token 就可以了<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, access_token);</span><br></pre></td></tr></table></figure></p><ul><li>因為 scope 有 offline_access，所以 refresh_token 會一併回傳</li></ul><h3 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h3><p>因為在取得 AccessToken 時，不會傳遞 client_secret 改以 code_verifier 傳遞，所以適用於 public client，例如 SPA, Native applications<br>而 Private Application 則可以加上 PKCE 讓它更安全，原本使用 Implicit Flow 的 Public Application 請改使用 Authorization Code Flow + PKCE ，<br>並設定 client_secret 不是必要值。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.oauth.com/oauth2-servers/pkce/" target="_blank" rel="noopener">Protecting Apps with PKCE</a><br><a href="https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uris-native-apps/" target="_blank" rel="noopener">Redirect URLs for Native Apps</a><br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa767914(v=vs.85" target="_blank" rel="noopener">Registering an Application to a URI Scheme</a>?redirectedfrom=MSDN)<br><a href="https://css-tricks.com/hyperlinking-beyond-the-web/" target="_blank" rel="noopener">Hyperlinking Beyond the Web</a><br><a href="https://dropbox.tech/developers/pkce--what-and-why-#:~:text=PKCE%20provides%20dynamic%20client%20secrets,you%20should%20switch%20to%20PKCE." target="_blank" rel="noopener">PKCE: What and Why?</a><br><a href="https://www.praetorian.com/blog/attacking-and-defending-oauth-2-0-part-1/" target="_blank" rel="noopener">Attacking and Defending OAuth 2.0 (Part 1 of 2: Introduction, Threats, and Best Practices)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 Native applications 因為是安裝在個人的設備上面，例如 手機，個人電腦。&lt;br&gt;這些 Native applicati
      
    
    </summary>
    
    
      <category term="Private-Use URI Scheme" scheme="https://rainmakerho.github.io/tags/Private-Use-URI-Scheme/"/>
    
      <category term="OAuth 2.0" scheme="https://rainmakerho.github.io/tags/OAuth-2-0/"/>
    
      <category term="PKCE" scheme="https://rainmakerho.github.io/tags/PKCE/"/>
    
      <category term="Proof Key for Code Exchange" scheme="https://rainmakerho.github.io/tags/Proof-Key-for-Code-Exchange/"/>
    
      <category term="claiming URLs" scheme="https://rainmakerho.github.io/tags/claiming-URLs/"/>
    
      <category term="Custom URL Scheme" scheme="https://rainmakerho.github.io/tags/Custom-URL-Scheme/"/>
    
      <category term="public client" scheme="https://rainmakerho.github.io/tags/public-client/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Implicit Flow</title>
    <link href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/"/>
    <id>https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/</id>
    <published>2022-02-17T01:24:26.000Z</published>
    <updated>2022-02-23T15:40:43.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a> 了解它是先取回<strong>授權碼</strong>後再透過該<strong>授權碼</strong>，<strong>Client Id</strong>及<strong>Client Secret</strong>，再取回<strong>Access Token</strong>，透過它去存取 API。<br><strong>Client Secret</strong>相當於是 Password，如果是 Public Client(SPA, Native applications)，那就會讓別人知道<strong>Client Secret</strong>，<br>所以可以使用<strong>OAuth 2.0 - Implicit Flow</strong></p><p>以下使用<a href="https://www.oauth.com/playground/index.html" target="_blank" rel="noopener">OAuth 2.0 Playground</a>來演示。</p><h3 id="OAuth-2-0-Implicit-Flow"><a href="#OAuth-2-0-Implicit-Flow" class="headerlink" title="OAuth 2.0 - Implicit Flow"></a>OAuth 2.0 - Implicit Flow</h3><p>開始之前需要註冊 Client<br><img src="/2022/02/17/oAuth2-implicit-flow/01.png" title="Client Registration"></p><p>1.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br>response_type的值為<strong>token</strong>(表示我們直接取回<strong>Access Token</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br>state為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br>scope 則為要求的 Resources，這裡給的值為 photo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=token</span><br><span class="line">  &amp;client_id=oW44Q708NN7dMkJT_ua2Vgbi</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/implicit.html</span><br><span class="line">  &amp;scope=photo</span><br><span class="line">  &amp;state=usBUtMUEzN1-ZKHy</span><br></pre></td></tr></table></figure></p><p>2.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/17/oAuth2-implicit-flow/02.png" title="input user Credential"></p><p>3.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/17/oAuth2-implicit-flow/03.png" title="User Consent"></p><p>4.當使用者同意後，Authorization Server 會把產生的 <strong>access_token</strong> 及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(implicit.html)去驗證 state 值是否正確。<br><img src="/2022/02/17/oAuth2-implicit-flow/04.png" title="Verify the state parameter"></p><p>註:參數透過 # ，所以 <code>response_mode=fragment</code></p><p>5.解析 URL 取回 <strong>access_token</strong>，呼叫 API 時，加入 access_token 就可以了<br><img src="/2022/02/17/oAuth2-implicit-flow/05.png" title="token"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, access_token);</span><br></pre></td></tr></table></figure><h3 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h3><p>因為在取得 AccessToken 時，不會傳遞 client_secret ，所以適用於 public client，例如 SPA, Native applications，<br>建議使用 <a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Authorization Code Flow With PKCE</a> 來代替 </p><ul><li>註: OAuth 2.1 就沒有 Implicit Flow</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://www.oauth.com/playground/index.html" target="_blank" rel="noopener">OAuth 2.0 Playground</a><br><a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/&quot;&gt;OAu
      
    
    </summary>
    
    
      <category term="OAuth 2.0" scheme="https://rainmakerho.github.io/tags/OAuth-2-0/"/>
    
      <category term="public client" scheme="https://rainmakerho.github.io/tags/public-client/"/>
    
      <category term="Implicit Flow" scheme="https://rainmakerho.github.io/tags/Implicit-Flow/"/>
    
      <category term="response_type=token" scheme="https://rainmakerho.github.io/tags/response-type-token/"/>
    
      <category term="response_mode=fragment" scheme="https://rainmakerho.github.io/tags/response-mode-fragment/"/>
    
      <category term="token flow" scheme="https://rainmakerho.github.io/tags/token-flow/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Authorization Code Flow</title>
    <link href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/"/>
    <id>https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/</id>
    <published>2022-02-15T05:18:04.000Z</published>
    <updated>2022-02-23T09:17:05.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源。<br>使用者會在授權伺服器上驗證帳密，將 Access Token 交給 Client App，所以 Client App 並不會拿到 使用者的帳密。<br><img src="https://identityserver4.readthedocs.io/en/3.1.0/_images/protocols.png" alt="OAuth2"><br>以上圖來說，當使用者使用 Web App 需要輸入帳密時，應該是網頁轉到 Security Token Service(Authorization Server) 輸入使用者的帳密，而 Web App 從 Token Service 取得 Token 去存取 API。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>OAuth 2.0 主要有4個參與交換的合作對象:<br><img src="https://identityserver4.readthedocs.io/en/latest/_images/terminology.png" alt="The OAuth 2.0 Players"></p><ul><li>Resources: 使用 Authorization Server 保護的資料或是API，每個 Resource 有一個唯一的名稱， Client 用這些名稱指定要存取的 Resource。</li><li>Clients: 跟 Authorization Server 註冊過的 App (會取得 client id 及 client secret)，例如 Web 應用程式, 手機 App, 桌面應用程式, SPA, Server Processes 等等。</li><li>Users: Resource Owner，具有允許 Client 存取 Protected Resource 的能力。</li><li>Authorization Server: 也稱為身份識別提供者(identity provider)，包含以下功能<ul><li>保護 Resources</li><li>驗證 User </li><li>Single sign-on</li><li>管理及驗證 Client</li><li>發行 Token 給 Client</li><li>驗證 Token</li></ul></li></ul><p>了解這些合作對象後，接下來透過這些對象的合作，有那些的 OAuth flow 及它們的適用情境。</p><p>以下使用<a href="https://www.oauth.com/playground/index.html" target="_blank" rel="noopener">OAuth 2.0 Playground</a>來演示。</p><h3 id="OAuth-flow"><a href="#OAuth-flow" class="headerlink" title="OAuth flow"></a>OAuth flow</h3><p>開始之前需要註冊 Client<br><img src="/2022/02/15/oAuth2-Basic/01.png" title="Client Registration"></p><h4 id="Authorization-Code-Flow"><a href="#Authorization-Code-Flow" class="headerlink" title="Authorization Code Flow"></a>Authorization Code Flow</h4><p>1.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br>response_type的值為<strong>code</strong>(表示我們要取回<strong>授權碼</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br>state為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br>scope 則為要求的 Resources，這裡給的值為 photo 及 offline_access ，這裡是用 <strong>+</strong>，有些是使用 <strong>空白</strong> 分隔。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=kPfE4R0EH5HRw4oR-DxbckSB</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/authorization-code.html</span><br><span class="line">  &amp;scope=photo+offline_access</span><br><span class="line">  &amp;state=ClJTpXOaXdN-0ER4</span><br></pre></td></tr></table></figure></p><p>2.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/15/oAuth2-Basic/02.png" title="input user Credential"></p><p>3.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/15/oAuth2-Basic/03.png" title="User Consent"></p><p>4.當使用者同意後，Authorization Server 會把產生的 code (授權碼)及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(authorization-code.html)去驗證 state 值是否正確。<br><img src="/2022/02/15/oAuth2-Basic/04.png" title="Verify the state parameter"></p><p>註:參數透過 QueryString ，所以 <code>response_mode=query</code></p><p>5.組出要透過 Code 來跟 Authorization Server 取回 AccessToken 的 URL(token)，<br>grant_type為authorization_code，code為剛才從 Authorization Server 取回的 授權碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorization-server.com/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=kPfE4R0EH5HRw4oR-DxbckSB</span><br><span class="line">&amp;client_secret=x60IAq1A5sG090NlY3ANlCpOAnhajIFJbP7lCrF_Vr2Sr8Ij</span><br><span class="line">&amp;redirect_uri=https://www.oauth.com/playground/authorization-code.html</span><br><span class="line">&amp;code=P8Er2eBWUngJcc2m6VB4wNOodXMQiNO5Qtrycn2g4hI9bzhg</span><br></pre></td></tr></table></figure></p><p>6.Post後就會得到 AccessToken<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;C3QQyQycfCT4UMrh8K4GCMnvlHCxHrdlXQf6SFoPDWjRxpG3cDlNjPPHPLHOpeHgeWdg84aQ&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;photo offline_access&quot;,</span><br><span class="line">  &quot;refresh_token&quot;: &quot;ckWvTKpkiLANJ67Ktzd6f3PA&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要呼叫 API 時，加入 access_token 就可以了<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, access_token);</span><br></pre></td></tr></table></figure></p><p>註: 因為 scope 有 offline_access，所以 refresh_token 會一併回傳</p><h3 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h3><p>因為在取得 AccessToken 時，需要傳遞 client_secret ，所以適用於 Server Site 的 App。<br>Public App 請參考 <a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Authorization Code Flow With PKCE</a> 或是 <a href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/">OAuth 2.0 - Implicit Flow</a></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://auth0.com/intro-to-iam/what-is-oauth-2/" target="_blank" rel="noopener">What is OAuth 2.0?</a><br><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/develop/active-directory-v2-protocols" target="_blank" rel="noopener">Microsoft 身分識別平臺上的 OAuth 2.0 和 OpenID Connect 通訊協定</a><br><a href="https://www.oauth.com/playground/" target="_blank" rel="noopener">OAuth 2.0 Playground</a><br><a href="https://www.oauth.com/oauth2-servers/server-side-apps/authorization-code/" target="_blank" rel="noopener">Authorization Code Grant</a></p><ul><li>註:本文有些圖片引用自 <a href="https://identityserver4.readthedocs.io" target="_blank" rel="noopener">https://identityserver4.readthedocs.io</a> 網站</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源。&lt;br&gt;使
      
    
    </summary>
    
    
      <category term="OAuth 2.0" scheme="https://rainmakerho.github.io/tags/OAuth-2-0/"/>
    
      <category term="Authorization Code Flow" scheme="https://rainmakerho.github.io/tags/Authorization-Code-Flow/"/>
    
      <category term="response_type=code" scheme="https://rainmakerho.github.io/tags/response-type-code/"/>
    
      <category term="grant_type=authorization_code" scheme="https://rainmakerho.github.io/tags/grant-type-authorization-code/"/>
    
      <category term="private client" scheme="https://rainmakerho.github.io/tags/private-client/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler 無法錄到 HttpClient 發出的 Request</title>
    <link href="https://rainmakerho.github.io/2022/02/11/fiddler-cannot-trace-httpclient/"/>
    <id>https://rainmakerho.github.io/2022/02/11/fiddler-cannot-trace-httpclient/</id>
    <published>2022-02-11T05:02:37.000Z</published>
    <updated>2022-02-11T07:52:43.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>如果透過 Fiddler 錄不到 HttpClient 發出的 Request 。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>參考<a href="https://www.telerik.com/forums/no-traffic-seen-from-vs-2017-http-client-app-in-fiddler" target="_blank" rel="noopener">No traffic seen from VS 2017 HTTP Client app in Fiddler ?</a><br>可以透過 <code>netsh winhttp</code> 來設定 Proxy 轉向 Fiddler。<br>以系統管理者身份開啟 Command 視窗，輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp set proxy 127.0.0.1:8888</span><br></pre></td></tr></table></figure></p><p>如果要 Reset ，則可以輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;如果透過 Fiddler 錄不到 HttpClient 發出的 Request 。&lt;/p&gt;
&lt;h3 id=&quot;解法&quot;&gt;&lt;a href=&quot;#解法
      
    
    </summary>
    
    
      <category term="HttpClient" scheme="https://rainmakerho.github.io/tags/HttpClient/"/>
    
      <category term="Fiddler" scheme="https://rainmakerho.github.io/tags/Fiddler/"/>
    
      <category term="netsh winhttp" scheme="https://rainmakerho.github.io/tags/netsh-winhttp/"/>
    
  </entry>
  
</feed>
