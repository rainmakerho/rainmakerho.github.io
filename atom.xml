<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="https://rainmakerho.github.io/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2025-10-15T16:32:27.414Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 11 24H2 安裝 Update 後造成 localhost 連不到 ERR_CONNECTION_RESET or hostname is invalid</title>
    <link href="https://rainmakerho.github.io/2025/10/16/iis-express-failing-after-install-2025-10-update-for-windows11-24h2/"/>
    <id>https://rainmakerho.github.io/2025/10/16/iis-express-failing-after-install-2025-10-update-for-windows11-24h2/</id>
    <published>2025-10-15T16:16:15.000Z</published>
    <updated>2025-10-15T16:32:27.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>今天同事的 Windows 11 24H2 安裝完 Windows 更新重開機後，從 VS.NET 跑 IIS Express 起來後，<br>會發生 <strong>ERR_CONNECTION_RESET</strong> or <strong>hostname is invalid</strong> 的錯誤</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>可以參考 <a href="https://stackoverflow.com/questions/79790827/localhost-applications-failing-after-installing-2025-10-cumulative-update-for-w">Localhost applications failing after installing “2025-10 Cumulative Update for Windows 11 Version 24H2 for x64-based Systems (KB5066835) (26100.6899)”</a> 解法如下:</p><ol><li>更新到 <strong>Windows 11 25H2</strong></li><li>修改機碼，將 <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\HTTP\</code> 中新增 2 個機碼(<code>EnableHttp2Tls</code>及<code>EnableHttp2Cleartext</code>)，並設定<code>DWORD (32-bit) Value</code>值為<code>0</code> (未驗證)</li><li>延後更新，並移除 <code>KB5066835</code>, <code>KB5066131</code>, <code>KB5065789</code></li></ol><ul><li>註: 感謝同事 Henry, Simon &amp; Ryan 的幫忙</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/79790827/localhost-applications-failing-after-installing-2025-10-cumulative-update-for-w">Localhost applications failing after installing “2025-10 Cumulative Update for Windows 11 Version 24H2 for x64-based Systems (KB5066835) (26100.6899)”</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;今天同事的 Windows 11 24H2 安裝完 Windows 更新重開機後，從 VS.NET 跑 IIS Express 起來後，&lt;b</summary>
      
    
    
    
    
    <category term="ERR_CONNECTION_RESET" scheme="https://rainmakerho.github.io/tags/ERR-CONNECTION-RESET/"/>
    
    <category term="400" scheme="https://rainmakerho.github.io/tags/400/"/>
    
    <category term="Windows 11" scheme="https://rainmakerho.github.io/tags/Windows-11/"/>
    
    <category term="24H2" scheme="https://rainmakerho.github.io/tags/24H2/"/>
    
    <category term="hostname is invalid" scheme="https://rainmakerho.github.io/tags/hostname-is-invalid/"/>
    
    <category term="KB5066835" scheme="https://rainmakerho.github.io/tags/KB5066835/"/>
    
    <category term="KB5066131" scheme="https://rainmakerho.github.io/tags/KB5066131/"/>
    
    <category term="KB5065789" scheme="https://rainmakerho.github.io/tags/KB5065789/"/>
    
  </entry>
  
  <entry>
    <title>.NET Build task failed unexpectedly. System.IO.DirectoryNotFoundException Could not find a part of the path</title>
    <link href="https://rainmakerho.github.io/2025/09/15/dotnet-build-directorynotfoundexception/"/>
    <id>https://rainmakerho.github.io/2025/09/15/dotnet-build-directorynotfoundexception/</id>
    <published>2025-09-15T05:48:05.000Z</published>
    <updated>2025-09-15T06:01:31.852Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在 .NET Build 專案時，會出現以下的錯誤訊息:</p><blockquote><p>The “GenerateStaticWebAssetEndpointsPropsFile” task failed unexpectedly. System.IO.DirectoryNotFoundException: Could not find a part of the path</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>這通常是因為整個專案的路徑過長(超過 260 )，所以可以參考 <a href="https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?utm_source=chatgpt.com&tabs=registry">Maximum Path Length Limitation</a> 去<strong>Enable long paths</strong>，例如加 Windows 機碼的設定，如下:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&quot;HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem&quot;</span> <span class="literal">-Name</span> <span class="string">&quot;LongPathsEnabled&quot;</span> <span class="literal">-Value</span> <span class="number">1</span> <span class="literal">-PropertyType</span> DWORD <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?utm_source=chatgpt.com&tabs=registry">Maximum Path Length Limitation</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;在 .NET Build 專案時，會出現以下的錯誤訊息:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The “GenerateStaticWe</summary>
      
    
    
    
    
    <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
    <category term="DirectoryNotFoundException" scheme="https://rainmakerho.github.io/tags/DirectoryNotFoundException/"/>
    
    <category term="long paths" scheme="https://rainmakerho.github.io/tags/long-paths/"/>
    
    <category term="260" scheme="https://rainmakerho.github.io/tags/260/"/>
    
    <category term="GenerateStaticWebAssetEndpointsPropsFile" scheme="https://rainmakerho.github.io/tags/GenerateStaticWebAssetEndpointsPropsFile/"/>
    
    <category term="路徑過長" scheme="https://rainmakerho.github.io/tags/%E8%B7%AF%E5%BE%91%E9%81%8E%E9%95%B7/"/>
    
  </entry>
  
  <entry>
    <title>Dapper 使用 DynamicParameters 被 Checkmarx 掃出 SQL Injection 的問題與解法</title>
    <link href="https://rainmakerho.github.io/2025/09/12/checkmarx-dapper-dynamicparameters-sqlinjection/"/>
    <id>https://rainmakerho.github.io/2025/09/12/checkmarx-dapper-dynamicparameters-sqlinjection/</id>
    <published>2025-09-12T06:28:17.000Z</published>
    <updated>2025-09-12T06:50:28.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>Checkmarx 升級到 V9.6.7.1005 HF20 後, 原本使用 Dapper 的程式居然被掃出有 <strong>SQL Injection</strong> 的風險。<br>程式以 Console 程式來說明，大約如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> dbFile = <span class="string">&quot;mydb.sqlite&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> connectionString = <span class="string">$&quot;Data Source=<span class="subst">&#123;dbFile&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> connection = <span class="keyword">new</span> SqliteConnection(connectionString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查詢 table_1</span></span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">&quot;SELECT Id, Name FROM table_1 WHERE Name=@name&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> name = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> DynamicParameters();</span><br><span class="line">p1.Add(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">IEnumerable&lt;Table1&gt; results = connection.Query&lt;Table1&gt;(sql, p1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Table1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>IEnumerable&lt;Table1&gt; results = connection.Query&lt;Table1&gt;(sql, p1);</code> 會被 Checkmarx 掃出有 <strong>SQL Injection</strong> 的風險。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>經過多方的測試，發現 Checkmarx 並不認得上述的那種做法，所以就改用匿名物件放在<strong>Query</strong>的第二個參數之中才會 Pass ，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;Table1&gt; results = connection.Query&lt;Table1&gt;(sql, <span class="keyword">new</span> &#123; name &#125;);</span><br></pre></td></tr></table></figure><ul><li>註: 感謝同事 unciax_wu 的幫忙</li></ul><h3 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h3><p><a href="https://www.learndapper.com/parameters">Using Parameters With Dapper</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;Checkmarx 升級到 V9.6.7.1005 HF20 後, 原本使用 Dapper 的程式居然被掃出有 &lt;strong&gt;SQL In</summary>
      
    
    
    
    
    <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
    <category term="SQL Injection" scheme="https://rainmakerho.github.io/tags/SQL-Injection/"/>
    
    <category term="Dapper" scheme="https://rainmakerho.github.io/tags/Dapper/"/>
    
    <category term="DynamicParameters" scheme="https://rainmakerho.github.io/tags/DynamicParameters/"/>
    
    <category term="V9.6.7" scheme="https://rainmakerho.github.io/tags/V9-6-7/"/>
    
  </entry>
  
  <entry>
    <title>Teams Bot 發送訊息給 Teams User 回傳 401 錯誤解決方案</title>
    <link href="https://rainmakerho.github.io/2025/09/12/teams-bot-post-message-401/"/>
    <id>https://rainmakerho.github.io/2025/09/12/teams-bot-post-message-401/</id>
    <published>2025-09-12T01:25:01.000Z</published>
    <updated>2025-09-12T02:06:57.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>2025&#x2F;7&#x2F;31 後，Azure Bot 不再支援 Multi Tenant App，導致 Teams Bot 發送訊息時可能回傳 401 Unauthorized 錯誤。本文說明原因與解決方法。</p><h3 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h3><p>最近在建立 Teams Bot 後，透 Bot App 發送訊息給使用者時，會發生 <strong>401 Unauthorized</strong> 的錯誤。錯誤訊息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request failed with status code 401</span><br></pre></td></tr></table></figure><h3 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h3><p>Teams Bot 是透過在 Portal Microsoft Entra ID 中的 App 身份來發送訊息，<br>以往我們都是先在 App registrations 中註冊 App (設定為 <strong>Multitenant</strong>)，<br>然後在<strong>Azure Bot</strong>中設定<strong>Microsoft App ID</strong>，<br>在裡面的<strong>Type of App</strong>也一併設定成<strong>Multi Tenant</strong>，<br>再選擇前面建立的 App。</p><h3 id="問題分析"><a href="#問題分析" class="headerlink" title="問題分析"></a>問題分析</h3><p>最近在<strong>Azure Bot</strong>中的<strong>Type of App</strong>卻只剩下<strong>Single Tenant</strong>及<strong>User-Assigned Managed Identity</strong>，<br><strong>Multi Tenant</strong>不見了!!! 如下圖:</p><img src="/2025/09/12/teams-bot-post-message-401/01.png" class="" title="Type of App"><p>而在<a href="https://learn.microsoft.com/en-us/azure/bot-service/bot-service-quickstart-registration?view=azure-bot-service-4.0&viewFallbackFrom=azure-bot-service-3.0&tabs=userassigned">Register a bot with Azure</a>中有備註</p><blockquote><p>Multi-tenant bot 在 2025&#x2F;7&#x2F;31 後就不能用了，如果在這之前建立的一樣可以用，但在 2025&#x2F;7&#x2F;31 後就不能用了~~</p></blockquote><p><strong>Multi Tenant App</strong>它取得 Token 的 URL 是 <code>https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token</code>，<br><strong>Single Tenant App</strong>它取得 Token 的 URL 是 <code>https://login.microsoftonline.com/$&#123;tenantId&#125;/oauth2/v2.0/token</code></p><p>所以拿 <strong>Multi Tenant</strong>的 Token 去送訊息自然就會驗證錯誤，然後回<strong>401</strong>的錯誤。</p><p>所以<strong>2025&#x2F;7&#x2F;31</strong>之後 App 就建立要建立為<strong>Single Tenant</strong>哦~<br>目前發現，不管是 Single Tenant or Multi Tenant ，只要是<strong>Single Tenant</strong>的 Token 就可以順利發送訊息。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>2025&#x2F;7&#x2F;31 後，Azure Bot 必須使用 Single Tenant App。遇到 401 錯誤時，請檢查 Token 是否為 Single Tenant 的 Token。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/azure/bot-service/bot-service-quickstart-registration?view=azure-bot-service-4.0&viewFallbackFrom=azure-bot-service-3.0&tabs=userassigned">Register a bot with Azure</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;2025&amp;#x2F;7&amp;#x2F;31 後，Azure Bot 不再支援 Multi Tenant App，導致 Teams Bot 發送訊</summary>
      
    
    
    
    
    <category term="Unauthorized" scheme="https://rainmakerho.github.io/tags/Unauthorized/"/>
    
    <category term="Teams" scheme="https://rainmakerho.github.io/tags/Teams/"/>
    
    <category term="Bot" scheme="https://rainmakerho.github.io/tags/Bot/"/>
    
    <category term="API" scheme="https://rainmakerho.github.io/tags/API/"/>
    
    <category term="Azure Bot" scheme="https://rainmakerho.github.io/tags/Azure-Bot/"/>
    
    <category term="Single Tenant" scheme="https://rainmakerho.github.io/tags/Single-Tenant/"/>
    
    <category term="401" scheme="https://rainmakerho.github.io/tags/401/"/>
    
    <category term="Multi Tenant" scheme="https://rainmakerho.github.io/tags/Multi-Tenant/"/>
    
    <category term="Microsoft Entra ID" scheme="https://rainmakerho.github.io/tags/Microsoft-Entra-ID/"/>
    
    <category term="Token" scheme="https://rainmakerho.github.io/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>使用 C# 和 Semantic Kernel 打造 AI 應用：第二章 - 深入 Plugins</title>
    <link href="https://rainmakerho.github.io/2025/09/02/semantic-kernel-plugins-csharp/"/>
    <id>https://rainmakerho.github.io/2025/09/02/semantic-kernel-plugins-csharp/</id>
    <published>2025-09-02T00:44:21.000Z</published>
    <updated>2025-09-02T00:58:21.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在上一章中，我們初探了 Semantic Kernel 的核心概念，並學習如何透過 Kernel 輕鬆地將 AI 服務整合到你的 C# 應用程式中。我們看到了 AI 基礎能力的強大，也理解到單靠 LLM 本身的知識庫仍有其限制。</p><p>這個限制，正是本章將要解決的核心問題。</p><p>想像一下，如果 AI 不僅能回答你提出的問題，還能執行更複雜的任務，例如：查詢即時的天氣、從資料庫中提取特定資訊，或是自動發送一封電子郵件。這將大大提升 AI 的應用潛力。</p><p>Semantic Kernel 提供了強大的 Plugins（插件） 機制，就像為你的 AI 助理裝備了一整個「工具箱」，讓它不再只是個知識淵博的大腦，更能動手執行任務，成為能解決現實問題的超能力者。<br>本章，我們將深入探索 Plugins 的世界，從最基礎的內建函數 (Native Functions) 開始，手把手帶你學習如何創建和使用自己的工具，並進一步了解如何透過檔案式提示 (File-based Prompts)，將 AI 的能力提升到一個全新的層次。</p><h3 id="Using-a-Function-with-a-Complex-Type-Parameter-and-Return-Type"><a href="#Using-a-Function-with-a-Complex-Type-Parameter-and-Return-Type" class="headerlink" title="Using a Function with a Complex Type Parameter and Return Type"></a>Using a Function with a Complex Type Parameter and Return Type</h3><p>以下我們就來建立一個包含地點及日期的參數，做為查詢天氣預報的參數，試看看 LLM 是否能順利地從使用者的問題中，取出合適的參數來呼叫天氣預報的 Function ，如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherPlugin</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] Conditions = &#123; <span class="string">&quot;晴天&quot;</span>,<span class="string">&quot;多雲&quot;</span>,<span class="string">&quot;下雨&quot;</span>, <span class="string">&quot;豪雨&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Random Random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction</span>]</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;取得特定日期及特定地點的天氣預測&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetWeatherForecastForLocationAndDate</span>(<span class="params">[Description(<span class="string">&quot;取得特定日期及特定地點的天氣預測的參數&quot;</span></span>)] WeatherRequest weatherRequest)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> condition = Conditions[Random.Next(Conditions.Length)];</span><br><span class="line">        <span class="keyword">var</span> highTemp = Random.Next(<span class="number">0</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="keyword">var</span> lowTemp = Random.Next(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;在 <span class="subst">&#123;weatherRequest.Date.ToShortDateString()&#125;</span>，<span class="subst">&#123;weatherRequest.Location&#125;</span> 的天氣預測是 <span class="subst">&#123;condition&#125;</span>，氣溫方面最高 <span class="subst">&#123;highTemp&#125;</span>°F，最低 <span class="subst">&#123;lowTemp&#125;</span>°F。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherRequest</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;查詢天氣的地點&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Location &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;查詢天氣的日期&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後在 Kernel 中註冊這個 Plugin 後，詢問<code>今2024/9/1 在台中的天氣如何?</code>，如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line"><span class="comment">// 註冊 plugin</span></span><br><span class="line">kernel.ImportPluginFromType&lt;WeatherPlugin&gt;();</span><br><span class="line">OpenAIPromptExecutionSettings settings = <span class="keyword">new</span>() &#123; ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions &#125;;</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line"><span class="comment">// 直接輸出結果</span></span><br><span class="line">Console.WriteLine(<span class="keyword">await</span> kernel.InvokePromptAsync(<span class="string">&quot;今2024/9/1 在台中的天氣如何?&quot;</span>, <span class="keyword">new</span>(settings)));</span><br></pre></td></tr></table></figure><p>在 <code>GetWeatherForecastForLocationAndDate</code> Method 設定中斷點，可以看到 LLM 從使用者的問題中取出<strong>地點</strong>及<strong>日期</strong>組成<code>WeatherRequest</code>參數傳到 Method 之中，如下圖:</p><img src="/2025/09/02/semantic-kernel-plugins-csharp/01.png" class="" title="Complex Type"><h3 id="Built-in-Plugins"><a href="#Built-in-Plugins" class="headerlink" title="Built-in Plugins"></a>Built-in Plugins</h3><p>Semantic kernel 核心的 Plugin 包含<code>Time plugin</code>、<code>HTTP plugin</code>、<code>FileIO plugin</code>、<code>ConversationSummary plugin</code>及<code>Text plugin</code>等等，<br>想知道更多，可以查看 <a href="https://github.com/microsoft/semantic-kernel/tree/main/dotnet/src/Plugins">Semantic kernel Plugins</a></p><p>1.加入 <code>Microsoft.SemanticKernel.Plugins.Core</code> Nuget 套件(preview)</p><p>2.使用<code>ConversationSummary plugin</code>， 整理一下對話內容，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.Plugins.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line"><span class="comment">// 註冊 plugin</span></span><br><span class="line">kernel.ImportPluginFromType&lt;ConversationSummaryPlugin&gt;();</span><br><span class="line">OpenAIPromptExecutionSettings settings = <span class="keyword">new</span>() &#123; ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions &#125;;</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line"><span class="keyword">var</span> chatTranscript = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">George：Mary，我在想我們是不是應該跟銀行借點錢來擴大生意。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mary：嗯，我也有這個想法。不過你打算借多少？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">George：大概新台幣兩百萬，主要是要添購新的設備。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mary：兩百萬不算小數目，你覺得我們的還款能力足夠嗎？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">George：以目前的營收，加上新設備帶來的產能，應該能在五年內還清。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mary：那利率部分你有查過嗎？現在銀行大概是年利率 2.5% 到 3%。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">George：我看過一些資料，如果有公司財報跟資產擔保，應該可以談到 2.2% 左右。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mary：聽起來不錯，但我們還需要準備好貸款計畫書，銀行才會比較容易審核。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">George：對，我打算先整理最近三年的財務報表，還有未來三年的營運計畫。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mary：好，那我來準備市場分析的部分，讓銀行看到我們成長的潛力。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">George：太好了！等資料都準備好，我們就一起去銀行洽談吧。</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="keyword">await</span> kernel.InvokePromptAsync(<span class="string">$&quot;請總結以下的對話內容，<span class="subst">&#123;chatTranscript&#125;</span>&quot;</span>, <span class="keyword">new</span>(settings)));</span><br></pre></td></tr></table></figure><p>輸出結果如下:</p><img src="/2025/09/02/semantic-kernel-plugins-csharp/02.png" class="" title="ConversationSummary"><h3 id="File-based-Prompt-Functions-prompt-plugin"><a href="#File-based-Prompt-Functions-prompt-plugin" class="headerlink" title="File-based Prompt Functions(prompt plugin)"></a>File-based Prompt Functions(prompt plugin)</h3><p>prompt plugin 包含 <strong>skprompt.txt</strong> 及 <strong>config.json</strong><br>skprompt.txt: prompt 的內容(可包含變數)<br>config.json: prompt 的描述、執行的設定及變數的說明<br>以下使用人民陳情公文生成的例子來測試，找到相似的公文來生成來依使用者的陳情內容來生成新的公文，如下: 1.建立<code>Prompts\ComposeGovDoc</code>目錄</p><p>2.在目錄中新增<code>skprompt.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">你是台灣政府機關的公文撰擬專家，需根據人民陳情與過往相似公文，產出正式可用的「&#123;&#123;$doc_type&#125;&#125;」。</span><br><span class="line"></span><br><span class="line">【輸入資料】</span><br><span class="line">- 陳情內容：</span><br><span class="line">&#123;&#123;$user_complaint&#125;&#125;</span><br><span class="line"></span><br><span class="line">- 檢索到的相似公文片段（供參考，避免照抄，需改寫與去個資）：</span><br><span class="line">&#123;&#123;$similar_examples&#125;&#125;</span><br><span class="line"></span><br><span class="line">【寫作規範】</span><br><span class="line">1. 採用台灣公文常用結構：「主旨／說明／辦法」。</span><br><span class="line">2. 用語正式、精簡、條列清楚；避免口語與情緒性文字。</span><br><span class="line">3. 優先參考相似公文的處理邏輯，但需以本案事實改寫；不可捏造未提供的事證。</span><br><span class="line">4. 有缺資料時，以「請查明…」、「請會同…」等措辭引導，勿編造細節。</span><br><span class="line">5. 保護個資：姓名、電話、住址等以「[個資已遮蔽]」表述。</span><br><span class="line">6. 若涉及工務、照明、交通等，務必指明承辦單位（如：&#123;&#123;$target_agency&#125;&#125;）與回覆時程（例如：&#123;&#123;$deadline_days&#125;&#125;日內）。</span><br><span class="line">7. 產出兩個部分：</span><br><span class="line">   A) JSON（機器可讀結構）</span><br><span class="line">   B) 正式正文（人工可讀）</span><br><span class="line"></span><br><span class="line">【JSON 輸出格式】（請只輸出有效 JSON 物件，不要加註解）</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc_type&quot;: &quot;&#123;&#123;$doc_type&#125;&#125;&quot;,</span><br><span class="line">  &quot;subject&quot;: &quot;…（一句話說明主旨）&quot;,</span><br><span class="line">  &quot;facts&quot;: [</span><br><span class="line">    &quot;…（歸納已知事實1）&quot;,</span><br><span class="line">    &quot;…（歸納已知事實2）&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &quot;…（應辦事項1）&quot;,</span><br><span class="line">    &quot;…（應辦事項2）&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;target_agency&quot;: &quot;&#123;&#123;$target_agency&#125;&#125;&quot;,</span><br><span class="line">  &quot;deadline_days&quot;: &#123;&#123;$deadline_days&#125;&#125;,</span><br><span class="line">  &quot;legal_basis&quot;: [&quot;…（如有法源依據，無則留空陣列）&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【正文輸出格式】</span><br><span class="line">主旨：……。</span><br><span class="line">說明：</span><br><span class="line">一、……。</span><br><span class="line">二、……。</span><br><span class="line">辦法：</span><br><span class="line">一、請&#123;&#123;$target_agency&#125;&#125;……。</span><br><span class="line">二、請於&#123;&#123;$deadline_days&#125;&#125;日內將辦理情形回復並副知本府。</span><br><span class="line"></span><br><span class="line">【產出】</span><br><span class="line">請先輸出 JSON，緊接著輸出「正文」。兩者中間空一行。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.在目錄中新增<code>config.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;依人民陳情內容與相似公文，擬出正式可用的台灣公文。&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;execution_settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;max_tokens&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.3</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;input_variables&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user_complaint&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人民陳情的原始文字&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;similar_examples&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;相似公文片段&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;公文文別&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;函&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target_agency&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;承辦單位&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deadline_days&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;回覆期限天數&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4.設定<code>skprompt.txt</code>及<code>config.json</code> Copy 到 Output 目錄</p><p>接下來，就來看看程式如何使用<strong>prompt plugin</strong>, 如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.Plugins.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line">OpenAIPromptExecutionSettings settings = <span class="keyword">new</span>() &#123; ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions &#125;;</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 註冊 plugin</span></span><br><span class="line"><span class="keyword">var</span> prompts = kernel.CreatePluginFromPromptDirectory(<span class="string">&quot;Prompts&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fun = prompts[<span class="string">&quot;ComposeGovDoc&quot;</span>];</span><br><span class="line"><span class="comment">// 民眾陳情內容</span></span><br><span class="line"><span class="keyword">var</span> userMessage = <span class="string">@&quot;陳情人:陳芊城陳述，在114年7月1日，在台北市林森北路52號巷口路燈不亮&quot;</span>;</span><br><span class="line"><span class="comment">// 透過 RAG 取出相似的公文內容</span></span><br><span class="line"><span class="keyword">var</span> ragResult = <span class="string">@&quot;主旨：關於民眾反映里內路燈故障一案，請查照。</span></span><br><span class="line"><span class="string">說明：</span></span><br><span class="line"><span class="string">一、依據民眾於113年9月1日陳情台北市承德路三段199號巷口路燈不亮。</span></span><br><span class="line"><span class="string">二、經查現場路燈編號A12、A13不亮。</span></span><br><span class="line"><span class="string">辦法：請工務課儘速派員檢修，完成後回復。&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arguments = <span class="keyword">new</span> KernelArguments</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="string">&quot;user_complaint&quot;</span>] = userMessage,</span><br><span class="line">    [<span class="string">&quot;similar_examples&quot;</span>] = ragResult,</span><br><span class="line">    [<span class="string">&quot;doc_type&quot;</span>] = <span class="string">&quot;函&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;target_agency&quot;</span>] = <span class="string">&quot;工務課&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;deadline_days&quot;</span>] = <span class="string">&quot;14&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 呼叫並傳入參數</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> kernel.InvokeAsync(fun,  arguments);</span><br><span class="line">Console.WriteLine(result);</span><br></pre></td></tr></table></figure><p>輸出結果如下:</p><img src="/2025/09/02/semantic-kernel-plugins-csharp/03.png" class="" title="File-based Prompt"><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p><a href="https://learn.microsoft.com/en-us/semantic-kernel/concepts/enterprise-readiness/filters?pivots=programming-language-csharp">Semantic Kernel Filters</a>提供三種類型:<br>Function Invocation Filter: 每次呼叫 <strong>KernelFunction</strong> 時，都會執行此過濾器。<br>Prompt Render Filter: 在將 prompt 給 AI 前，會執行此過濾器。<br>Auto Function Invocation Filter: 與<code>Function Invocation Filter</code>類似，提供額外的上下文信息(包含聊天歷史記錄、所有待執行函數的列表以及迭代計數器)。它還允許終止自動函數呼叫過程(<code>context.Terminate = true;</code>)<br>接下來使用<code>Function Invocation Filter</code>的程式碼會模擬一個對話流程，當 AI 試圖呼叫 ChangePrice 函式時，我們的 ApprovalFilter 會被觸發，並詢問使用者是否同意執行。<br>修改價格的 Plugin 及 Filter 如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookManagementPlugin</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">KernelFunction</span>]</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;Change the price of a book in the database &quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangePrice</span>(<span class="params">[Description(<span class="string">&quot;The book id to update&quot;</span></span>)] <span class="built_in">int</span> bookId, [<span class="title">Description</span>(<span class="params"><span class="string">&quot;The new price&quot;</span></span>)] <span class="built_in">int</span> newPrice)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//update the price of the book in the database</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApprovalFilter</span>() : IFunctionInvocationFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnFunctionInvocationAsync</span>(<span class="params">FunctionInvocationContext context, Func&lt;FunctionInvocationContext, Task&gt; next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.Function.PluginName == <span class="string">&quot;BookManagementPlugin&quot;</span> &amp;&amp; context.Function.Name == <span class="string">&quot;ChangePrice&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;系統想要更新書本的價格，您要繼續嗎？ （Y/N）&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> shouldProceed = Console.ReadLine()!;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (shouldProceed != <span class="string">&quot;Y&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                context.Result = <span class="keyword">new</span> FunctionResult(context.Result, <span class="string">&quot;價格變動未獲得批准&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console 程式如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.Plugins.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 註冊 Plugin</span></span><br><span class="line">kernelBuilder.Plugins.AddFromType&lt;BookManagementPlugin&gt;();</span><br><span class="line"><span class="comment">// 加入 ApprovalFilter</span></span><br><span class="line">kernelBuilder.Services.AddSingleton&lt;IFunctionInvocationFilter, ApprovalFilter&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line">OpenAIPromptExecutionSettings settings = <span class="keyword">new</span>() &#123; ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions &#125;;</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line"><span class="keyword">var</span> chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line">ChatHistory chatHistory = <span class="keyword">new</span>();</span><br><span class="line"><span class="built_in">string</span> userMessage = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="keyword">while</span> (userMessage != <span class="string">&quot;quit&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Enter your question:&quot;</span>);</span><br><span class="line">    userMessage = Console.ReadLine();</span><br><span class="line">    chatHistory.AddUserMessage(userMessage);</span><br><span class="line">    <span class="keyword">var</span> assistantMessage = <span class="keyword">await</span> chatCompletionService.GetChatMessageContentAsync(chatHistory, settings, kernel);</span><br><span class="line">    Console.WriteLine(assistantMessage);</span><br><span class="line">    chatHistory.Add(assistantMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>執行過程如下:</p><img src="/2025/09/02/semantic-kernel-plugins-csharp/04.png" class="" title="IFunctionInvocationFilter"><h3 id="Using-OpenAPI-Plugins"><a href="#Using-OpenAPI-Plugins" class="headerlink" title="Using OpenAPI Plugins"></a>Using OpenAPI Plugins</h3><p>企業可能有寫好的 API，只要有 OpenAPI 規格檔，用於描述其 API 的功能、參數、驗證方式等細節。Semantic Kernel 可以直接讀取這些規格檔，自動生成對應的函數，省下額外開發 AI Plugin 的時間。<br>以下以預設天氣 API 來測試， 1.加入 <code>Microsoft.SemanticKernel.Plugins.OpenApi</code> Nuget 套件 2.使用 <code>kernel.ImportPluginFromOpenApiAsync</code> 匯入 API 3.詢問 <code>今天天氣的如何</code> 就會呼叫 <code>GetWeatherForecast</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.Plugins.Core;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.Plugins.OpenApi;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line"><span class="comment">// 註冊 OpenAPI Plugin</span></span><br><span class="line"><span class="keyword">await</span> kernel.ImportPluginFromOpenApiAsync(</span><br><span class="line">     pluginName: <span class="string">&quot;weatherforecast&quot;</span>,</span><br><span class="line">     uri: <span class="keyword">new</span> Uri(<span class="string">&quot;http://localhost:5129/openapi/v1.json&quot;</span>),</span><br><span class="line">               executionParameters: <span class="keyword">new</span> OpenApiFunctionExecutionParameters()</span><br><span class="line">               &#123;</span><br><span class="line">                   EnablePayloadNamespacing = <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">    );</span><br><span class="line">OpenAIPromptExecutionSettings settings = <span class="keyword">new</span>() &#123; ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions &#125;;</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.WriteLine(<span class="keyword">await</span> kernel.InvokePromptAsync(<span class="string">&quot;今天天氣的如何&quot;</span>, <span class="keyword">new</span>(settings)));</span><br><span class="line">Console.ReadLine();</span><br></pre></td></tr></table></figure><p>結果會輸出類似的結果 <code>根據今天的天氣預報，今天的氣溫約為23°C，天氣較冷。請注意保暖。</code></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本章中，我們深入探索了 Semantic Kernel 的核心能力之一：Plugins。</p><p>我們從實例中見證了 Plugins 如何突破大型語言模型 (LLM) 的資訊限制，讓 AI 不僅能回答問題，更能與外部世界互動。無論是處理內建的複雜型別參數、利用現成的內建 Plugins，或是透過 File-based Prompts 來定義客製化的行為，Semantic Kernel 都提供了一套簡潔而強大的框架。此外，我們也了解了如何使用 Filters 來為 AI 流程加入額外的邏輯控制，以及如何將既有的 OpenAPI 規格快速轉化為可用的 Plugins，大幅提升開發效率。</p><p>透過這些功能，Semantic Kernel 賦予了我們為 LLM 打造專屬工具的能力，使 AI 應用程式變得更加智慧、靈活且具備處理現實世界任務的能力。<br>在下一章中，我們將深入探討 Semantic Kernel 如何讓你輕鬆地在不同的 LLM 服務提供者（例如 OpenAI、Azure OpenAI 等）之間切換，而無需修改核心程式碼。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/microsoft/semantic-kernel">Semantic Kernel</a><br><a href="https://learn.microsoft.com/en-us/semantic-kernel/concepts/enterprise-readiness/filters?pivots=programming-language-csharp">Semantic Kernel Filters</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在上一章中，我們初探了 Semantic Kernel 的核心概念，並學習如何透過 Kernel 輕鬆地將 AI 服務整合到你的 C# 應用</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="LLM" scheme="https://rainmakerho.github.io/tags/LLM/"/>
    
    <category term="人工智慧" scheme="https://rainmakerho.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7/"/>
    
    <category term="Semantic Kernel Plugins" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel-Plugins/"/>
    
    <category term="AI Application" scheme="https://rainmakerho.github.io/tags/AI-Application/"/>
    
    <category term="Native Functions" scheme="https://rainmakerho.github.io/tags/Native-Functions/"/>
    
    <category term="File-based Prompts" scheme="https://rainmakerho.github.io/tags/File-based-Prompts/"/>
    
    <category term="OpenAPI" scheme="https://rainmakerho.github.io/tags/OpenAPI/"/>
    
    <category term="Filters" scheme="https://rainmakerho.github.io/tags/Filters/"/>
    
    <category term="工具呼叫" scheme="https://rainmakerho.github.io/tags/%E5%B7%A5%E5%85%B7%E5%91%BC%E5%8F%AB/"/>
    
    <category term="插件開發" scheme="https://rainmakerho.github.io/tags/%E6%8F%92%E4%BB%B6%E9%96%8B%E7%99%BC/"/>
    
  </entry>
  
  <entry>
    <title>使用 C# 和 Semantic Kernel 打造 AI 應用：第一章 - 核心概念與 Plugins 介紹</title>
    <link href="https://rainmakerho.github.io/2025/08/31/using-csharp-semantic-kernel-build-ai-apps-chapter-1-concepts-plugins/"/>
    <id>https://rainmakerho.github.io/2025/08/31/using-csharp-semantic-kernel-build-ai-apps-chapter-1-concepts-plugins/</id>
    <published>2025-08-31T12:23:45.000Z</published>
    <updated>2025-08-31T12:40:59.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>隨著大型語言模型 (LLM) 的崛起，人工智慧已不再是遙不可及的技術，而是正在深刻地影響著每個企業與工作流程。若想在 AI 浪潮中保持領先，最有效的方式就是將其應用於日常業務，實現流程自動化。</p><p>想像一下，過去需要耗費大量人力進行的客戶資料分類工作，比如綜合比對客戶的產業別、上市櫃資訊、營運項目，甚至是網路搜尋結果，現在都能藉由 AI 輕鬆完成。你只需上傳一份 Excel 文件，AI 便能自動處理大部分分類工作，員工只需專注於處理少數 AI 無法判斷的例外情況，大幅提升效率。</p><p>要將 AI 整合到現有應用程式 (AP) 中，我們可以透過多種方式，例如呼叫 AI 工具的 API，但當需求更複雜、需要更精確地控制整個過程時，直接呼叫 LLM 的 API 成了更好的選擇。<br>不過，這也帶來了新的挑戰：不同的 LLM 提供者 (如 OpenAI、Azure OpenAI) 有各自的 API 規範，開發者需要處理各種不同的參數設定、端點 (Endpoint) 和模型名稱 (Model Name)。<br>這種差異性不僅增加開發的複雜度，也讓未來切換或擴充 LLM 服務變得困難。</p><p>這正是 <a href="https://github.com/microsoft/semantic-kernel">Semantic Kernel</a> 派上用場的時候。作為一個由微軟開源的 SDK，Semantic Kernel 提供了一套統一且強大的框架，能夠協助開發者輕鬆、靈活地管理與 LLM 的互動。<br>它不僅簡化了與不同 LLM 服務的整合過程，更讓開發者能專注於打造具備「語義」理解能力的應用程式，而不用被底層技術細節所困擾。</p><p>在這個系列文章中，我們將深入探索如何使用 C# 和 Semantic Kernel，一步步構建具備 AI 智慧的應用。<br>我們將從基礎概念開始，逐步實作各種功能，帶你親身體驗 Semantic Kernel 如何幫助你輕鬆將 AI 能力整合至你的應用程式中。</p><h3 id="Semantic-Kernel"><a href="#Semantic-Kernel" class="headerlink" title="Semantic Kernel"></a>Semantic Kernel</h3><p>Semantic Kernel 是一個可擴充的輕量級的 .NET AI SDK，目標是讓 AP 可以輕易地與 AI 整合。<br>提供一個統一的介面，讓開發者可以用相同的方式去使用不同的 AI 服務(text generation, image geration, chat…)，而不用在意每個服務的細節差異。<br>要快速掌握 Semantic Kernel 的核心，可以從它的六個主要元件開始理解：Kernel、AI Service Connectors、Functions and Plugins、Prompts and Prompt Templates、Memory 和 Filters。<br>以下我們建立 Console 程式來看看如何使用這些元件，</p><p>1.建立 Console App</p><p>2.加入 <code>Microsoft.SemanticKernel</code> Nuget 套件</p><p>3.準備好 OpenAI(或 AOAI, …) 的 API key</p><h3 id="Kernel-amp-AI-Service-Connectors"><a href="#Kernel-amp-AI-Service-Connectors" class="headerlink" title="Kernel &amp; AI Service Connectors"></a>Kernel &amp; AI Service Connectors</h3><p>在 Semantic Kernel 的世界裡，Kernel 扮演著核心中樞的角色。它不只負責串接應用程式和 AI 模型，更是所有 AI 服務與插件的協調者。想像它是一個大型工具箱，裡面裝滿了各式各樣的 AI 功能；Kernel 的任務就是確保這些工具隨時可用，讓開發者能隨心所欲地取用。<br>以下透過 <code>IKernelBuilder</code> 來建立 <code>Kernel</code> 後，讓使用者輸入訊息來與 LLM 對話，如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line"><span class="built_in">string</span> userMessage = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="comment">// 讓使用者輸入訊息來與 LLM 對話</span></span><br><span class="line"><span class="keyword">while</span>(userMessage != <span class="string">&quot;quit&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Enter you message:&quot;</span>);</span><br><span class="line">    userMessage = Console.ReadLine();</span><br><span class="line">    Console.WriteLine(<span class="keyword">await</span> kernel.InvokePromptAsync(userMessage));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/08/31/using-csharp-semantic-kernel-build-ai-apps-chapter-1-concepts-plugins/01.png" class="" title="kernel.InvokePromptAsync"><p>接下來，讓使用者輸入訊息來產生圖片，如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.TextToImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> imageModelId = <span class="string">&quot;dall-e-3&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI Text to image 服務</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable SKEXP0010, SKEXP0001</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAITextToImage(modelId: imageModelId, apiKey: apikey)</span><br><span class="line">            .Build();</span><br><span class="line"><span class="comment">// 取得 TextToImage Service</span></span><br><span class="line">ITextToImageService imageService = kernel.GetRequiredService&lt;ITextToImageService&gt;();</span><br><span class="line"><span class="built_in">string</span> prompt =</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">創建一幅逼真的圖片，描繪RM的咖啡店。這家店擁有迷人的鄉村外觀，紅磚外牆、大型玻璃窗，和在入口上方懸掛的經典木製招牌，</span></span><br><span class="line"><span class="string">上面用優雅的手繪字體寫著「RM&#x27;s Coffee Shop」。入口處有一道復古風格的木製門，上面有一個小鈴鐺，以及門外顯示今日特價的黑板招牌，</span></span><br><span class="line"><span class="string">包括「柚香拿鐵」、「櫻桃咖啡」和「南瓜咖啡」。</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">await</span> imageService.GenerateImageAsync(prompt, <span class="number">1792</span>, <span class="number">1024</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Image URL: &quot;</span> + image);</span><br></pre></td></tr></table></figure><img src="/2025/08/31/using-csharp-semantic-kernel-build-ai-apps-chapter-1-concepts-plugins/02.png" class="" title="GenerateImageAsync"><h3 id="Functions-and-Plugins"><a href="#Functions-and-Plugins" class="headerlink" title="Functions and Plugins"></a>Functions and Plugins</h3><p>大型語言模型 (LLM) 雖然強大，但它們的知識庫僅限於訓練時所使用的資料。<br>這意味著，LLM 無法存取即時資訊，也無法執行外部系統中的特定操作，例如查詢資料庫、發送電子郵件或進行外部 API 呼叫。<br>這使得單純使用 LLM 的應用程式難以處理需要最新資訊或與外部世界互動的任務。<br>就像當我在上面圖片中，輸入<code>今天日期是?</code> LLM 回答是 <code>今天的日期是2023年6月13日。</code></p><p>Semantic Kernel 提供了一套函數 (Functions) 和插件 (Plugins)，專門用來解決這個問題。<br>你可以將這些函數視為 LLM 的「工具」或「外掛」，讓 LLM 能夠：</p><ul><li>存取即時或私有資料：例如，查詢你的內部產品庫存、客戶資料，或是最新的天氣資訊。</li><li>執行特定操作：如自動發送通知郵件、在客戶關係管理 (CRM) 系統中創建新記錄，或在網路上搜尋特定內容。</li></ul><p>這些函數讓 LLM 不再受限於其訓練資料，而是能像一個聰明的代理人，在需要時調用適當的工具來完成任務。<br>以下我們就來建立一個<strong>Plugin</strong>，Function 設定<code>[KernelFunction]</code>屬性，並透過<code>Description</code>來說<strong>Function</strong>的用途，如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimePlugin</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">KernelFunction</span>]</span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;取得現在UTC的日期及時間&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetCurrentDateAndTime</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DateTime.UtcNow.ToString(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後將它 Import 到 Kernel 中，並設定 LLM 自動執行 Function ，並詢問 LLM <code>今天日期是?</code>，就會回答正確的日期，而不再是之前的<code>2023年6月13日</code>，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;你的 openai api key&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> modelId = <span class="string">&quot;gpt-4.1&quot;</span>;</span><br><span class="line"><span class="comment">// 建立 KernelBuilder</span></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">// 加入 OpenAI ChatCompletion 服務</span></span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder</span><br><span class="line">            .AddOpenAIChatCompletion(modelId, apikey)</span><br><span class="line">            .Build();</span><br><span class="line"><span class="comment">// 註冊 plugin</span></span><br><span class="line">kernel.ImportPluginFromType&lt;TimePlugin&gt;();</span><br><span class="line">OpenAIPromptExecutionSettings settings = <span class="keyword">new</span>() &#123; ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions &#125;;</span><br><span class="line">Console.OutputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.InputEncoding = UTF8Encoding.UTF8;</span><br><span class="line">Console.WriteLine(<span class="keyword">await</span> kernel.InvokePromptAsync(<span class="string">&quot;今天日期是? &quot;</span>, <span class="keyword">new</span>(settings)));</span><br></pre></td></tr></table></figure><p>Semantic Kernel 在呼叫 LLM 之前，會將你註冊的 Plugins 描述（包含其名稱、描述和參數）序列化後，作為提示 (prompt) 的一部分傳送給 LLM。如果你的 Plugins 數量過多或描述過於冗長，會佔用大量的提示令牌 (token)，增加成本並可能導致提示被截斷。<br>每次呼叫 LLM 時，建議最多只使用 10 到 20 個。若超過這個數量，模型會難以準確地選擇和使用正確的工具，容易產生錯誤或不穩定的行為。</p><ul><li>註: Funciton Calling 的過程，可以參考 <code>https://platform.openai.com/docs/guides/function-calling</code> 的圖片來了解。</li></ul><img src="https://cdn.openai.com/API/docs/images/function-calling-diagram-steps.png" width="50%" height="50%" ><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>在本篇文章中，我們一起探索了 Semantic Kernel 的核心概念，並透過實際範例，體驗了如何使用 Kernel 輕鬆串接多種 AI 服務（如文字生成與圖片生成）。<br>我們也看到，藉由 Plugins 如何突破 LLM 的資訊限制，讓 AI 能存取外部資料並執行真實世界的任務，將其從一個『資訊庫』轉變為一個『智慧代理人』。</p><p>在下一篇，我們將會深入探討 Plugins 的細節，包括如何建立和使用內建的 Plugins，以及如何利用 File-based Prompt Functions，讓你的應用程式具備更強大的語義理解與自動化能力。敬請期待！</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/microsoft/semantic-kernel">Semantic Kernel</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;隨著大型語言模型 (LLM) 的崛起，人工智慧已不再是遙不可及的技術，而是正在深刻地影響著每個企業與工作流程。若想在 AI 浪潮中保持領先，</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
    <category term="Plugins" scheme="https://rainmakerho.github.io/tags/Plugins/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="OpenAI" scheme="https://rainmakerho.github.io/tags/OpenAI/"/>
    
    <category term="LLM" scheme="https://rainmakerho.github.io/tags/LLM/"/>
    
    <category term="AI 應用" scheme="https://rainmakerho.github.io/tags/AI-%E6%87%89%E7%94%A8/"/>
    
    <category term="開源 SDK" scheme="https://rainmakerho.github.io/tags/%E9%96%8B%E6%BA%90-SDK/"/>
    
    <category term="核心概念" scheme="https://rainmakerho.github.io/tags/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    <category term="語義核心" scheme="https://rainmakerho.github.io/tags/%E8%AA%9E%E7%BE%A9%E6%A0%B8%E5%BF%83/"/>
    
    <category term="程式開發" scheme="https://rainmakerho.github.io/tags/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    <category term="人工智慧" scheme="https://rainmakerho.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7/"/>
    
    <category term="函式呼叫" scheme="https://rainmakerho.github.io/tags/%E5%87%BD%E5%BC%8F%E5%91%BC%E5%8F%AB/"/>
    
  </entry>
  
  <entry>
    <title>透過 Microsoft Graph API 取得 Teams 線上會議文字記錄完整教學</title>
    <link href="https://rainmakerho.github.io/2025/08/21/microsoft-graph-api-get-teams-online-meeting-transcript/"/>
    <id>https://rainmakerho.github.io/2025/08/21/microsoft-graph-api-get-teams-online-meeting-transcript/</id>
    <published>2025-08-21T01:16:52.000Z</published>
    <updated>2025-08-21T01:46:44.070Z</updated>
    
    <content type="html"><![CDATA[<p>在 Teams 中啟用會議錄影時，系統同時也會產生會議的文字記錄 (Transcript)。<br>這些文字記錄不僅能協助參與者回顧內容，還能交給 GPT 或其他工具產生更完整的會議紀錄。<br>一般情況下，只有會議主持人才能手動下載這些文字記錄。<br>那麼，是否能讓應用程式自動存取並下載會議文字記錄呢？本文將逐步示範實作方式。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h5 id="1-註冊要存取的-App"><a href="#1-註冊要存取的-App" class="headerlink" title="1.註冊要存取的 App"></a>1.註冊要存取的 App</h5><p>由於必須透過 AP 存取，因此需先註冊一個 Azure AD App。完成後建立 Client Secret，並保存其 Value，稍後將用於取得存取 Token。詳細可以參考<a href="https://rainmakerho.github.io/2022/04/29/teams-app-access-meetings-behalf-user/">Teams App 代替使用者建立線上會議，讓該使用者為會議主持人</a>的說明來註冊 App。</p><h4 id="2-設定-APP-需要的權限"><a href="#2-設定-APP-需要的權限" class="headerlink" title="2.設定 APP 需要的權限"></a>2.設定 APP 需要的權限</h4><p>需要 Microsoft Graph API, Type 為 Application 的以下權限，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User.ReadBasic.All</span><br><span class="line">Calendars.ReadBasic.All</span><br><span class="line">OnlineMeetings.Read.All</span><br><span class="line">OnlineMeetingTranscript.Read.All</span><br><span class="line">Team.ReadBasic.All</span><br><span class="line">TeamSettings.Read.All</span><br></pre></td></tr></table></figure><p>設定完成後，請記得該 Azure 管理者 按一下 <strong>Grant admin consent for …</strong> 允許 App 可以用這些 API，如下圖所示:</p><img src="/2025/08/21/microsoft-graph-api-get-teams-online-meeting-transcript/01.png" class="" title="api permissons"><h3 id="Console-程式碼實作"><a href="#Console-程式碼實作" class="headerlink" title="Console 程式碼實作"></a>Console 程式碼實作</h3><p>以下為 C# Console 的程式碼，先設定需要的變數，例如 clientId, clientSecret …</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Dynamic;</span><br><span class="line"><span class="keyword">using</span> System.Net.Http.Headers;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json.Nodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">&quot;&#123;Application (client) ID&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> clientSecret = <span class="string">&quot;&#123;clientSecret&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> tenantId = <span class="string">&quot;&#123;Directory (tenant) ID&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> userPrincipalName = <span class="string">&quot;&#123;通常是email&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.OutputEncoding = Encoding.UTF8;</span><br><span class="line"><span class="keyword">var</span> contentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-取得-App-的-access-token"><a href="#3-取得-App-的-access-token" class="headerlink" title="3.取得 App 的 access token"></a>3.取得 App 的 access token</h4><p>先取得 App 的 access token，用於呼叫 Graph API</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getTokenUrl = <span class="string">$&quot;https://login.microsoftonline.com/<span class="subst">&#123;tenantId&#125;</span>/oauth2/v2.0/token&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> authBody = <span class="string">$&quot;grant_type=client_credentials&amp;client_id=<span class="subst">&#123;clientId&#125;</span>&amp;client_secret=<span class="subst">&#123;clientSecret&#125;</span>&amp;scope=https://graph.microsoft.com/.default&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> authResponse = <span class="keyword">await</span> client.PostAsync(getTokenUrl, <span class="keyword">new</span> StringContent(authBody, Encoding.UTF8, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>));</span><br><span class="line"><span class="comment">//取得 AccessToken</span></span><br><span class="line"><span class="keyword">var</span> authResult = <span class="keyword">await</span> authResponse.Content.ReadAsStringAsync();</span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> JsonSerializerOptions</span><br><span class="line">&#123;</span><br><span class="line">    PropertyNameCaseInsensitive = <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dynamic</span> tokenResponse = JsonSerializer.Deserialize&lt;ExpandoObject&gt;(authResult, options);</span><br><span class="line"><span class="keyword">var</span> authObj = JsonNode.Parse(authResult);</span><br><span class="line">accessToken = (<span class="built_in">string</span>)authObj[<span class="string">&quot;access_token&quot;</span>];</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;======== access Token =========&quot;</span>);</span><br><span class="line">Console.WriteLine(accessToken);</span><br></pre></td></tr></table></figure><h4 id="4-取得使用者的-AAD-UserId"><a href="#4-取得使用者的-AAD-UserId" class="headerlink" title="4.取得使用者的 AAD UserId"></a>4.取得使用者的 AAD UserId</h4><p>呼叫 API 取得使用者的 Azure AD User Id (<code>User.ReadBasic.All 權限</code>)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUserUrl = <span class="string">$&quot;https://graph.microsoft.com/v1.0/users/<span class="subst">&#123;userPrincipalName&#125;</span>&quot;</span>;</span><br><span class="line">client.DefaultRequestHeaders.Accept.Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(contentType));</span><br><span class="line">client.DefaultRequestHeaders.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">$&quot;Bearer <span class="subst">&#123;accessToken&#125;</span>&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> userResponse = <span class="keyword">await</span> client.GetAsync(getUserUrl);</span><br><span class="line"><span class="keyword">var</span> userResult = <span class="keyword">await</span> userResponse.Content.ReadAsStringAsync();</span><br><span class="line"><span class="keyword">var</span> userObj = JsonNode.Parse(userResult);</span><br><span class="line"><span class="keyword">var</span> userId = (<span class="built_in">string</span>)userObj[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">Console.WriteLine(<span class="string">&quot;======== Azure AD User Id =========&quot;</span>);</span><br><span class="line">Console.WriteLine(userId);</span><br></pre></td></tr></table></figure><ul><li>註: 使用者必需要是會議的參與者，否則會取不到資料</li></ul><h4 id="5-依會議主旨來取得行事曆事件"><a href="#5-依會議主旨來取得行事曆事件" class="headerlink" title="5.依會議主旨來取得行事曆事件"></a>5.依會議主旨來取得行事曆事件</h4><p>依會議主旨查詢 Events，並取得 Join URL</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchSubject = <span class="string">&quot;TID&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> getEventsBySubjectFilterUrl = <span class="string">$&quot;https://graph.microsoft.com/v1.0/users/<span class="subst">&#123;userId&#125;</span>/events?$filter=startswith(subject, &#x27;<span class="subst">&#123;searchSubject&#125;</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="comment">//也可以用 日期 Filter</span></span><br><span class="line"><span class="comment">//var getEventsByDateFilterUrl = $&quot;https://graph.microsoft.com/v1.0/users/&#123;userId&#125;/events?$filter=start/dateTime ge &#x27;2025/03/19&#x27; and start/dateTime le &#x27;2025/03/20&#x27; &quot;;</span></span><br><span class="line"><span class="keyword">var</span> eventsResponse = <span class="keyword">await</span> client.GetAsync(getEventsBySubjectFilterUrl);</span><br><span class="line"><span class="keyword">var</span> eventsResult = <span class="keyword">await</span> eventsResponse.Content.ReadAsStringAsync();</span><br><span class="line"><span class="keyword">var</span> eventsObj = JsonNode.Parse(eventsResult);</span><br><span class="line"><span class="keyword">var</span> eventList = eventsObj[<span class="string">&quot;value&quot;</span>].AsArray();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;======== Events =========&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> eventItem <span class="keyword">in</span> eventList)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> onlineMeeting = eventItem[<span class="string">&quot;onlineMeeting&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (onlineMeeting != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> subject = eventItem[<span class="string">&quot;subject&quot;</span>].ToString();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;subject&#125;</span>:<span class="subst">&#123;onlineMeeting[<span class="string">&quot;joinUrl&quot;</span>].ToString()&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-透過線上會議的-Link-來取得線上會議的-Id"><a href="#6-透過線上會議的-Link-來取得線上會議的-Id" class="headerlink" title="6.透過線上會議的 Link 來取得線上會議的 Id"></a>6.透過線上會議的 Link 來取得線上會議的 Id</h4><p>如果一開始就有線上會議的 Link，就可以省略<strong>4.依會議主旨來取得行事曆事件</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> joinWebUrl = <span class="string">@&quot;https://teams.microsoft.com/l/meetup-join/.....&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> getOnlineMeetingsUrl = <span class="string">$&quot;https://graph.microsoft.com/v1.0/users/<span class="subst">&#123;userId&#125;</span>/onlineMeetings?$filter=JoinWebUrl eq &#x27;<span class="subst">&#123;joinWebUrl&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> onlineMeetingsResponse = <span class="keyword">await</span> client.GetAsync(getOnlineMeetingsUrl);</span><br><span class="line"><span class="keyword">var</span> onlineMeetingsResult = <span class="keyword">await</span> onlineMeetingsResponse.Content.ReadAsStringAsync();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;======== Online Meeting Id =========&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> meetingsObj = JsonNode.Parse(onlineMeetingsResult);</span><br><span class="line"><span class="keyword">var</span> meetingId = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//onlineMeetingResult</span></span><br><span class="line"><span class="keyword">if</span> (meetingsObj[<span class="string">&quot;error&quot;</span>] != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(meetingsObj[<span class="string">&quot;error&quot;</span>][<span class="string">&quot;message&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    meetingId = (<span class="built_in">string</span>)meetingsObj[<span class="string">&quot;value&quot;</span>][<span class="number">0</span>][<span class="string">&quot;id&quot;</span>];</span><br><span class="line">    Console.WriteLine(meetingId);</span><br><span class="line">    Console.WriteLine((<span class="built_in">string</span>)meetingsObj[<span class="string">&quot;value&quot;</span>][<span class="number">0</span>][<span class="string">&quot;subject&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>註: 如果出現<code>No application access policy found for this app.</code>的錯誤，請依<a href="https://learn.microsoft.com/en-us/graph/cloud-communication-online-meeting-application-access-policy">Allow applications to access online meetings on behalf of a user</a>方式來設定讓 App 有權限去執行</li><li>註: 建議一開始先設定測試的使用者比較快生效，例如<code>Grant-CsApplicationAccessPolicy -PolicyName &quot;teams-meetings-policy&quot; -Identity &quot;&#123;userId&#125;&quot;</code>，如果設定<strong>Global</strong>需要等蠻久一段時間(超過 30 分鐘)才會生效</li></ul><h4 id="7-取得線上會議的文字記錄-多筆-的資訊"><a href="#7-取得線上會議的文字記錄-多筆-的資訊" class="headerlink" title="7.取得線上會議的文字記錄(多筆)的資訊"></a>7.取得線上會議的文字記錄(多筆)的資訊</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getMeetingTranscriptsUrl = <span class="string">$&quot;https://graph.microsoft.com/v1.0/users/<span class="subst">&#123;userId&#125;</span>/onlineMeetings/<span class="subst">&#123;meetingId&#125;</span>/transcripts&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> meetingTranscriptsResponse = <span class="keyword">await</span> client.GetAsync(getMeetingTranscriptsUrl);</span><br><span class="line"><span class="keyword">var</span> meetingTranscriptsResult = <span class="keyword">await</span> meetingTranscriptsResponse.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> meetingTranscriptsObj = JsonNode.Parse(meetingTranscriptsResult);</span><br><span class="line"><span class="keyword">var</span> transcriptsCount = meetingTranscriptsObj[<span class="string">&quot;@odata.count&quot;</span>];</span><br><span class="line">meetingTranscriptsObj[<span class="string">&quot;value&quot;</span>].AsArray();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Total Transcripts Count:<span class="subst">&#123;transcriptsCount&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//the latest transcript</span></span><br><span class="line"><span class="keyword">var</span> lastTranscript = meetingTranscriptsObj[<span class="string">&quot;value&quot;</span>].AsArray().LastOrDefault();</span><br><span class="line"><span class="keyword">var</span> lastTranscriptId = (<span class="built_in">string</span>)lastTranscript[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>線上會議的文字記錄可能會有多筆，可以依<code>createdDateTime</code>過濾所需的記錄。本文示範取最後一筆作為測試。</p><h4 id="8-取得最後一筆線上會議的文字記錄"><a href="#8-取得最後一筆線上會議的文字記錄" class="headerlink" title="8.取得最後一筆線上會議的文字記錄"></a>8.取得最後一筆線上會議的文字記錄</h4><p>有了 TranscriptId 就可以取得文字記錄，格式選擇<code>text/vtt</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> meetingTranscriptUrl = <span class="string">$&quot;https://graph.microsoft.com/v1.0/users/<span class="subst">&#123;userId&#125;</span>/onlineMeetings/<span class="subst">&#123;meetingId&#125;</span>/transcripts(&#x27;<span class="subst">&#123;lastTranscriptId&#125;</span>&#x27;)/content?$format=text/vtt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> meetingTranscriptResponse = <span class="keyword">await</span> client.GetAsync(meetingTranscriptUrl);</span><br><span class="line"><span class="keyword">var</span> meetingTranscriptResult = <span class="keyword">await</span> meetingTranscriptResponse.Content.ReadAsStringAsync();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;=== Transcript ===============&quot;</span>);</span><br><span class="line">Console.WriteLine(meetingTranscriptResult.Substring(<span class="number">0</span>, <span class="number">500</span>));</span><br></pre></td></tr></table></figure><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>綜合以上步驟，我們可以透過 Microsoft Graph API 依主旨或日期找到會議事件，取得 Join URL，再進一步查詢 OnlineMeeting Id，最後存取該會議的 Transcript。<br>此流程能協助開發者自動化取得 Teams 線上會議的逐字稿，進一步應用於會議紀錄、智慧摘要或 NLP 分析。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2022/04/29/teams-app-access-meetings-behalf-user/">Teams App 代替使用者建立線上會議，讓該使用者為會議主持人</a><br><a href="https://learn.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http">Microsoft Graph API Get a user</a><br><a href="https://learn.microsoft.com/en-us/graph/api/onlinemeeting-get?view=graph-rest-1.0&tabs=http">Microsoft Graph API Get onlineMeeting</a><br><a href="https://learn.microsoft.com/en-us/graph/cloud-communication-online-meeting-application-access-policy">Allow applications to access online meetings on behalf of a user</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Teams 中啟用會議錄影時，系統同時也會產生會議的文字記錄 (Transcript)。&lt;br&gt;這些文字記錄不僅能協助參與者回顧內容，還能交給 GPT 或其他工具產生更完整的會議紀錄。&lt;br&gt;一般情況下，只有會議主持人才能手動下載這些文字記錄。&lt;br&gt;那麼，是否能讓應用</summary>
      
    
    
    
    
    <category term="Microsoft Graph API" scheme="https://rainmakerho.github.io/tags/Microsoft-Graph-API/"/>
    
    <category term="Teams 會議記錄" scheme="https://rainmakerho.github.io/tags/Teams-%E6%9C%83%E8%AD%B0%E8%A8%98%E9%8C%84/"/>
    
    <category term="Teams Transcript" scheme="https://rainmakerho.github.io/tags/Teams-Transcript/"/>
    
    <category term="Teams 線上會議" scheme="https://rainmakerho.github.io/tags/Teams-%E7%B7%9A%E4%B8%8A%E6%9C%83%E8%AD%B0/"/>
    
    <category term="Graph API OnlineMeeting" scheme="https://rainmakerho.github.io/tags/Graph-API-OnlineMeeting/"/>
    
    <category term="Graph API Event" scheme="https://rainmakerho.github.io/tags/Graph-API-Event/"/>
    
    <category term="取得 Teams 逐字稿" scheme="https://rainmakerho.github.io/tags/%E5%8F%96%E5%BE%97-Teams-%E9%80%90%E5%AD%97%E7%A8%BF/"/>
    
    <category term="No application access policy found for this app" scheme="https://rainmakerho.github.io/tags/No-application-access-policy-found-for-this-app/"/>
    
  </entry>
  
  <entry>
    <title>GPT-4.1 與 GPT-5 API 價格比較：成本差異與使用情境解析</title>
    <link href="https://rainmakerho.github.io/2025/08/11/gpt4-1-vs-gpt5-api-pricing-comparison/"/>
    <id>https://rainmakerho.github.io/2025/08/11/gpt4-1-vs-gpt5-api-pricing-comparison/</id>
    <published>2025-08-11T02:37:22.000Z</published>
    <updated>2025-08-11T02:41:37.613Z</updated>
    
    <content type="html"><![CDATA[<p>隨著 OpenAI 推出 GPT-5，開發者在選擇模型時除了性能外，價格也是關鍵考量因素。本文將針對 <strong>GPT-4.1</strong> 與 <strong>GPT-5</strong> 的 API 計價方式，進行詳細對照與分析，幫助你在不同應用場景下作出最佳選擇。</p><hr><h2 id="1-價格對照表（每百萬-tokens-x2F-美元）"><a href="#1-價格對照表（每百萬-tokens-x2F-美元）" class="headerlink" title="1. 價格對照表（每百萬 tokens&#x2F;美元）"></a>1. 價格對照表（每百萬 tokens&#x2F;美元）</h2><table><thead><tr><th>模型</th><th>Input（輸入）</th><th>Cached Input（快取輸入）</th><th>Output（輸出）</th></tr></thead><tbody><tr><td><strong>GPT-4.1</strong></td><td>$2.00</td><td>$0.50</td><td>$8.00</td></tr><tr><td><strong>GPT-5</strong></td><td>$1.25</td><td>$0.125</td><td>$10.00</td></tr></tbody></table><blockquote><p>註：Cached Input 是指重複使用的輸入 tokens，計價更低，適合多輪對話或相似請求。</p></blockquote><hr><h2 id="2-價格差異分析"><a href="#2-價格差異分析" class="headerlink" title="2. 價格差異分析"></a>2. 價格差異分析</h2><h3 id="2-1-輸入成本"><a href="#2-1-輸入成本" class="headerlink" title="2.1 輸入成本"></a>2.1 輸入成本</h3><ul><li>GPT-5 輸入價格 <strong>比 GPT-4.1 便宜 37.5%（$1.25 vs $2.00）</strong>。</li><li>Cached Input 成本更大幅下降到 GPT-4.1 的 <strong>1&#x2F;4</strong>（$0.125 vs $0.50）。</li></ul><h3 id="2-2-輸出成本"><a href="#2-2-輸出成本" class="headerlink" title="2.2 輸出成本"></a>2.2 輸出成本</h3><ul><li>GPT-5 輸出價格 <strong>比 GPT-4.1 高 25%（$10.00 vs $8.00）</strong>。</li><li>在長輸出的情境下，GPT-4.1 可能更具成本優勢。</li></ul><hr><h2 id="3-使用情境建議"><a href="#3-使用情境建議" class="headerlink" title="3. 使用情境建議"></a>3. 使用情境建議</h2><table><thead><tr><th>使用情境</th><th>建議選擇</th><th>理由</th></tr></thead><tbody><tr><td><strong>長 prompt + 短輸出</strong></td><td>GPT-5</td><td>輸入便宜，總成本低</td></tr><tr><td><strong>短 prompt + 長輸出</strong></td><td>GPT-4.1</td><td>輸出便宜，適合生成大量文字</td></tr><tr><td><strong>多輪對話、快取重用多</strong></td><td>GPT-5</td><td>Cached Input 成本極低</td></tr></tbody></table><hr><h2 id="4-結論"><a href="#4-結論" class="headerlink" title="4. 結論"></a>4. 結論</h2><ul><li>如果你的應用場景 <strong>輸入量大、輸出量小</strong>，GPT-5 的成本優勢明顯。</li><li>如果你的應用場景 <strong>輸出文字長</strong>，GPT-4.1 可能更划算。</li><li>建議根據實際 token 使用比例，計算預估費用再決定模型選擇。</li></ul><hr><p><strong>延伸閱讀：</strong></p><ul><li><a href="https://platform.openai.com/docs/models/gpt-4.1">OpenAI GPT-4.1 官方文件</a></li><li><a href="https://platform.openai.com/docs/models/gpt-5">OpenAI GPT-5 官方文件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;隨著 OpenAI 推出 GPT-5，開發者在選擇模型時除了性能外，價格也是關鍵考量因素。本文將針對 &lt;strong&gt;GPT-4.1&lt;/strong&gt; 與 &lt;strong&gt;GPT-5&lt;/strong&gt; 的 API 計價方式，進行詳細對照與分析，幫助你在不同應用場景下作出最佳</summary>
      
    
    
    
    
    <category term="OpenAI" scheme="https://rainmakerho.github.io/tags/OpenAI/"/>
    
    <category term="GPT-4.1" scheme="https://rainmakerho.github.io/tags/GPT-4-1/"/>
    
    <category term="GPT-5" scheme="https://rainmakerho.github.io/tags/GPT-5/"/>
    
    <category term="API pricing" scheme="https://rainmakerho.github.io/tags/API-pricing/"/>
    
    <category term="token cost" scheme="https://rainmakerho.github.io/tags/token-cost/"/>
    
    <category term="AI model comparison" scheme="https://rainmakerho.github.io/tags/AI-model-comparison/"/>
    
    <category term="GPT-4.1 price" scheme="https://rainmakerho.github.io/tags/GPT-4-1-price/"/>
    
    <category term="GPT-5 price" scheme="https://rainmakerho.github.io/tags/GPT-5-price/"/>
    
    <category term="cached input" scheme="https://rainmakerho.github.io/tags/cached-input/"/>
    
    <category term="input token cost" scheme="https://rainmakerho.github.io/tags/input-token-cost/"/>
    
    <category term="output token cost" scheme="https://rainmakerho.github.io/tags/output-token-cost/"/>
    
    <category term="GPT-4.1 vs GPT-5" scheme="https://rainmakerho.github.io/tags/GPT-4-1-vs-GPT-5/"/>
    
    <category term="AI cost optimization" scheme="https://rainmakerho.github.io/tags/AI-cost-optimization/"/>
    
    <category term="GPT API" scheme="https://rainmakerho.github.io/tags/GPT-API/"/>
    
    <category term="AI pricing guide" scheme="https://rainmakerho.github.io/tags/AI-pricing-guide/"/>
    
  </entry>
  
  <entry>
    <title>C# 用 Enum + Dictionary 實作 狀態機：以會員狀態轉換為例</title>
    <link href="https://rainmakerho.github.io/2025/08/06/csharp-state-machine-enum-dictionary/"/>
    <id>https://rainmakerho.github.io/2025/08/06/csharp-state-machine-enum-dictionary/</id>
    <published>2025-08-06T09:30:35.000Z</published>
    <updated>2025-08-06T09:43:52.450Z</updated>
    
    <content type="html"><![CDATA[<p>在軟體開發中，有限狀態機（Finite State Machine, FSM） 是處理狀態之間有明確規則的轉換時非常常用的設計。例如，會員從「入會」可以轉為「暫停」或「退會」，「退會」又可以重新「入會」等。若直接用 if-else 判斷，不僅難以維護，日後擴充更易出錯。本文將介紹如何利用 C# 的 Enum 搭配 Dictionary，簡潔又彈性地實作狀態轉換邏輯。</p><h3 id="實作練習"><a href="#實作練習" class="headerlink" title="實作練習"></a>實作練習</h3><h5 id="1-用-Enum-定義所有狀態"><a href="#1-用-Enum-定義所有狀態" class="headerlink" title="1.用 Enum 定義所有狀態"></a>1.用 Enum 定義所有狀態</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MemberStatus</span><br><span class="line">&#123;</span><br><span class="line">    入會,</span><br><span class="line">    暫停,</span><br><span class="line">    退會</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-用-Dictionary-定義合法狀態轉換"><a href="#2-用-Dictionary-定義合法狀態轉換" class="headerlink" title="2.用 Dictionary 定義合法狀態轉換"></a>2.用 Dictionary 定義合法狀態轉換</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MemberStatusExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Dictionary&lt;MemberStatus, List&lt;MemberStatus&gt;&gt; AllowedTransitions = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MemberStatus.入會</span>] = [MemberStatus.暫停, MemberStatus.退會],</span><br><span class="line">        [<span class="meta">MemberStatus.暫停</span>] = [MemberStatus.入會, MemberStatus.退會],</span><br><span class="line">        [<span class="meta">MemberStatus.退會</span>] = [MemberStatus.入會]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CanTransitionTo</span>(<span class="params"><span class="keyword">this</span> MemberStatus current, MemberStatus target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> AllowedTransitions.TryGetValue(current, <span class="keyword">out</span> <span class="keyword">var</span> nexts) &amp;&amp; nexts.Contains(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = MemberStatus.入會;</span><br><span class="line"><span class="keyword">var</span> target = MemberStatus.退會;</span><br><span class="line"><span class="keyword">if</span> (current.CanTransitionTo(target))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;允許轉換&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;不允許轉換&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>這種設計方式具有以下優點：</p><ul><li>可讀性高：狀態與轉換規則集中管理，一目瞭然。</li><li>易於擴充：日後如需新增狀態，只需修改 Enum 與 Dictionary 即可。</li><li>易於維護：轉換規則變更時，不需翻找大量 if-else，只需調整字典內容。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在軟體開發中，有限狀態機（Finite State Machine, FSM） 是處理狀態之間有明確規則的轉換時非常常用的設計。例如，會員從「入會」可以轉為「暫停」或「退會」，「退會」又可以重新「入會」等。若直接用 if-else 判斷，不僅難以維護，日後擴充更易出錯。本文</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Dictionary" scheme="https://rainmakerho.github.io/tags/Dictionary/"/>
    
    <category term="Finite State Machine" scheme="https://rainmakerho.github.io/tags/Finite-State-Machine/"/>
    
    <category term="Enum" scheme="https://rainmakerho.github.io/tags/Enum/"/>
    
    <category term="狀態轉換" scheme="https://rainmakerho.github.io/tags/%E7%8B%80%E6%85%8B%E8%BD%89%E6%8F%9B/"/>
    
    <category term="會員管理" scheme="https://rainmakerho.github.io/tags/%E6%9C%83%E5%93%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>GPT 給 Image Base64 字串花費的 Token數比給 Url 還來得多很多?</title>
    <link href="https://rainmakerho.github.io/2025/07/31/gpt-image-token-calculation-url-vs-base64/"/>
    <id>https://rainmakerho.github.io/2025/07/31/gpt-image-token-calculation-url-vs-base64/</id>
    <published>2025-07-31T08:12:08.000Z</published>
    <updated>2025-08-01T02:45:09.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>有人說使用 gpt-4o, gpt-4.1 這種多模態 LLM，呼叫 ChatCompletion API 給 Image 時，<br>如果給 Image 的 Base64 內容，所花的 Token 數會比給 Image URL 來得多很多 (´− ｀) ﾝｰ (¬_¬)<br>是因為 Image 的 Base64 字串長度比 Image URL 的字串內容多很多。</p><p>所以，如果要給圖檔時，要想儘辦法讓 OpenAI API 可以讀取到圖檔，<br>也就是要允許圖檔可以讓 internet 連到 !!!</p><blockquote><p>Image 的 Base64 內容，所花的 Token 數會比給 Image URL 來得多很多，這是真的嗎?</p></blockquote><p>以下我們就來驗證看看，</p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>使用 Semantic Kernel C#，使用 <code>ImageContent</code> 分別給 url 及 file bytes (base64)，程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">IKernelBuilder builder = Kernel.CreateBuilder();</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> apikey = <span class="string">&quot;sk-請給 openai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> model = <span class="string">&quot;gpt-4.1-mini&quot;</span>;</span><br><span class="line"></span><br><span class="line">builder.AddOpenAIChatCompletion(model, apikey);</span><br><span class="line">Kernel kernel = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line"></span><br><span class="line">ChatHistory chatHistory = <span class="keyword">new</span>();</span><br><span class="line"><span class="built_in">string</span> textContent = <span class="string">&quot;請將摘要這張圖片中的文字。\r\n&quot;</span>;</span><br><span class="line"><span class="built_in">bool</span> isUseUri = <span class="literal">true</span>; <span class="comment">//or false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isUseUri)</span><br><span class="line">&#123;</span><br><span class="line">    chatHistory.Add(</span><br><span class="line">        <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            Role = AuthorRole.User,</span><br><span class="line">            Items = [</span><br><span class="line">                <span class="keyword">new</span> TextContent(textContent),</span><br><span class="line">            <span class="keyword">new</span> ImageContent(<span class="keyword">new</span> Uri(<span class="string">$&quot;<span class="subst">&#123;對外的ImageUrl&#125;</span>&quot;</span>))</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] imageBytes = File.ReadAllBytes(<span class="string">&quot;path/to/your/image.png&quot;</span>);</span><br><span class="line">    chatHistory.Add(</span><br><span class="line">        <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            Role = AuthorRole.User,</span><br><span class="line">            Items = [</span><br><span class="line">               <span class="keyword">new</span> TextContent(textContent),</span><br><span class="line">                <span class="keyword">new</span> ImageContent(imageBytes, <span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reply = <span class="keyword">await</span> chatCompletionService.GetChatMessageContentAsync(chatHistory);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">Console.WriteLine(reply.Content);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">Helper.OutputInnerContent(reply.InnerContent <span class="keyword">as</span> OpenAI.Chat.ChatCompletion);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutputInnerContent</span>(<span class="params">OpenAI.Chat.ChatCompletion innerContent</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Message role: <span class="subst">&#123;innerContent.Role&#125;</span>&quot;</span>); <span class="comment">// Available as a property of ChatMessageContent</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Message content: <span class="subst">&#123;innerContent.Content[<span class="number">0</span>].Text&#125;</span>&quot;</span>); <span class="comment">// Available as a property of ChatMessageContent</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Model: <span class="subst">&#123;innerContent.Model&#125;</span>&quot;</span>); <span class="comment">// Model doesn&#x27;t change per chunk, so we can get it from the first chunk only</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Created At: <span class="subst">&#123;innerContent.CreatedAt&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Finish reason: <span class="subst">&#123;innerContent.FinishReason&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Input tokens usage: <span class="subst">&#123;innerContent.Usage.InputTokenCount&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Output tokens usage: <span class="subst">&#123;innerContent.Usage.OutputTokenCount&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Total tokens usage: <span class="subst">&#123;innerContent.Usage.TotalTokenCount&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Refusal: <span class="subst">&#123;innerContent.Refusal&#125;</span> &quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Id: <span class="subst">&#123;innerContent.Id&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;System fingerprint: <span class="subst">&#123;innerContent.SystemFingerprint&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (innerContent.ContentTokenLogProbabilities.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Content token log probabilities:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> contentTokenLogProbability <span class="keyword">in</span> innerContent.ContentTokenLogProbabilities)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Token: <span class="subst">&#123;contentTokenLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Log probability: <span class="subst">&#123;contentTokenLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;   Top log probabilities for this token:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> topLogProbability <span class="keyword">in</span> contentTokenLogProbability.TopLogProbabilities)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Token: <span class="subst">&#123;topLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Log probability: <span class="subst">&#123;topLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;   =======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (innerContent.RefusalTokenLogProbabilities.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Refusal token log probabilities:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> refusalTokenLogProbability <span class="keyword">in</span> innerContent.RefusalTokenLogProbabilities)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Token: <span class="subst">&#123;refusalTokenLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Log probability: <span class="subst">&#123;refusalTokenLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;   Refusal top log probabilities for this token:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> topLogProbability <span class="keyword">in</span> refusalTokenLogProbability.TopLogProbabilities)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Token: <span class="subst">&#123;topLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Log probability: <span class="subst">&#123;topLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;   =======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>註: <code>new ImageContent(imageBytes, &quot;image/png&quot;)</code>中的 <code>imageBytes</code>會被轉成 Base64 字串(<a href="https://github.com/openai/openai-dotnet/blob/main/src/Utility/DataEncodingHelpers.cs#L37">DataEncodingHelpers.cs</a>)，如下程式，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreateDataUri</span>(<span class="params">BinaryData bytes, <span class="built_in">string</span> bytesMediaType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> base64Bytes = Convert.ToBase64String(bytes.ToArray());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;data:<span class="subst">&#123;bytesMediaType&#125;</span>;base64,<span class="subst">&#123;base64Bytes&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程式 Log 出來的輸入 Token 是 2,456 個，如下圖:</p><img src="/2025/07/31/gpt-image-token-calculation-url-vs-base64/02.png" class="" title="AP Log"><p>從 OpenAI 的 Log 來看，2 次的 Input Token 都是 2,456 個，跟我們程式 Log 出來的結果相同，如下圖:</p><img src="/2025/07/31/gpt-image-token-calculation-url-vs-base64/01.png" class="" title="OpenAI Log"><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>使用多模態 LLM，給 Image 的 Url 或是給 Base64 字串，所花費的 Input Token 數是<strong>一樣的</strong>!<br>差別就在於 Post API 時的 Payload 大小而已。<br>如果是企業內的圖檔，建議使用 Base64 的方式，也不會有圖檔要對外的問題。</p><p>最後，再強調一次，</p><blockquote><p>使用多模態 LLM，給 Image 的 Url 或是給 Base64 字串，所花費的 Input Token 數是<strong>一樣的</strong> (&gt;人&lt;)</p></blockquote><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/semantic-kernel/concepts/ai-services/chat-completion/multi-modal-chat-completion?pivots=programming-language-csharp">Multi-modal chat completion</a><br><a href="https://github.com/openai/openai-dotnet/blob/main/src/Utility/DataEncodingHelpers.cs#L37">DataEncodingHelpers.cs - CreateDataUri</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;有人說使用 gpt-4o, gpt-4.1 這種多模態 LLM，呼叫 ChatCompletion API 給 Image 時，&lt;br&gt;如果</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Base64" scheme="https://rainmakerho.github.io/tags/Base64/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="URL" scheme="https://rainmakerho.github.io/tags/URL/"/>
    
    <category term="Image" scheme="https://rainmakerho.github.io/tags/Image/"/>
    
    <category term="GPT" scheme="https://rainmakerho.github.io/tags/GPT/"/>
    
    <category term="token 計費" scheme="https://rainmakerho.github.io/tags/token-%E8%A8%88%E8%B2%BB/"/>
    
    <category term="API token usage" scheme="https://rainmakerho.github.io/tags/API-token-usage/"/>
    
    <category term="ChatCompletion" scheme="https://rainmakerho.github.io/tags/ChatCompletion/"/>
    
  </entry>
  
  <entry>
    <title>當 Google Maps Static API Polyline 點數過多：錯誤原因與最佳解法</title>
    <link href="https://rainmakerho.github.io/2025/07/31/google-map-polyline-too-many-points-staticmap-error-solution/"/>
    <id>https://rainmakerho.github.io/2025/07/31/google-map-polyline-too-many-points-staticmap-error-solution/</id>
    <published>2025-07-31T01:55:51.000Z</published>
    <updated>2025-08-07T02:45:05.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近使用 C# 透過<a href="https://developers.google.cn/maps/documentation/routes/reference/rest/v2/TopLevel/computeRoutes?hl=zh-tw">Google Map Routes API 的 Compute Routes</a> 來規劃起、迄的路徑，取得<strong>polyline</strong>(整體路線的折線)，再利用<a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a>來產生含有起、迄路徑的圖。<br>但是如果起、迄路徑中的折線太多，例如使用<strong>開車</strong>的方式，從<strong>上海</strong>到<strong>深圳</strong>，它的折線就有<strong>8 千多個</strong>，這就會導致使用<a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a>它的<strong>URL</strong>長度會爆長而導致發生以下的錯誤，</p><blockquote><p>Your client has issued a malformed or illegal request. That’s all we know.</p></blockquote><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p><a href="https://developers.google.com/maps/documentation/maps-static/start?hl=zh-tw#url-size-restriction">Maps Static API 網址長度上限為 16384 個字元</a>，所以我們要做的就是要<strong>減少</strong>折線的數量。</p><h5 id="安裝-Nuget-套件"><a href="#安裝-Nuget-套件" class="headerlink" title="安裝 Nuget 套件"></a>安裝 Nuget 套件</h5><p><a href="https://www.nuget.org/packages/nettopologysuite/">NetTopologySuite</a>:減少 經緯度的點數<br><a href="https://www.nuget.org/packages/Polyliner.Net">Polyliner.Net</a>:Encode 經緯度 成 polyline, 將 polyline Decode 成 經緯度</p><h5 id="處理步驟-及-程式碼"><a href="#處理步驟-及-程式碼" class="headerlink" title="處理步驟 及 程式碼"></a>處理步驟 及 程式碼</h5><p>1.將<strong>polyline</strong> Decode 取得經緯度</p><p>2.利用線段簡化演算法，減少 經緯度 的數量(要減少到多少，可以自定一個<code>SimplifyToTargetPoints</code> Method 來處理它)</p><p>3.重新將經緯度 Encode 成 <strong>polyline</strong></p><p>程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NetTopologySuite.Geometries;</span><br><span class="line"><span class="keyword">using</span> PolylinerNet;</span><br><span class="line"><span class="keyword">using</span> NetTopologySuite.Simplify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encodedPoyline = <span class="string">&quot;Compute Routes 取回的 encodedPolyline&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> polyliner = <span class="keyword">new</span> Polyliner();</span><br><span class="line"><span class="comment">// 1.將 polyline Decode 取得經緯度</span></span><br><span class="line">List&lt;PolylinePoint&gt; polylinePointList = polyliner.Decode(encodedPoyline);</span><br><span class="line"><span class="keyword">var</span> coordinates = polylinePointList</span><br><span class="line">    .Select(p =&gt; <span class="keyword">new</span> Coordinate(p.Longitude, p.Latitude))</span><br><span class="line">    .ToArray();</span><br><span class="line"><span class="comment">// 2.利用線段簡化演算法，減少 經緯度 的數量</span></span><br><span class="line"><span class="keyword">var</span> geometryFactory = <span class="keyword">new</span> GeometryFactory();</span><br><span class="line"><span class="keyword">var</span> line = geometryFactory.CreateLineString(coordinates);</span><br><span class="line"><span class="comment">// 減少 經緯度 的數量到 300 以內，請依需求進行調整</span></span><br><span class="line"><span class="keyword">var</span> simplifiedLine = SimplifyToTargetPoints(line, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">var</span> simplifiedPoints = simplifiedLine.Coordinates</span><br><span class="line">    .Select(c =&gt; <span class="keyword">new</span> PolylinePoint(c.Y, c.X))</span><br><span class="line">    .ToList();</span><br><span class="line"><span class="comment">// 3.新將經緯度 Encode 成 polyline</span></span><br><span class="line"><span class="keyword">var</span> encodedSimplifiedPolyline = polyliner.Encode(simplifiedPoints);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 減少 經緯度 的數量到 targetPoints 以內</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LineString <span class="title">SimplifyToTargetPoints</span>(<span class="params">LineString line, <span class="built_in">int</span> targetPoints, <span class="built_in">double</span> minTolerance = <span class="number">1e-6</span>, <span class="built_in">double</span> maxTolerance = <span class="number">1.0</span>, <span class="built_in">int</span> maxIterations = <span class="number">20</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (line.NumPoints &lt;= targetPoints)</span><br><span class="line">        <span class="keyword">return</span> line; <span class="comment">// 原本就很少</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> low = minTolerance;</span><br><span class="line">    <span class="built_in">double</span> high = maxTolerance;</span><br><span class="line">    LineString result = line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; maxIterations; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> simplified = DouglasPeuckerSimplifier.Simplify(line, mid) <span class="keyword">as</span> LineString;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (simplified.NumPoints &gt; targetPoints)</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid; <span class="comment">// 容忍度不夠大，點太多，繼續增加</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result = simplified; <span class="comment">// 有達到條件，記下這個結果</span></span><br><span class="line">            high = mid;          <span class="comment">// 嘗試更小的 tolerance</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Math.Abs(high - low) &lt; <span class="number">1e-8</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後再將 encodedSimplifiedPolyline 組成 <a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a> 的 URL，即可正常產生地圖。如下圖:</p><img src="/2025/07/31/google-map-polyline-too-many-points-staticmap-error-solution/01.png" class="" title="Google Map"><ul><li>註: 以 800 x 600 的圖，使用 300 以內的圖來看是還 OK, 大家也可以試看看其他的數量，例如 100, 200 …，在 <a href="https://developers.google.com/maps/documentation/routes/polylinedecoder">Polyline decoder utility</a>試看看效果</li></ul><h5 id="路徑簡化原理說明"><a href="#路徑簡化原理說明" class="headerlink" title="路徑簡化原理說明"></a>路徑簡化原理說明</h5><p>通常使用 <a href="https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm">Ramer–Douglas–Peucker algorithm</a>，如 wikipedia 圖所示:<br><img src="https://upload.wikimedia.org/wikipedia/commons/3/30/Douglas-Peucker_animated.gif"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developers.google.cn/maps/documentation/routes/reference/rest/v2/TopLevel/computeRoutes?hl=zh-tw">Google Map Routes API 的 Compute Routes</a><br><a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a><br><a href="https://developers.google.com/maps/documentation/maps-static/start?hl=zh-tw#url-size-restriction">Maps Static API 網址長度上限為 16384 個字元</a><br><a href="https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm">Ramer–Douglas–Peucker algorithm</a><br><a href="https://developers.google.com/maps/documentation/routes/polylinedecoder">Polyline decoder utility</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近使用 C# 透過&lt;a href=&quot;https://developers.google.cn/maps/documentation/rou</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="URL" scheme="https://rainmakerho.github.io/tags/URL/"/>
    
    <category term="Polyline" scheme="https://rainmakerho.github.io/tags/Polyline/"/>
    
    <category term="Google Maps API" scheme="https://rainmakerho.github.io/tags/Google-Maps-API/"/>
    
    <category term="Maps Static" scheme="https://rainmakerho.github.io/tags/Maps-Static/"/>
    
    <category term="點數過多" scheme="https://rainmakerho.github.io/tags/%E9%BB%9E%E6%95%B8%E9%81%8E%E5%A4%9A/"/>
    
    <category term="NetTopologySuite" scheme="https://rainmakerho.github.io/tags/NetTopologySuite/"/>
    
    <category term="簡化路徑" scheme="https://rainmakerho.github.io/tags/%E7%B0%A1%E5%8C%96%E8%B7%AF%E5%BE%91/"/>
    
    <category term="Your client has issued a malformed or illegal request" scheme="https://rainmakerho.github.io/tags/Your-client-has-issued-a-malformed-or-illegal-request/"/>
    
    <category term="DouglasPeuckerSimplifier" scheme="https://rainmakerho.github.io/tags/DouglasPeuckerSimplifier/"/>
    
  </entry>
  
  <entry>
    <title>IIS Application Pool 檔案目錄權限解析：為什麼不用加帳號也能運作？</title>
    <link href="https://rainmakerho.github.io/2025/07/29/iis-application-pool-identity-directory-permissions/"/>
    <id>https://rainmakerho.github.io/2025/07/29/iis-application-pool-identity-directory-permissions/</id>
    <published>2025-07-29T03:31:56.000Z</published>
    <updated>2025-07-29T06:41:42.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在將 ASP.NET Core 網站部署到 IIS 的過程中，許多人都遇過這個疑問：</p><p>1.部署網站目錄時，是否一定要手動加上 <code>IIS AppPool\YourAppPool</code> 帳號的權限？</p><p>2.為什麼很多時候沒加也能正常執行？</p><p>這篇文章將徹底解析 IIS Application Pool Identity 的目錄權限運作原理，分享實際測試、設定流程，以及安全性最佳實踐，幫助你徹底搞懂這個主題！</p><h3 id="IIS-Application-Pool-Identity"><a href="#IIS-Application-Pool-Identity" class="headerlink" title="IIS Application Pool Identity"></a>IIS Application Pool Identity</h3><p>IIS 預設會使用 Application Pool Identity（<code>IIS AppPool\YourAppPool</code>）來執行網站程序。它有以下特點：</p><ul><li>只要目錄權限有 <code>BUILTIN\Users</code> 或 <code>NT AUTHORITY\Authenticated Users</code>，IIS AppPool Identity 預設就能正常存取。</li><li>如果這些群組被移除，就必須**明確加入 <code>IIS AppPool\YourAppPool</code>**，否則會遇到 500 錯誤。</li></ul><p>這樣的設計，雖然方便，但不符合「最小權限原則」（Least Privilege Principle）。<br>建議為生產環境<strong>明確只授權給實際需要的 AppPool Identity，移除其他不必要的群組帳號</strong>。</p><h3 id="ASP-NET-Core-網站在-IIS-部署與最小權限設定"><a href="#ASP-NET-Core-網站在-IIS-部署與最小權限設定" class="headerlink" title="ASP.NET Core 網站在 IIS 部署與最小權限設定"></a>ASP.NET Core 網站在 IIS 部署與最小權限設定</h3><p>以下是一套完整、符合最佳實踐的 IIS 目錄權限設定步驟：</p><p>1.在部署的 Server 上安裝 ASP.NET Core Hosting Bundle 後，執行 <code>iisreset</code></p><p>2.在 IIS 中建立一個新的<strong>應用程式集區</strong>(假設名稱為<code>webdemo</code>)，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/01.png" class="" title="new application_pool"><p>3.在 IIS 中建立一個新的<strong>應用程式</strong>(假設名稱為<code>webdemo</code>)，並將應用程式集區指定到上面建立的集區，設定檔案所在目錄</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/02.png" class="" title="new application"><p>4.在 IIS 站台，點擊<code>webdemo</code>，設定<strong>HTTP 回應標頭</strong>(移除不必要的標頭，加入 Security 的一些標頭)，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/06.png" class="" title="http headers"><p>5.在檔案總管中，點選部署目錄-&gt;內容-&gt;安全性-&gt;SYSTEM 的權限(P)-&gt;點擊「進階」Button-&gt;點擊「停用繼承(I)」 Button 後，按下「確定」，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/04.png" class="" title="SYSTEM"><p>6.在檔案總管中，點選部署目錄-&gt;內容-&gt;安全性-&gt;群組或使用者名稱(G)-&gt;點擊「編輯」Button-&gt;移除<strong>Authenticated Users</strong> 及 <strong>Users</strong> 群組帳號，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/03.png" class="" title="remove users"><p>7.在檔案總管中，點選部署目錄-&gt;內容-&gt;安全性-&gt;群組或使用者名稱(G)-&gt;點擊「編輯」Button-&gt;加入 <strong>IIS AppPool\webdemo</strong> 帳號(允許<code>讀取與執行</code>, <code>列出資料夾內容</code> 及 <code>讀取</code> 權限)，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/05.png" class="" title="add appPool"><br/><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/07.png" class="" title="set appPool permissions"><p>8.針對特定子目錄（如 uploads、logs）加「寫入」或「寫入 + 修改」(有要刪除檔案) 權限，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/08.png" class="" title="set uploads permissions"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/zh-tw/iis/manage/configuring-security/application-pool-identities">應用程式集區身分識別</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在將 ASP.NET Core 網站部署到 IIS 的過程中，許多人都遇過這個疑問：&lt;/p&gt;
&lt;p&gt;1.部署網站目錄時，是否一定要手動加上 </summary>
      
    
    
    
    
    <category term="IIS" scheme="https://rainmakerho.github.io/tags/IIS/"/>
    
    <category term="Application Pool" scheme="https://rainmakerho.github.io/tags/Application-Pool/"/>
    
    <category term="ASP.NET Core" scheme="https://rainmakerho.github.io/tags/ASP-NET-Core/"/>
    
    <category term="權限" scheme="https://rainmakerho.github.io/tags/%E6%AC%8A%E9%99%90/"/>
    
    <category term="目錄權限" scheme="https://rainmakerho.github.io/tags/%E7%9B%AE%E9%8C%84%E6%AC%8A%E9%99%90/"/>
    
    <category term="AppPool Identity" scheme="https://rainmakerho.github.io/tags/AppPool-Identity/"/>
    
    <category term="虛擬帳號" scheme="https://rainmakerho.github.io/tags/%E8%99%9B%E6%93%AC%E5%B8%B3%E8%99%9F/"/>
    
    <category term="Windows Server" scheme="https://rainmakerho.github.io/tags/Windows-Server/"/>
    
    <category term="網站部署" scheme="https://rainmakerho.github.io/tags/%E7%B6%B2%E7%AB%99%E9%83%A8%E7%BD%B2/"/>
    
    <category term="安全性" scheme="https://rainmakerho.github.io/tags/%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    
    <category term="最佳實踐" scheme="https://rainmakerho.github.io/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>低成本高效率！用 Dify + Azure AI 快速處理手寫發票，準確率超高</title>
    <link href="https://rainmakerho.github.io/2025/07/25/dify-handwritten-invoice/"/>
    <id>https://rainmakerho.github.io/2025/07/25/dify-handwritten-invoice/</id>
    <published>2025-07-25T06:18:35.000Z</published>
    <updated>2025-08-07T02:33:00.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>手寫發票的資料輸入是營業稅申報流程中最費時的一環，傳統人工輸入容易出錯又耗時。<br>本文將介紹，如何透過 Dify API 結合 Azure AI，把這段流程完全自動化，大幅減少人工作業時間與錯誤風險。</p><p>延續我在 <a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a> 的實作經驗，<br>在 Dify 中只要加入 LLM 節點，使用 gpt-4.1-mini 模型來辨識<strong>高鐵票</strong>，又快又準確。<br>但是當我將<strong>高鐵票</strong>改成<strong>手寫發票</strong>時，有些手寫的數字就有可能會辨識錯誤，例如<code>9</code>，有可能會被辨識成<code>7</code>，<br>這時候要怎麼辦呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>GPT 雖然強大，但在辨識手寫內容上仍有一定限制。<br>此時我們可以改用<a href="https://learn.microsoft.com/zh-tw/azure/ai-services/content-understanding/">Azure AI Content Understanding</a>先進行辨識，再將結果交給 LLM 處理成我們需要的 JSON 格式。以下是完整流程：</p><p>1.在 Dify 中安裝 <a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a> 插件<br>在 Dify 中，點擊<strong>外掛</strong>，點擊<strong>安裝插件</strong>，選擇<strong>Github 的</strong>，貼上<a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a>的 url，選擇<strong>版本</strong>及<strong>套餐</strong>，再按<strong>下一個</strong>即可，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/03.png" class="" title="dify-plugin-azure-ai-document-intelligence"><p>2.建立 Azure AI Content Understanding<br>建立好 Azure AI Foundry project 後，請點選<strong>My assets</strong>中的<strong>Models + endpoints</strong>，切到<strong>Service endpoints</strong> Tab，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/01.png" class="" title="Azure AI Foundry project"><p>3.設定 <a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a> 插件的授權<br>複製 Azure AI Content Understanding 的 endpoint 及 Primary Key, 設定到 <a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a> 插件的授權，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/02.png" class="" title="endpoint 及 Primary Key"><br/><img src="/2025/07/25/dify-handwritten-invoice/04.png" class="" title="set plugin lic"><p>4.設定流程<br>在 Dify 中，先使用<a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a>插件，再將它的輸入結果給下個 LLM 節點來整理我們要的資訊，最後再輸出 LLM 整理後的結果，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/05.png" class="" title="Dify"><p>插件的 Text 設定給 LLM 節點 的 上下文參數，LLM 節點的 Prompt 如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">你是發票文字辨識專家，請從下列 OCR 文字中抽取統一發票資訊，並以 JSON 格式輸出以下欄位：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;INVOICE_NO&quot;: &quot;發票號碼，格式為開頭2碼英文字母加上8碼數字，例如 MT27721864&quot;,</span><br><span class="line">  &quot;BUYER_UNIFORM_NO&quot;: &quot;買方統一編號，通常出現在「買受人」或「統一編號」欄位後方&quot;,</span><br><span class="line">  &quot;DATE&quot;: &quot;發票日期，格式為中華民國年月日，例如 114年6月11日&quot;,</span><br><span class="line">  &quot;SUBTOTAL&quot;: &quot;銷售額小計（應稅金額），為未稅金額&quot;,</span><br><span class="line">  &quot;TAX&quot;: &quot;營業稅金額&quot;,</span><br><span class="line">  &quot;SELLER_UNIFORM_NO&quot;: &quot;賣方統一編號，通常出現在統一發票專用章附近&quot;,</span><br><span class="line">  &quot;TOTAL&quot;: &quot;總計金額，含稅&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">請注意：</span><br><span class="line">- 所有金額與統編請輸出為半形數字</span><br><span class="line">- 日期請保留中華民國格式（例如 114年6月11日）</span><br><span class="line">- 若欄位無法明確辨識，請填入空字串 &quot;&quot;</span><br><span class="line">- 僅輸出純 JSON，請勿加入說明文字</span><br><span class="line"></span><br><span class="line">以下是 OCR 辨識後的文字內容：</span><br><span class="line">&#123;&#123;上下文內容&#125;&#125;</span><br></pre></td></tr></table></figure><p>完成後，拿<a href="https://digit.make9.tw/startup/entrepreneur/%E4%B8%89%E8%81%AF%E5%BC%8F%E7%99%BC%E7%A5%A8%E6%80%8E%E9%BA%BC%E9%96%8B%EF%BC%9F%E8%A4%87%E5%AF%AB%E7%B4%99%E7%94%A8%E6%B3%95%EF%BC%9F/">三聯式發票怎麼開？複寫紙用法？手把手開給你看！</a>的圖片來解析，結果如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/06.png" class="" title="結果"><p>辨識結果準確，處理時間約 6.5 秒，且推論成本低，可滿足企業對效能與成本控管的需求，具備導入價值。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>如果是非手寫圖片，例如車票、名片等等可以用 gpt-4.1-mini 大部份都可以精準地辨識出來。<br>但遇到手寫圖片時，僅靠 GPT 模型的能力可能會有所限制，此時可透過 <a href="https://learn.microsoft.com/zh-tw/azure/ai-services/content-understanding/">Azure AI Content Understanding</a> 先進行辨識，再交由 LLM 結構化輸出資訊。</p><p>手寫發票的資料輸入是營業稅申報流程中最費時的一環，<br>本文介紹的解法，透過 Dify API 結合 Azure AI，即可將這段流程自動化，大幅減少人工作業時間與錯誤風險。</p><p>綜合來看，只要結合 <strong>Azure AI Content Understanding 插件</strong> 與 <strong>LLM 節點</strong>，就能有效完成手寫發票的文字辨識與結構化輸出，成為自動化營業稅資料建檔的強大工具。<br>而整個設定過程在 Dify 中不到 1 分鐘即可完成。</p><h3 id="加入處理-三聯式發票"><a href="#加入處理-三聯式發票" class="headerlink" title="加入處理 三聯式發票"></a>加入處理 三聯式發票</h3><p>如果要加入處理<strong>三聯式發票</strong>可以在 Prompt 中加入 補充說明 如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">補充說明：</span><br><span class="line">- 三聯式發票中，發票號碼格式相同，常出現在頂部，如「VN 02283153」</span><br><span class="line">- 賣方統編（SELLER_UNIFORM_NO）常見於公司資訊欄位，例如「統編:64145404」</span><br><span class="line">- 買方統編（BUYER_UNIFORM_NO）可能以「實費人統編」或類似詞出現</span><br><span class="line">- 日期格式可從「民國年/月/日」或「100-07-22」推導為「中華民國100年7月22日」</span><br><span class="line">- 小計（SUBTOTAL）與稅額（TAX）通常在「銷售額」、「營業稅」等標示後出現</span><br><span class="line">- 總計金額（TOTAL）可能為「發票稅計」、「合計」、「應收金額」或付款方式金額（如「現金470元」）</span><br></pre></td></tr></table></figure><p>這樣 三聯式發票 也可以很快的辨識出來，使用<a href="https://news.ltn.com.tw/news/focus/paper/527444">打了統編 可報帳抵稅&#x2F;&#x2F; 捶心肝…發票中千萬 不能領</a>的圖片來測試，如下:</p><img src="/2025/07/25/dify-handwritten-invoice/07.png" class="" title="三聯式發票"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a><br><a href="https://digit.make9.tw/startup/entrepreneur/%E4%B8%89%E8%81%AF%E5%BC%8F%E7%99%BC%E7%A5%A8%E6%80%8E%E9%BA%BC%E9%96%8B%EF%BC%9F%E8%A4%87%E5%AF%AB%E7%B4%99%E7%94%A8%E6%B3%95%EF%BC%9F/">三聯式發票怎麼開？複寫紙用法？手把手開給你看！</a><br><a href="https://learn.microsoft.com/zh-tw/azure/ai-services/content-understanding/">Azure AI Content Understanding</a><br><a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a><br><a href="https://news.ltn.com.tw/news/focus/paper/527444">打了統編 可報帳抵稅&#x2F;&#x2F; 捶心肝…發票中千萬 不能領</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;手寫發票的資料輸入是營業稅申報流程中最費時的一環，傳統人工輸入容易出錯又耗時。&lt;br&gt;本文將介紹，如何透過 Dify API 結合 Azur</summary>
      
    
    
    
    
    <category term="發票" scheme="https://rainmakerho.github.io/tags/%E7%99%BC%E7%A5%A8/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="手寫發票" scheme="https://rainmakerho.github.io/tags/%E6%89%8B%E5%AF%AB%E7%99%BC%E7%A5%A8/"/>
    
    <category term="Azure AI" scheme="https://rainmakerho.github.io/tags/Azure-AI/"/>
    
    <category term="文件自動化" scheme="https://rainmakerho.github.io/tags/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8B%95%E5%8C%96/"/>
    
    <category term="GPT-4" scheme="https://rainmakerho.github.io/tags/GPT-4/"/>
    
    <category term="營業稅申報" scheme="https://rainmakerho.github.io/tags/%E7%87%9F%E6%A5%AD%E7%A8%85%E7%94%B3%E5%A0%B1/"/>
    
  </entry>
  
  <entry>
    <title>使用 JavaScript 整批匯出 Dify Workflows</title>
    <link href="https://rainmakerho.github.io/2025/07/01/dify-batch-export-dsl/"/>
    <id>https://rainmakerho.github.io/2025/07/01/dify-batch-export-dsl/</id>
    <published>2025-07-01T02:20:40.000Z</published>
    <updated>2025-07-01T02:53:14.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>Dify 可以在 Browser 上手動將 Workflow 匯出成 yml 檔案。<br>那麼，有辦法整批匯出嗎?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>上網查了一下，找到了<a href="https://blog.toolman.xyz/article/309/">Batch Import and Export of Dify Workflows Using JavaScript</a>這個方式最容易。<br>直接在 Browser 的 Console 模擬手動的方式來匯出，程式如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;console_token&#x27;</span>); <span class="comment">// 從 Local Storage 取得 Token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 從目前瀏覽器的網址中動態取得網域和 tagIDs</span></span><br><span class="line"><span class="keyword">const</span> origin = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>; <span class="comment">// 取得目前頁面的網域 (如 http://localhost)</span></span><br><span class="line"><span class="keyword">const</span> urlParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 發送第一個 API 請求取得 myList</span></span><br><span class="line"><span class="keyword">const</span> apiUrl = <span class="string">`<span class="subst">$&#123;origin&#125;</span>/console/api/apps?page=1&amp;limit=100&amp;name=&amp;is_created_by_me=false`</span>;</span><br><span class="line"><span class="title function_">fetch</span>(apiUrl, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>, <span class="comment">// 包含 Token</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>(); <span class="comment">// 自動解析 JSON 為 JavaScript 物件</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> myList = data[<span class="string">&quot;data&quot;</span>]; <span class="comment">// 假設資料結構是 &#123; &quot;data&quot;: [...] &#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功取得資料:&#x27;</span>, myList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍歷 myList 並發送請求</span></span><br><span class="line">        myList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> id = item[<span class="string">&quot;id&quot;</span>]; <span class="comment">// 取得每個項目的 ID</span></span><br><span class="line">            <span class="keyword">const</span> name = item[<span class="string">&quot;name&quot;</span>]; <span class="comment">// 檔案名稱改為 item[&quot;name&quot;]</span></span><br><span class="line">            <span class="keyword">const</span> exportUrl = <span class="string">`<span class="subst">$&#123;origin&#125;</span>/console/api/apps/<span class="subst">$&#123;id&#125;</span>/export?include_secret=false`</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 發送請求到 export URL</span></span><br><span class="line">            <span class="title function_">fetch</span>(exportUrl, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Export request failed for ID <span class="subst">$&#123;id&#125;</span>: <span class="subst">$&#123;response.statusText&#125;</span>`</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">exportData</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Export 成功 - ID: <span class="subst">$&#123;id&#125;</span>`</span>, exportData);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 僅取出 exportData[&quot;data&quot;]</span></span><br><span class="line">                    <span class="keyword">const</span> dataToSave = exportData[<span class="string">&quot;data&quot;</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 將 JSON 物件轉成非雙引號格式的文字，去掉最外層的引號</span></span><br><span class="line">                    <span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(dataToSave, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">                        .<span class="title function_">replace</span>(<span class="regexp">/\\n/g</span>, <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 替換 \n 為實際換行符</span></span><br><span class="line">                        .<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>); <span class="comment">// 去掉最外層的雙引號</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 將資料儲存到本地檔案</span></span><br><span class="line">                    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([jsonString], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/x-yaml&#x27;</span> &#125;);</span><br><span class="line">                    <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>.yml`</span>; <span class="comment">// 使用 .yaml 作為檔案名稱</span></span><br><span class="line">                    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                    link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">                    link.<span class="property">download</span> = fileName;</span><br><span class="line">                    link.<span class="title function_">click</span>();</span><br><span class="line">                    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>); <span class="comment">// 清理 URL 物件</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Export 失敗 - ID: <span class="subst">$&#123;id&#125;</span>`</span>, error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;發送 API 請求時發生錯誤:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>目前 Dify 1.5 版本中，並沒有 <code>tagIDs</code> 的參數，所以我將它從 url 中移除，並將<strong>limit</strong>設定為<strong>100</strong>，<br>所以目前每頁最多可以匯出 100 個workflow。<br>再加上<code>&amp;is_created_by_me=false</code>參數。</p><h5 id="整批匯出-Workflows"><a href="#整批匯出-Workflows" class="headerlink" title="整批匯出 Workflows"></a>整批匯出 Workflows</h5><p>開啟 Dify 網頁，登入後，按 F12 打開開發者工具，點到 主控台 ，然後將程式碼貼上去就可以了，如下圖所示:</p><img src="/2025/07/01/dify-batch-export-dsl/01.png" class="" title="console"><ul><li>註: 如果發生 401 的錯誤，請重新整理網頁後，再將 Javascript 貼上去執行一次就可以了。</li><li>註: 如果要匯出下一頁的資料，請修改 url 中 <strong>page</strong> 的值，將它改成 <strong>2</strong>。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://blog.toolman.xyz/article/309/">Batch Import and Export of Dify Workflows Using JavaScript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;Dify 可以在 Browser 上手動將 Workflow 匯出成 yml 檔案。&lt;br&gt;那麼，有辦法整批匯出嗎?&lt;/p&gt;
&lt;h3 id=</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://rainmakerho.github.io/tags/Javascript/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="Batch Export" scheme="https://rainmakerho.github.io/tags/Batch-Export/"/>
    
    <category term="Workflow" scheme="https://rainmakerho.github.io/tags/Workflow/"/>
    
    <category term="DSL" scheme="https://rainmakerho.github.io/tags/DSL/"/>
    
    <category term="App" scheme="https://rainmakerho.github.io/tags/App/"/>
    
    <category term="yml" scheme="https://rainmakerho.github.io/tags/yml/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Roo-Code 和 Kilocode 中設定 Azure OpenAI（AOAI）</title>
    <link href="https://rainmakerho.github.io/2025/06/30/setup-azure-openai-roo-code-kilocode/"/>
    <id>https://rainmakerho.github.io/2025/06/30/setup-azure-openai-roo-code-kilocode/</id>
    <published>2025-06-30T09:50:08.000Z</published>
    <updated>2025-07-01T00:44:18.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在 VSCode 中使用 Roo-Code 或 Kilocode 的 AI 助理時，<br>可以讓我們設定各種 LLM API Provider，<br>但裡面却没有提供 Azure OpenAI 的設定方式。<br>那麼，如果使用 Azure OpenAI ，要怎麼設定呢？</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>使用 Azure OpenAI 的 API Provider 設定如下：</p><ol><li>API Provider 請選擇 <strong>OpenAI Compatible</strong></li><li>Base URL 請填写 Azure OpenAI 的完整 URL，例如 <code>https://你的.openai.azure.com/openai/deployments/你的部署名稱/chat/completions?api-version=2025-01-01-preview</code></li><li>API Key 填入 AOAI 的 API Key</li><li>Model 請填入使用的模型名稱，例如 gpt-4.1</li><li>勾選<strong>Use Azure</strong></li></ol><p>如下圖所示:</p><img src="/2025/06/30/setup-azure-openai-roo-code-kilocode/01.png" class="" title="API Provider"><p>之後就可以開始使用 <a href="https://github.com/RooCodeInc/Roo-Code">Roo-Code</a> &#x2F; <a href="https://github.com/Kilo-Org/kilocode">Kilocode</a> AI 助手了。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/RooCodeInc/Roo-Code">Roo-Code</a><br><a href="https://github.com/Kilo-Org/kilocode">Kilocode</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;在 VSCode 中使用 Roo-Code 或 Kilocode 的 AI 助理時，&lt;br&gt;可以讓我們設定各種 LLM API Provid</summary>
      
    
    
    
    
    <category term="Azure" scheme="https://rainmakerho.github.io/tags/Azure/"/>
    
    <category term="VSCode" scheme="https://rainmakerho.github.io/tags/VSCode/"/>
    
    <category term="OpenAI" scheme="https://rainmakerho.github.io/tags/OpenAI/"/>
    
    <category term="AOAI" scheme="https://rainmakerho.github.io/tags/AOAI/"/>
    
    <category term="Roo-Code" scheme="https://rainmakerho.github.io/tags/Roo-Code/"/>
    
    <category term="Kilocode" scheme="https://rainmakerho.github.io/tags/Kilocode/"/>
    
    <category term="API Provider" scheme="https://rainmakerho.github.io/tags/API-Provider/"/>
    
  </entry>
  
  <entry>
    <title>用 Dify Agent 智能辨識高鐵票，分批上傳後再匯出 Excel</title>
    <link href="https://rainmakerho.github.io/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/"/>
    <id>https://rainmakerho.github.io/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/</id>
    <published>2025-06-27T02:29:29.000Z</published>
    <updated>2025-06-27T04:04:00.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a>一篇中，<br>我們在 Dify 建立<strong>聊天流</strong>來辨識高鐵票，一次對話處理一個，這種方式適合固定的作業流程，例如後續還要呼叫費用系統 API 等情境。</p><p>如果我有 20 幾圖，而 Dify <strong>聊天流</strong>最多只能一次上傳<strong>10</strong>張圖片，<br>那麼，可以多次上傳圖片進行辨識，最後再匯出 Excel 嗎？</p><p>像這種需要根據使用者要求執行對應任務的情境，可以改用 Dify 的 Agent + Tools 來實現，<br>以下就來實作這個多次上傳圖片進行辨識，最後再匯出 Excel 檔案的流程。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="建立-JSON-匯出-Excel-的工作流"><a href="#建立-JSON-匯出-Excel-的工作流" class="headerlink" title="建立 JSON 匯出 Excel 的工作流"></a>建立 JSON 匯出 Excel 的工作流</h4><p>1.在開始節點中加入 2 個字串型態的輸入字段，對應 Json2ExcelTool 的參數(json, filename)，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/01.png" class="" title="加入2個字串型態的輸入字段"><p>2.在 Json2ExcelTool 節點，將這 2 個輸入字段對應到 Json2ExcelTool 的輸入變量，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/02.png" class="" title="字段對應"><p>3.結束節點增加<code>result</code>輸出變量，值來自 Json2ExcelTool 節點的輸出變量 files，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/03.png" class="" title="輸出變量"><p>4.發佈為工具<br>按下「發佈」-&gt;「發佈更新」後，</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/04.png" class="" title="發佈更新"><p>再點「發佈為工具」，設定工具名稱及描述，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/05.png" class="" title="設定工具名稱及描述"><ul><li>註: 本來想直接使用 <a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a> ，但無法正確顯示檔案，因此改用工作流來實現。</li></ul><h4 id="建立-Agent"><a href="#建立-Agent" class="headerlink" title="建立 Agent"></a>建立 Agent</h4><p>1.建立 高鐵票 Agent<br>選擇 Agent ，並輸入名稱，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/06.png" class="" title="建立 Agent"><p>2.設定模型<br>這裡我們選擇<strong>GPT4.1-mini</strong></p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/07.png" class="" title="設定模型"><p>3.啟用<strong>視覺</strong>功能</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/08.png" class="" title="啟用視覺"><p>4.設定工具<br>加入前面建立的[JSON 匯出 Excel 的工作流]工具，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/09.png" class="" title="建立 Agent"><p>5.設定提示詞</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">你是一個專業的「高鐵票辨識小幫手」，負責從上傳的圖片中辨識所有出現的台灣高鐵票券，並支援票券資訊的累積、查詢與匯出。請依照以下指示執行：</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 功能說明</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**累積辨識結果**</span>  </span><br><span class="line">   每當使用者上傳新的高鐵票圖片並完成辨識後，請將本次辨識到的所有票券資訊（JSON 陣列）加入到現有的票券記錄清單中，並保留所有已上傳的票券資料，直到使用者明確要求清除或結束。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**查詢累積結果**</span>  </span><br><span class="line">   當使用者要求檢視或查詢時，請回傳所有已辨識票券的累積資訊（JSON 陣列）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**合併匯出 Excel**</span>  </span><br><span class="line">   當使用者要求「匯出 Excel」時，請將每次辨識所得的 JSON 陣列全部合併成一個完整陣列，然後將此陣列以「標準 JSON 陣列字串」傳遞給 JSON 轉 Excel 工具（json 欄位），產生 Excel 檔案，並在工具產生 Excel 檔案後，提供下載連結。</span><br><span class="line"><span class="bullet">   -</span> 請確保 json<span class="emphasis">_str 為標準 JSON 陣列格式，例如：</span></span><br><span class="line"><span class="emphasis">     [</span></span><br><span class="line"><span class="emphasis">     &#123;&quot;票面號碼&quot;:&quot;123&quot;,&quot;乘車日期&quot;:&quot;2024/07/01&quot;, ...&#125;,</span></span><br><span class="line"><span class="emphasis">     &#123;&quot;票面號碼&quot;:&quot;456&quot;,&quot;乘車日期&quot;:&quot;2024/07/02&quot;, ...&#125;</span></span><br><span class="line"><span class="emphasis">     ]</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 辨識規則</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 一張圖片可能包含多張高鐵票，請你針對每一張票獨立辨識、解析。</span></span><br><span class="line"><span class="emphasis">- 對於每張高鐵票，請抽取以下資訊（如有缺漏請以空值回傳）：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">  - 票面號碼（如有）</span></span><br><span class="line"><span class="emphasis">  - 乘車日期</span></span><br><span class="line"><span class="emphasis">  - 乘車時間</span></span><br><span class="line"><span class="emphasis">  - 發車站</span></span><br><span class="line"><span class="emphasis">  - 抵達站</span></span><br><span class="line"><span class="emphasis">  - 車廂與座位（如有）</span></span><br><span class="line"><span class="emphasis">  - 票種（如標準車廂/商務車廂/自由座/敬老/孩童/早鳥等）</span></span><br><span class="line"><span class="emphasis">  - 價格</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 請將所有辨識到的高鐵票資訊以陣列結構回傳（JSON 格式），每個物件對應一張票。</span></span><br><span class="line"><span class="emphasis">- 回傳內容請勿發表多餘評論，只需給出辨識到的票券結構化資訊。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 範例輸出格式</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">[</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">&quot;票面號碼&quot;: &quot;123456789&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車時間&quot;: &quot;13:20&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;發車站&quot;: &quot;台北&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;抵達站&quot;: &quot;左營&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;車廂&quot;: &quot;5&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;座位&quot;: &quot;12A&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;票種&quot;: &quot;標準車廂&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;價格&quot;: &quot;1490&quot;</span></span><br><span class="line"><span class="emphasis">&#125;,</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">&quot;票面號碼&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車時間&quot;: &quot;13:20&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;發車站&quot;: &quot;台中&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;抵達站&quot;: &quot;台南&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;車廂&quot;: &quot;3&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;座位&quot;: &quot;8D&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;票種&quot;: &quot;自由座&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;價格&quot;: &quot;790&quot;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">]</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">若無高鐵票：</span></span><br><span class="line"><span class="emphasis">[]</span></span><br></pre></td></tr></table></figure><h4 id="進行測試"><a href="#進行測試" class="headerlink" title="進行測試"></a>進行測試</h4><p>1.多次上傳圖片進行辨識，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/10.png" class="" title="多次上傳圖片"><p>2.將所有辨識結果匯出成 Excel，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/11.png" class="" title="多次上傳圖片"><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>透過 Dify Agent + Tools 的架構，我們可以輕鬆實現高鐵票多次上傳辨識、自動累積所有結果，並在需要時匯出 Excel。<br>這種設計大幅提升了大量票據影像處理的彈性與效率，不但解決了 Dify 內建聊天流一次只能處理有限張圖片的限制，也讓資料整合與後續應用（如報帳、統計）變得更加自動化。</p><p>本實作展示了如何利用 Dify 的工作流與自訂工具串接，讓 AI 具備「資料多批整合」、「結構化欄位抽取」、「彈性匯出」等高階能力。<br>對於有批次票據處理需求、或想要將 AI 導入實際行政場景的開發者與企業，這是一個低門檻且高度擴充的解決方案。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a><br><a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail</summary>
      
    
    
    
    
    <category term="Excel" scheme="https://rainmakerho.github.io/tags/Excel/"/>
    
    <category term="OCR" scheme="https://rainmakerho.github.io/tags/OCR/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="台灣高鐵票" scheme="https://rainmakerho.github.io/tags/%E5%8F%B0%E7%81%A3%E9%AB%98%E9%90%B5%E7%A5%A8/"/>
    
    <category term="AI 資料抽取" scheme="https://rainmakerho.github.io/tags/AI-%E8%B3%87%E6%96%99%E6%8A%BD%E5%8F%96/"/>
    
    <category term="智慧文件辨識" scheme="https://rainmakerho.github.io/tags/%E6%99%BA%E6%85%A7%E6%96%87%E4%BB%B6%E8%BE%A8%E8%AD%98/"/>
    
    <category term="票據數位化" scheme="https://rainmakerho.github.io/tags/%E7%A5%A8%E6%93%9A%E6%95%B8%E4%BD%8D%E5%8C%96/"/>
    
    <category term="文件自動辨識" scheme="https://rainmakerho.github.io/tags/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8B%95%E8%BE%A8%E8%AD%98/"/>
    
    <category term="高鐵票" scheme="https://rainmakerho.github.io/tags/%E9%AB%98%E9%90%B5%E7%A5%A8/"/>
    
    <category term="Agent" scheme="https://rainmakerho.github.io/tags/Agent/"/>
    
    <category term="Excel Plugin" scheme="https://rainmakerho.github.io/tags/Excel-Plugin/"/>
    
  </entry>
  
  <entry>
    <title>使用 Dify 自動辨識非手寫圖片票據超 Easy：以高鐵票為例</title>
    <link href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/"/>
    <id>https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/</id>
    <published>2025-06-23T00:02:02.000Z</published>
    <updated>2025-08-07T02:42:50.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>現在一些<strong>非手寫</strong>的車票、收據、名片等圖片，透過 Multimodal Large Language Models (MLLMs) 來擷取資料效果都還不錯。<br>以下將介紹使用 Dify 搭配 Azure OpenAI GPT-4.1-mini 來讓使用者上傳圖片，不管圖片中是一張還是多張高鐵票，不管是新式或是舊式的高鐵票都可以<strong>輕鬆且正確地擷取高鐵票資訊</strong>。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>1.建立<strong>聊天流</strong> App</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/01.png" class="" title="create app"><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/07.png" class="" title="default workflow"><p>預設的流程就是「開始」-&gt;「LLM」-&gt;「直接回覆」</p><p>2.設定<strong>LLM</strong><br>2.1.設定 LLM 節點的模型使用<strong>gpt-4.1-mini</strong></p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/02.png" class="" title="gpt-4.1-mini"><p>你會發現 gpt-4.1-mini 後方有 <strong>chat</strong> 與<strong>眼睛</strong>圖示，代表該模型支援文字及圖片輸入（有眼睛圖示即表示支援圖片辨識功能）</p><p>2.2.啟用<strong>視覺</strong>功能</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/03.png" class="" title="視覺"><p>預設會帶入<strong>sys.files</strong>，這樣即可將使用者上傳的圖片自動傳遞給模型辨識。</p><p>2.3.設定 System Prompt</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/04.png" class="" title="system-prompt"><p>內容如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">你是一個專業的「高鐵票辨識小幫手」，負責從上傳的圖片中辨識所有出現的台灣高鐵票券。請依照以下指示執行：</span><br><span class="line">一張圖片可能包含多張高鐵票，請你針對每一張票獨立辨識、解析。</span><br><span class="line">對於每張高鐵票，請抽取以下資訊（如有缺漏請以空值回傳）：</span><br><span class="line">票面號碼（如有）</span><br><span class="line">乘車日期</span><br><span class="line">乘車時間</span><br><span class="line">發車站</span><br><span class="line">抵達站</span><br><span class="line">車廂與座位（如有）</span><br><span class="line">票種（如標準車廂/商務車廂/自由座/敬老/孩童/早鳥等）</span><br><span class="line">價格</span><br><span class="line"></span><br><span class="line">請將所有辨識到的高鐵票資訊以陣列結構回傳（JSON 格式），每個物件對應一張票。</span><br><span class="line"></span><br><span class="line">回傳內容僅只需給出辨識到的票券結構化資訊，請勿多餘評論。</span><br><span class="line">【範例輸出格式】</span><br><span class="line">`</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;票面號碼&quot;: &quot;123456789&quot;,</span><br><span class="line">    &quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span><br><span class="line">    &quot;乘車時間&quot;: &quot;13:20&quot;,</span><br><span class="line">    &quot;發車站&quot;: &quot;台北&quot;,</span><br><span class="line">    &quot;抵達站&quot;: &quot;左營&quot;,</span><br><span class="line">    &quot;車廂&quot;: &quot;5&quot;,</span><br><span class="line">    &quot;座位&quot;: &quot;12A&quot;,</span><br><span class="line">    &quot;票種&quot;: &quot;標準車廂&quot;,</span><br><span class="line">    &quot;價格&quot;: &quot;1490&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;票面號碼&quot;: &quot;&quot;,</span><br><span class="line">    &quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span><br><span class="line">    &quot;乘車時間&quot;: &quot;13:20&quot;,</span><br><span class="line">    &quot;發車站&quot;: &quot;台中&quot;,</span><br><span class="line">    &quot;抵達站&quot;: &quot;台南&quot;,</span><br><span class="line">    &quot;車廂&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;座位&quot;: &quot;8D&quot;,</span><br><span class="line">    &quot;票種&quot;: &quot;自由座&quot;,</span><br><span class="line">    &quot;價格&quot;: &quot;790&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">`</span><br><span class="line">若無高鐵票：</span><br><span class="line">`[]`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.進行測試<br>使用單張車票<a href="https://www.bnext.com.tw/article/61931/tw-high-speed-rail-and-travel-platform">高鐵攜手 KKday、KLOOK 推「國旅聯票」，搭行程就有 85 折高鐵票！一次看懂怎麼買</a>進行測試，結果如下圖：</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/05.png" class="" title="single"><p>使用<a href="https://news.ltn.com.tw/news/life/breakingnews/4890325">高鐵車票變大了！新版 QR Code 紙票今起 3 站先販售</a>新、舊車票進行測試，結果如下圖：</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/06.png" class="" title="new and old"><p>測試結果顯示，辨識正確率達 100%。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>使用 Dify 搭配 gpt-4.1-mini，可以在<strong>不到 3 分鐘</strong>內建立高鐵票自動辨識流程，大幅提升票據數位化的效率與準確率。<br>此流程不僅適用於台灣高鐵票，也能根據需求擴展至台鐵票、發票、收據等各類型票據，實現資料自動化歸檔與管理。</p><p>與傳統人工輸入或一般 OCR 工具相比，本方案更省時、省力，並能結合 API 或 Excel 外掛(<a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a>)，靈活整合到現有的報帳或行政系統中。<br>無論是技術人員還是業務、行政同仁，都能輕鬆上手並根據實際情境調整設定。</p><p>未來若能進一步與內部資料流、RPA 流程自動化結合，將有助於打造更智慧的辦公環境。</p><ul><li>提醒：極少數非標準票券或圖片模糊時，建議仍保留人工複核流程，以確保辨識品質。</li><li>在圖片辨識上面，目前使用 <strong>gpt-4.1-mini</strong> 比 <strong>gpt-4.1</strong> 還好</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a><br><a href="https://www.bnext.com.tw/article/61931/tw-high-speed-rail-and-travel-platform">高鐵攜手 KKday、KLOOK 推「國旅聯票」，搭行程就有 85 折高鐵票！一次看懂怎麼買</a><br><a href="https://news.ltn.com.tw/news/life/breakingnews/4890325">高鐵車票變大了！新版 QR Code 紙票今起 3 站先販售</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;現在一些&lt;strong&gt;非手寫&lt;/strong&gt;的車票、收據、名片等圖片，透過 Multimodal Large Language Mode</summary>
      
    
    
    
    
    <category term="OCR" scheme="https://rainmakerho.github.io/tags/OCR/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="高鐵票辨識" scheme="https://rainmakerho.github.io/tags/%E9%AB%98%E9%90%B5%E7%A5%A8%E8%BE%A8%E8%AD%98/"/>
    
    <category term="AI 票據處理" scheme="https://rainmakerho.github.io/tags/AI-%E7%A5%A8%E6%93%9A%E8%99%95%E7%90%86/"/>
    
    <category term="自動化票據掃描" scheme="https://rainmakerho.github.io/tags/%E8%87%AA%E5%8B%95%E5%8C%96%E7%A5%A8%E6%93%9A%E6%8E%83%E6%8F%8F/"/>
    
    <category term="無程式碼平台" scheme="https://rainmakerho.github.io/tags/%E7%84%A1%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="台灣高鐵票" scheme="https://rainmakerho.github.io/tags/%E5%8F%B0%E7%81%A3%E9%AB%98%E9%90%B5%E7%A5%A8/"/>
    
    <category term="AI 資料抽取" scheme="https://rainmakerho.github.io/tags/AI-%E8%B3%87%E6%96%99%E6%8A%BD%E5%8F%96/"/>
    
    <category term="智慧文件辨識" scheme="https://rainmakerho.github.io/tags/%E6%99%BA%E6%85%A7%E6%96%87%E4%BB%B6%E8%BE%A8%E8%AD%98/"/>
    
    <category term="票據數位化" scheme="https://rainmakerho.github.io/tags/%E7%A5%A8%E6%93%9A%E6%95%B8%E4%BD%8D%E5%8C%96/"/>
    
    <category term="文件自動辨識" scheme="https://rainmakerho.github.io/tags/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8B%95%E8%BE%A8%E8%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Dify 和 Python 來建立 Plugin，產生訊息及檔案</title>
    <link href="https://rainmakerho.github.io/2025/06/08/dify-python-plugin-tutorial/"/>
    <id>https://rainmakerho.github.io/2025/06/08/dify-python-plugin-tutorial/</id>
    <published>2025-06-08T03:10:36.000Z</published>
    <updated>2025-06-09T08:59:26.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://dify.ai/">Dify</a> 是非常受歡迎的 LLM 應用平台之一。<br>本篇將依照 Dify 官方文件「<a href="https://docs.dify.ai/plugin-dev-zh/0211-getting-started-dify-tool">Dify 插件开发：Hello World 指南</a>」內容，帶大家<strong>手把手寫出一個 Plugin</strong>，並實作讓 Plugin 產生 text、json 及 files 格式的回應！</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="1-環境準備"><a href="#1-環境準備" class="headerlink" title="1.環境準備"></a>1.環境準備</h4><ul><li>需要 Python 3.12 或更高的版本，請執行 <code>python3 --version</code> 來檢查</li><li>到<a href="https://github.com/langgenius/dify-plugin-daemon/releases">dify-plugin-daemon</a> 依 OS 環境來下載 Dify Plugin CLI 執行檔<ul><li>macOS&#x2F;Linux 要設定允許執行權限 <code>chmod +x &#123;檔案名&#125;</code></li><li>把下載的執行檔，改名成 <strong>dify</strong></li></ul></li></ul><h4 id="2-建立-Plugin"><a href="#2-建立-Plugin" class="headerlink" title="2.建立 Plugin"></a>2.建立 Plugin</h4><p>(1).開啟命令視窗，執行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dify plugin init</span><br></pre></td></tr></table></figure><p>設定名稱為<strong>echo</strong></p><img src="/2025/06/08/dify-python-plugin-tutorial/01.png" class="" title="plugin init"><p>語言選擇<strong>python</strong><br>template 選擇<strong>tool</strong><br>權限的話，按<strong>Tab</strong>來啟用<strong>Tools</strong></p><img src="/2025/06/08/dify-python-plugin-tutorial/02.png" class="" title="Permissions"><p>Minimal Dify version 如果沒有特別需求，這裡可以直接按 Enter 跳過</p><p>這樣 Dify Plugin CLI 就會為我們建立一個 echo 目錄。接著，使用 VS Code 開啟 echo 目錄。</p><p>(2).建立 Python 虛擬環境<br>在 VS Code 中，開啟 Terminal (在 echo 目錄)，輸入 <code>python3 -m venv venv</code></p><p>(3).啟動虛擬環境</p><ul><li>macOS &#x2F; Linux:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><ul><li>Windows (cmd.exe):</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate.bat</span><br></pre></td></tr></table></figure><p>(4).安裝需要的套件<br>範本會將預設需要的套件寫在<strong>requirements.txt</strong>中，未來如果有需要其他套件，再自行加入。<br><code>pip install -r requirements.txt</code></p><p>(5).Plugin Tool 說明<br><code>echo.py</code>預設會直接回傳 JSON 訊息(使用<code>self.create_json_message</code>方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EchoTool</span>(<span class="title class_ inherited__">Tool</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_invoke</span>(<span class="params">self, tool_parameters: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:</span><br><span class="line">        <span class="keyword">yield</span> self.create_json_message(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><code>echo.yaml</code>定義這個工具的相關資訊，預設有一個<code>query</code>的必填參數</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">label:</span></span><br><span class="line">      <span class="attr">en_US:</span> <span class="string">Query</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">zh_Hans:</span> <span class="string">查询语句</span></span><br><span class="line">      <span class="attr">pt_BR:</span> <span class="string">Query</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">human_description:</span></span><br><span class="line">      <span class="attr">en_US:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">      <span class="attr">zh_Hans:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">      <span class="attr">pt_BR:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">    <span class="attr">llm_description:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">    <span class="attr">form:</span> <span class="string">llm</span></span><br></pre></td></tr></table></figure><p>(6).設定 Debug 環境<br>(6.1).將檔案<code>.env.example</code>複制為<code>.env</code><br>(6.2).連到 Dify 系統，點選<strong>外掛</strong> (<code>https://yourdifyurl/plugins</code>)， 點擊<strong>蟲蟲</strong>圖示的按鈕<br>(6.3).將<strong>URL</strong>與<strong>Key</strong>的值貼到<code>.env</code>中的<strong>REMOTE_INSTALL_URL</strong>與<strong>REMOTE_INSTALL_KEY</strong>中</p><img src="/2025/06/08/dify-python-plugin-tutorial/03.png" class="" title="Copy Debug Plugin Info"><blockquote><p>註:如果 Dify URL 與 Plugin Debug URL 不同，可以調整<strong>EXPOSE_PLUGIN_DEBUGGING_HOST</strong>環境變數</p></blockquote><p>(7).Debug 安裝 Plugin<br><code>.env</code>設定完成後，在 Terminal 視窗中輸入<code>python -m main</code>按下 Enter，這時會出現以下的錯誤，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;venv/lib/python3.13/site-packages/dify_plugin/core/plugin_registration.py&quot;, line 106, in _load_plugin_configuration</span><br><span class="line">    self.configuration = PluginConfiguration(**file)</span><br><span class="line">                         ~~~~~~~~~~~~~~~~~~~^^^^^^^^</span><br><span class="line">  File &quot;venv/lib/python3.13/site-packages/pydantic/main.py&quot;, line 253, in __init__</span><br><span class="line">    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)</span><br><span class="line">pydantic_core._pydantic_core.ValidationError: 1 validation error for PluginConfiguration</span><br><span class="line">resource.permission.storage.size</span><br><span class="line">  Input should be greater than or equal to 1024 [type=greater_than_equal, input_value=0, input_type=int]</span><br><span class="line">    For further information visit https://errors.pydantic.dev/2.11/v/greater_than_equal</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要就是因為<strong>manifest.yaml</strong>中的<strong>storage</strong>它的<strong>size</strong>值為<strong>0</strong>所致，將<strong>size</strong>的值改成<strong>1024</strong>，再執行一次<code>python -m main</code>，如果出現以下訊息表示 Plugin 已經裝到 Dify Server 上了</p><blockquote><p>{“event”: “log”, “data”: {“level”: “INFO”, “message”: “Installed tool: echo”, “timestamp”: 1749434984.628976}}<br>INFO:dify_plugin.plugin:Installed tool: echo</p></blockquote><p>重整 Browser 頁面，可以發現 echo 已被安裝上去，下面有個<strong>DEBUGGING PLUGIN</strong>，如下圖:</p><img src="/2025/06/08/dify-python-plugin-tutorial/04.png" class="" title="DEBUGGING PLUGIN"><p>(8).Debug Plugin<br>到 Workflow 中，加入 echo plugin 這個 tool 並進行測試，如下圖:</p><img src="/2025/06/08/dify-python-plugin-tutorial/05.png" class="" title="Add Echo Tool"><p><code>query</code>參數給<code>abc</code>，會輸出以下的 json 內容，</p><img src="/2025/06/08/dify-python-plugin-tutorial/06.png" class="" title="Run Echo Tool"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;json&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>所以工具可以輸出 text, files &amp; json 的內容(目前工具僅回傳 json 欄位)。</p><p>到這裡已經完成從建立 Plugin 到部署到 Dify Server 的 Debug，如果 Debug 沒有問題的話就可以進行打包的工作。</p><p>(9).打包 Plugin<br>Control + C，結束 Debug，切到上層目錄，透過<code>dify plugin package</code>來打包 Plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">dify plugin package ./echo</span><br></pre></td></tr></table></figure><p>它會產生<strong>echo.difypkg</strong></p><p>(10).安裝外掛程式<br>連到 Dify 系統，點選<strong>外掛</strong>(<code>https://yourdifyurl/plugins</code>)，點擊<strong>安裝外掛程式</strong>圖示的 Button，選取<strong>本地包檔</strong>，然後選擇<strong>echo.difypkg</strong>來安裝 Plugin</p><img src="/2025/06/08/dify-python-plugin-tutorial/07.png" class="" title="Upload Plugin"><p>如果有<strong>PluginDaemonBadRequestError: plugin verification has been enabled, and the plugin you want to install has a bad signature</strong>的錯誤，解法請參考<a href="https://docs.dify.ai/plugin-dev-zh/0312-third-party-signature-verification">第三方签名验证</a></p><h4 id="3-讓-Plugin-支援多格式回傳（Text、JSON、File）"><a href="#3-讓-Plugin-支援多格式回傳（Text、JSON、File）" class="headerlink" title="3.讓 Plugin 支援多格式回傳（Text、JSON、File）"></a>3.讓 Plugin 支援多格式回傳（Text、JSON、File）</h4><p>學會基本 Plugin 實作後，我們可以擴展功能，讓 Plugin 能同時回傳 text、json、file 三種格式。<br>修改 <code>tools/echo.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Generator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dify_plugin <span class="keyword">import</span> Tool</span><br><span class="line"><span class="keyword">from</span> dify_plugin.entities.tool <span class="keyword">import</span> ToolInvokeMessage</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EchoTool</span>(<span class="title class_ inherited__">Tool</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_invoke</span>(<span class="params">self, tool_parameters: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:</span><br><span class="line">        query_str = tool_parameters[<span class="string">&#x27;query&#x27;</span>]</span><br><span class="line">        echo_str = <span class="string">f&quot;Echo: <span class="subst">&#123;query_str&#125;</span>&quot;</span></span><br><span class="line">        echo_barray = echo_str.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> self.create_json_message(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: echo_str</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">yield</span> self.create_text_message(echo_str)</span><br><span class="line">        <span class="keyword">yield</span> self.create_blob_message(</span><br><span class="line">                    blob=echo_barray,</span><br><span class="line">                    meta=&#123;</span><br><span class="line">                        <span class="string">&quot;mime_type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;echo.txt&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><ul><li><code>create_json_message</code> 回傳 json</li><li><code>create_text_message</code> 回傳文字</li><li><code>create_blob_message</code> 回傳檔案</li></ul><p>完成後，在 echo 目錄中的 Terminal 視窗中輸入<code>python -m main</code>來進行 Debug 安裝。<br>到 Dify 中建立<strong>聊天流</strong>(開始-&gt;echo-&gt;直接回覆)來進行測試，<br>將 sys.query 給 echo Tool 的 query</p><img src="/2025/06/08/dify-python-plugin-tutorial/08.png" class="" title="Flow - Echo"><p>直接回覆的回覆內容分別輸出 text, json 及 file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Text:</span><br><span class="line">&#123;&#123;#1749446615792.text#&#125;&#125;</span><br><span class="line">=================</span><br><span class="line">Json:</span><br><span class="line">&#123;&#123;#1749446615792.json#&#125;&#125;</span><br><span class="line">=================</span><br><span class="line">Files:</span><br><span class="line">&#123;&#123;#1749446615792.files#&#125;&#125;</span><br><span class="line">=================</span><br></pre></td></tr></table></figure><img src="/2025/06/08/dify-python-plugin-tutorial/09.png" class="" title="Flow - 直接回覆"><blockquote><p>json 及 files 請先 copy Text 出來後，將 text 改成 json or files ，例如 <code>&#123;&#123;#1749446615792.json#&#125;&#125;</code></p></blockquote><p>測試後在聊天流設定（開始 → echo → 直接回覆），可以看到三種格式的回覆：</p><img src="/2025/06/08/dify-python-plugin-tutorial/10.png" class="" title="Flow - 測試"><p>完成後，離開虛擬環境可執行 <code>deactivate</code>。</p><h4 id="4-進階應用：Excel-與-JSON-轉換-Plugin"><a href="#4-進階應用：Excel-與-JSON-轉換-Plugin" class="headerlink" title="4.進階應用：Excel 與 JSON 轉換 Plugin"></a>4.進階應用：Excel 與 JSON 轉換 Plugin</h4><p>有了前述多格式回傳的基礎，我們可以進一步設計更實用的 Plugin。<br>例如，想將 JSON 字串轉為 Excel 檔案，只需用 <strong>pandas</strong> 讀取 json 並轉出 Excel，即可回傳成 file 給 Dify 聊天流。</p><p>參考：<a href="https://github.com/qiangxinglin/excel-dify-plugin">Dify Json to Excel Plugin</a></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>本篇從開發環境準備、Plugin 建立、Debug 測試、打包安裝到如何擴展回傳內容（text、json、file），完整展示了如何用 Dify 與 Python 實作一個專屬 Plugin。對於想要讓自家 LLM 具備更多自訂功能的工程師來說，Dify Plugin 是一個高擴展性且門檻低的選擇。</p><p>你可以從簡單的 Echo Tool 開始練習，逐步延伸出如 Json&#x2F;Excel 轉換等更實用的插件。<br>只要配合官方的 Plugin CLI 與範本，無論是測試或實際上線都非常高效穩定。如果遇到簽章驗證等問題，也能參考文件快速排除。<br>未來如果有更多串接第三方 API、資料轉換或自動化需求，都能以 Plugin 方式靈活擴展 Dify 的應用！</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.dify.ai/plugin-dev-zh/0211-getting-started-dify-tool">Dify 插件开发：Hello World 指南</a><br><a href="https://github.com/qiangxinglin/excel-dify-plugin">Dify Json to Excel Plugin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://dify.ai/&quot;&gt;Dify&lt;/a&gt; 是非常受歡迎的 LLM 應用平台之一。&lt;br&gt;本篇將依照 Dify </summary>
      
    
    
    
    
    <category term="Excel" scheme="https://rainmakerho.github.io/tags/Excel/"/>
    
    <category term="File" scheme="https://rainmakerho.github.io/tags/File/"/>
    
    <category term="Json" scheme="https://rainmakerho.github.io/tags/Json/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="Plugin" scheme="https://rainmakerho.github.io/tags/Plugin/"/>
    
    <category term="開發教學" scheme="https://rainmakerho.github.io/tags/%E9%96%8B%E7%99%BC%E6%95%99%E5%AD%B8/"/>
    
    <category term="實作" scheme="https://rainmakerho.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Copilot 串接 Ollama：地端自託管 LLM，守護企業程式碼資安的 AI 補全解決方案</title>
    <link href="https://rainmakerho.github.io/2025/05/30/github-copilot-ollama-local-llm/"/>
    <id>https://rainmakerho.github.io/2025/05/30/github-copilot-ollama-local-llm/</id>
    <published>2025-05-30T13:43:32.000Z</published>
    <updated>2025-06-02T00:51:54.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>AI 編程助手（如 GitHub Copilot、ChatGPT）已成為現代開發團隊必備工具。<br>但對於企業來說，最擔心的就是原始碼外洩：資料送到雲端 AI 推理時，萬一被第三方取得，就可能造成商業機密或客戶資料風險。</p><p>傳統 Copilot 只能連接雲端 LLM，所以之前筆者找到 <a href="https://codegeex.cn/">CodeGeex</a>(北京智谱华章科技股份有限公司) 及 <a href="https://github.com/continuedev/continue">Continue</a> 的 IDE 插件，都有支援地端 LLM，但使用起來，筆者個人而言，還是 GitHub Copilot 比較順手一點。</p><p>但隨著 VSCode 到了 1.99 版增加<a href="https://code.visualstudio.com/updates/v1_99#_bring-your-own-key-byok-preview">Bring Your Own Key (BYOK) Preview</a>功能，現在<strong>Copilot 終於能連接本地地端 Ollama 的 LLM</strong>，讓企業可以完全掌控推理資料流，<strong>原始碼不離開本地／內網，兼顧效率與資安</strong>。</p><h3 id="Copilot-串接地端-Ollama-LLM"><a href="#Copilot-串接地端-Ollama-LLM" class="headerlink" title="Copilot 串接地端 Ollama LLM"></a>Copilot 串接地端 Ollama LLM</h3><h5 id="設定-Ollama"><a href="#設定-Ollama" class="headerlink" title="設定 Ollama"></a>設定 Ollama</h5><p>安裝好 <a href="https://ollama.com/download">Ollama</a> 後，開啟命令視窗，執行<code>ollama serve</code> 把服務跑起來，開啟網頁連到<code>http://localhost:11434/</code> 會顯示 <strong>Ollama is running</strong>。<br>再另開一個命令視窗，執行<code>ollama pull phi4-mini</code>，下載要使用的 Model（這裡以 phi4-mini 為例）。</p><h5 id="設定-GitHub-Copilot"><a href="#設定-GitHub-Copilot" class="headerlink" title="設定 GitHub Copilot"></a>設定 GitHub Copilot</h5><p>下載好模型後，打開 VSCode，於 GitHub Copilot 對話視窗最下方的模型切換選單中，點選**Manage Models…**，如下圖:</p><img src="/2025/05/30/github-copilot-ollama-local-llm/01.png" class="" title="Manage Models"><p>然後選擇<strong>Ollama</strong>，如下圖:</p><img src="/2025/05/30/github-copilot-ollama-local-llm/02.png" class="" title="選擇Ollama"><p>然後就會列出可以使用的 Model，如下圖:</p><img src="/2025/05/30/github-copilot-ollama-local-llm/03.png" class="" title="選擇Models"><p>接下來回到 GitHub Copilot 對話視窗，將模型切換為 phi4-mini 或 codellama，即可開始使用 AI 助手。此時 Copilot 補全將透過本地 LLM 運算，程式碼資料只會流向你自己的電腦／內網，不會外洩到外部雲端。如下圖：</p><img src="/2025/05/30/github-copilot-ollama-local-llm/04.png" class="" title="地端LLM"><h5 id="設定遠端-Ollama-LLM"><a href="#設定遠端-Ollama-LLM" class="headerlink" title="設定遠端 Ollama LLM"></a>設定遠端 Ollama LLM</h5><p>如果你有遠端 Ollama 服務(例如公司有統一的 GPU Server)，可以設定 GitHub Copilot 遠端 Ollama 的 URL，如下圖:<br>在設定中，輸入 <code>copilot</code> 在 <strong>GitHub Copilot Chat</strong> -&gt; <strong>Preview</strong> -&gt; <strong>Ollama Endpoint</strong></p><img src="/2025/05/30/github-copilot-ollama-local-llm/05.png" class="" title="遠端 Ollama 的 URL"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://code.visualstudio.com/updates/v1_99#_bring-your-own-key-byok-preview">VS Code Bring Your Own Key (BYOK) Preview</a><br><a href="https://ollama.com/">Ollama</a><br><a href="https://codegeex.cn/">CodeGeex</a>(北京智谱华章科技股份有限公司)<br><a href="https://github.com/continuedev/continue">Continue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;AI 編程助手（如 GitHub Copilot、ChatGPT）已成為現代開發團隊必備工具。&lt;br&gt;但對於企業來說，最擔心的就是原始碼外洩</summary>
      
    
    
    
    
    <category term="資安" scheme="https://rainmakerho.github.io/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="VSCode" scheme="https://rainmakerho.github.io/tags/VSCode/"/>
    
    <category term="LLM" scheme="https://rainmakerho.github.io/tags/LLM/"/>
    
    <category term="GitHub Copilot" scheme="https://rainmakerho.github.io/tags/GitHub-Copilot/"/>
    
    <category term="Ollama" scheme="https://rainmakerho.github.io/tags/Ollama/"/>
    
    <category term="AI" scheme="https://rainmakerho.github.io/tags/AI/"/>
    
    <category term="AI Code Completion" scheme="https://rainmakerho.github.io/tags/AI-Code-Completion/"/>
    
    <category term="地端" scheme="https://rainmakerho.github.io/tags/%E5%9C%B0%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>AI自動填表，一鍵搞定！最強Browser Extension全教學</title>
    <link href="https://rainmakerho.github.io/2025/05/29/ai-autofill-browser-extension/"/>
    <id>https://rainmakerho.github.io/2025/05/29/ai-autofill-browser-extension/</id>
    <published>2025-05-29T01:17:10.000Z</published>
    <updated>2025-05-29T07:54:42.051Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>延續<a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a>，我們已經在 SidePanel 中完成與 LLM 的對話功能，並且能成功取得網頁上的 BizForm 表單欄位資訊。本篇將進一步把這個能力應用到「自動填寫表單」的實戰上。你只需要輸入一個指令或貼上會議記錄，AI 就能幫你把資訊自動填入對應欄位，真正實現一鍵自動填表。<br>以下將以 KM 系統為例子，建立該網站的 2 項工具，一個取得表單欄位資訊，另一個則是將表單欄位資訊填入表單中。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>要取得網頁表單欄位的資訊及自動填入資料，要先解析網頁的 HTML，看看如何取得表單欄位資訊及透過 id 來指定它們的值。<br>你可以把這些 HTML 結構交給 ChatGPT，請它協助你產生對應的 JavaScript 來自動化擷取欄位資訊。這樣可以加快開發流程，先在瀏覽器 Console 測試 JS 程式碼是否正確抓到欄位，如下圖所示：</p><img src="/2025/05/29/ai-autofill-browser-extension/01.png" class="" title="Console"><p>而在填入表單欄位資訊時，則需要取得表單的 id，然後透過 id 來指定它們的值。<br>不過在 KM 系統中，部分欄位使用了 TinyMCE 這類富文本編輯器。TinyMCE 會將原本的 textarea 元件「包裝」成一個 iframe，這時就<strong>不能單純用 id 屬性直接設定值</strong>。如下圖所示，</p><img src="/2025/05/29/ai-autofill-browser-extension/02.png" class="" title="TinyMCE"><p>textarea 已經被 iframe 取代，所以我們必須改用 <a href="https://www.tiny.cloud/docs/tinymce/latest/apis/tinymce.editor/#setContent">TinyMCE 的 setContent API</a> 來操作內容。</p><h3 id="建立工具"><a href="#建立工具" class="headerlink" title="建立工具"></a>建立工具</h3><p>以下建立 KM 系統要使用的 2 項工具，一個取得表單欄位資訊，另一個則是將表單欄位資訊填入表單中。<br>在這裡主要是設定工具的描述及工具的參數類型，讓 LLM 知道這個工具是幹嘛用的，以及參數的類型(Tool Calling)。<br>而實際上的操作，則會傳送訊息讓 Content-Script 中的 Handler 去執行。</p><h5 id="定義工具描述"><a href="#定義工具描述" class="headerlink" title="定義工具描述"></a>定義工具描述</h5><p>這裡我們先定義三個工具，讓 LLM 清楚理解每種工具是幹嘛用的。</p><p>在<code>utils/types/message.ts</code>的<code>MESSAGE_TOOL_TYPES</code>加入取得欄位、設定欄位及設定 TinyMCE 欄位的描述。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MESSAGE_TOOL_TYPES</span> = &#123;</span><br><span class="line">  <span class="attr">PAGE_CONTENT</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;pageContent&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;取得整個網頁的純文字內容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">BIZ_EXTRACT_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;bizformExtractFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;擷取目前頁面中所有可輸入的欄位名稱與其值（如文字欄位、下拉選單、日期等）&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//新增以下3個工具描述</span></span><br><span class="line">  <span class="attr">KM_EXTRACT_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kmExtractFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;擷取目前頁面中所有可輸入的欄位id, 名稱與其值（如文字欄位、下拉選單、日期等）&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">KM_SET_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kmSetFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;依合適的填寫內容（回傳欄位 id 對應內容, 例如:ctl00_cp_fieldRepeater_ctl02_date_A: 2024/05/23）來填寫網頁表單欄位&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">TINYMCE_SET_VALUE</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tinymceSetValue&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;設定 TinyMCE 編輯器的內容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建立-KM-工具"><a href="#建立-KM-工具" class="headerlink" title="建立 KM 工具"></a>建立 KM 工具</h5><p>在<code>utils/tools</code>目錄中新增<code>kmTools.ts</code>，在裡面建立<strong>LangChain</strong>的 Tool，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tool &#125; <span class="keyword">from</span> <span class="string">&quot;@langchain/core/tools&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sendMessage &#125; <span class="keyword">from</span> <span class="string">&quot;../message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">MESSAGE_TOOL_TYPES</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> noOp = z.<span class="title function_">string</span>().<span class="title function_">optional</span>().<span class="title function_">describe</span>(<span class="string">&quot;No-op parameter.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmExtractFieldsTool = <span class="title function_">tool</span>(</span><br><span class="line">  <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> sendMessage&lt;<span class="built_in">string</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">description</span>,</span><br><span class="line">    <span class="attr">schema</span>: z.<span class="title function_">object</span>(&#123;</span><br><span class="line">      noOp,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setFieldsSchema = z.<span class="title function_">record</span>(z.<span class="title function_">string</span>(), z.<span class="title function_">any</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmSetFieldsTool = <span class="title function_">tool</span>(</span><br><span class="line">  <span class="keyword">async</span> (fields) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callReportSetFieldsTool fields&quot;</span>, fields);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> sendMessage&lt;<span class="built_in">string</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">payload</span>: fields,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">description</span>,</span><br><span class="line">    <span class="attr">schema</span>: setFieldsSchema,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在設定欄位的工具中，我們使用<code>z.record(z.string(), z.any())</code>來定義 schema，id 為字串，欄位值為 any，這樣就可以讓我們傳入任何類型的資料。</p><h5 id="設定-KM-工具可以在那些網站使用"><a href="#設定-KM-工具可以在那些網站使用" class="headerlink" title="設定 KM 工具可以在那些網站使用"></a>設定 KM 工具可以在那些網站使用</h5><p>在<code>utils/tools/index.ts</code>中，在<strong>toolRules</strong>中加入<code>kmExtractFieldsTool</code>及<code>kmSetFieldsTool</code>，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; matchPattern &#125; <span class="keyword">from</span> <span class="string">&quot;browser-extension-url-match&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; pageContentTool &#125; <span class="keyword">from</span> <span class="string">&quot;./pageContentTool&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bizformExtractFieldsTool &#125; <span class="keyword">from</span> <span class="string">&quot;./bizformExtractFieldsTool&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; kmExtractFieldsTool, kmSetFieldsTool &#125; <span class="keyword">from</span> <span class="string">&quot;./kmTools&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tools = [pageContentTool];</span><br><span class="line"><span class="keyword">export</span> &#123; tools &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toolRules = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [pageContentTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;https://bizform.vitalyun.com/*&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [bizformExtractFieldsTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//設定 KM 系統可以用的工具</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;https://gsskm.gss.com.tw/*&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [kmExtractFieldsTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;https://gsskm.gss.com.tw/*&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [kmSetFieldsTool],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getToolsByUrl</span>(<span class="params">url: <span class="built_in">string</span></span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> matchedTools = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> rule <span class="keyword">of</span> toolRules) &#123;</span><br><span class="line">    <span class="keyword">const</span> matcher = <span class="title function_">matchPattern</span>(rule.<span class="property">matches</span>);</span><br><span class="line">    <span class="keyword">if</span> (matcher.<span class="property">valid</span> &amp;&amp; matcher.<span class="title function_">match</span>(url)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;match&quot;</span>, rule.<span class="property">matches</span>);</span><br><span class="line">      rule.<span class="property">tools</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">tool</span>) =&gt;</span> matchedTools.<span class="title function_">add</span>(tool));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(matchedTools);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為 KM 系統的網址是 <code>https://gsskm.gss.com.tw/*</code>，所以這裡我們設定 matches 的值為 <code>https://gsskm.gss.com.tw/*</code>。</p><h3 id="建立工具對應的-Handler"><a href="#建立工具對應的-Handler" class="headerlink" title="建立工具對應的 Handler"></a>建立工具對應的 Handler</h3><h5 id="新增-Handler"><a href="#新增-Handler" class="headerlink" title="新增 Handler"></a>新增 Handler</h5><p>在<code>utils/handlers</code>目錄中新增<code>kmHandlers.ts</code>，在裡面實作要針對網頁的讀取檔位資訊及設定欄位值的 Handler，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  messageRequest,</span><br><span class="line">  messageResponse,</span><br><span class="line">  <span class="variable constant_">MESSAGE_TOOL_TYPES</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmExtractFieldsHandler = (</span><br><span class="line">  <span class="attr">message</span>: messageRequest</span><br><span class="line">): <span class="function"><span class="params">messageResponse</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fields = <span class="title function_">collectFormFields</span>();</span><br><span class="line">  <span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(fields);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">result</span>: jsonString,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FormFieldInfo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">tag</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 擷取網頁 tr 結構下所有 th(.attrDisplayName)+td(input/select/textarea) 欄位資訊</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">collectFormFields</span>(<span class="params"></span>): <span class="title class_">FormFieldInfo</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fieldList</span>: <span class="title class_">FormFieldInfo</span>[] = [];</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">tr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> titleElem = tr.<span class="title function_">querySelector</span>(<span class="string">&quot;.attrDisplayName&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!titleElem) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> title = titleElem.<span class="property">textContent</span>?.<span class="title function_">trim</span>() || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只擷取 td 裡不是 hidden 的 input、select、textarea</span></span><br><span class="line">    <span class="keyword">const</span> inputs = tr.<span class="title function_">querySelectorAll</span>(</span><br><span class="line">      <span class="string">&quot;td input:not([type=hidden]), td select, td textarea&quot;</span></span><br><span class="line">    );</span><br><span class="line">    inputs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">      fieldList.<span class="title function_">push</span>(&#123;</span><br><span class="line">        title,</span><br><span class="line">        <span class="attr">tag</span>: input.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>(),</span><br><span class="line">        <span class="attr">type</span>: (input <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">type</span> || <span class="string">&quot;&quot;</span>, <span class="comment">// select/textarea 沒 type 屬性</span></span><br><span class="line">        <span class="attr">name</span>: input.<span class="title function_">getAttribute</span>(<span class="string">&quot;name&quot;</span>) || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">id</span>: input.<span class="property">id</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: (input <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span> | <span class="title class_">HTMLTextAreaElement</span>).<span class="property">value</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fieldList);</span><br><span class="line">  <span class="keyword">return</span> fieldList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmSetFieldsHandler = (</span><br><span class="line">  <span class="attr">message</span>: messageRequest</span><br><span class="line">): <span class="function"><span class="params">messageResponse</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;表單填寫完成, 請檢查網頁內容。&quot;</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> payload = message.<span class="property">payload</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> payload === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        payload = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(payload);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">result</span>: <span class="string">&quot;fields 內容不是正確的 JSON 格式。&quot;</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!payload || <span class="keyword">typeof</span> payload !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">result</span>: <span class="string">&quot;fields 格式錯誤。&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fields = payload <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting fields:&quot;</span>, fields);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">entries</span>(fields).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[id, val]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line">      <span class="keyword">if</span> (!elem) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (elem <span class="keyword">instanceof</span> <span class="title class_">HTMLInputElement</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elem.<span class="property">type</span> === <span class="string">&quot;checkbox&quot;</span> || elem.<span class="property">type</span> === <span class="string">&quot;radio&quot;</span>) &#123;</span><br><span class="line">          elem.<span class="property">checked</span> = <span class="title class_">Boolean</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          elem.<span class="property">value</span> = val ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem <span class="keyword">instanceof</span> <span class="title class_">HTMLSelectElement</span>) &#123;</span><br><span class="line">        elem.<span class="property">value</span> = val ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem <span class="keyword">instanceof</span> <span class="title class_">HTMLTextAreaElement</span>) &#123;</span><br><span class="line">        elem.<span class="property">value</span> = val ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        elem.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&quot;input&quot;</span>, &#123; <span class="attr">bubbles</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">TINYMCE_SET_VALUE</span>.<span class="property">name</span>,</span><br><span class="line">              <span class="attr">id</span>: id,</span><br><span class="line">              <span class="attr">value</span>: val ?? <span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;*&quot;</span></span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error setting textarea value:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="string">&quot;表單填寫失敗: &quot;</span> + (e <span class="keyword">as</span> <span class="title class_">Error</span>).<span class="property">message</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>針對頁面 DOM 的操作，您可以依實際需求調整，這裡只是提供一個基本的範例。<br>因為 KM 系統有使用 TinyMCE 編輯器，所以還需要額外處理 textarea 的值設定，這裡使用 <code>window.postMessage</code> 來觸發設定 TinyMCE TinyMCE 編輯器方法。</p><h5 id="設定-訊息對應的-Handler"><a href="#設定-訊息對應的-Handler" class="headerlink" title="設定 訊息對應的 Handler"></a>設定 訊息對應的 Handler</h5><p>在<code>utils/handlers/index.ts</code>中，新增對應的 Handler，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  messageRequest,</span><br><span class="line">  messageResponse,</span><br><span class="line">  <span class="variable constant_">MESSAGE_TOOL_TYPES</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; pageContentHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./pageContentHandler&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bizformExtractFieldsHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./bizformExtractFieldsHandler&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; kmExtractFieldsHandler, kmSetFieldsHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./kmHandlers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">handlers</span>: <span class="title class_">Record</span>&lt;</span><br><span class="line">  <span class="built_in">string</span>,</span><br><span class="line">  <span class="function">(<span class="params">message: messageRequest</span>) =&gt;</span> messageResponse</span><br><span class="line">&gt; = &#123;</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">PAGE_CONTENT</span>.<span class="property">name</span>]: pageContentHandler,</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">BIZ_EXTRACT_FIELDS</span>.<span class="property">name</span>]: bizformExtractFieldsHandler,</span><br><span class="line">  <span class="comment">//新增這 2 個 Handlers</span></span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">name</span>]: kmExtractFieldsHandler,</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">name</span>]: kmSetFieldsHandler,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="新增-TinyMCE-的設定"><a href="#新增-TinyMCE-的設定" class="headerlink" title="新增 TinyMCE 的設定"></a>新增 TinyMCE 的設定</h3><h5 id="新增設定-TinyMCE-編輯器的-Function"><a href="#新增設定-TinyMCE-編輯器的-Function" class="headerlink" title="新增設定 TinyMCE 編輯器的 Function"></a>新增設定 TinyMCE 編輯器的 Function</h5><p>在<code>entrypoints</code>目錄中新增<code>tinymcetools.ts</code>，<br>要設定 TinyMCE 編輯器的值，要使用到<strong>window.tinyMCE</strong>，預設的 Content-Script 是與網頁是隔離開來的，無法存取到 <code>window</code>。<br>所以要將這個檔案透過<strong>injectScript</strong>的方式加到網頁之中，而 Content-Script 的 Handler 則透過 <code>window.postMessage</code> 來觸發設定 TinyMCE 編輯器的值，如下<code>window.addEventListener</code>的部份。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">MESSAGE_TOOL_TYPES</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/types/message&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineUnlistedScript</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setTinyMCEValue</span>(<span class="params">id: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!win.<span class="property">tinyMCE</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;tinyMCE not found on window.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> editor = win.<span class="property">tinyMCE</span>.<span class="title function_">get</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (editor) &#123;</span><br><span class="line">      editor.<span class="title function_">setContent</span>(value);</span><br><span class="line">      editor.<span class="title function_">save</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`TinyMCE editor with id <span class="subst">$&#123;id&#125;</span> not found.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      event.<span class="property">data</span> &amp;&amp;</span><br><span class="line">      event.<span class="property">data</span>.<span class="property">type</span> === <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">TINYMCE_SET_VALUE</span>.<span class="property">name</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> event.<span class="property">data</span>.<span class="property">id</span> === <span class="string">&quot;string&quot;</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> event.<span class="property">data</span>.<span class="property">value</span> === <span class="string">&quot;string&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting TinyMCE value:&quot;</span>, event.<span class="property">data</span>.<span class="property">id</span>, event.<span class="property">data</span>.<span class="property">value</span>);</span><br><span class="line">      <span class="title function_">setTinyMCEValue</span>(event.<span class="property">data</span>.<span class="property">id</span>, event.<span class="property">data</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="設定-injectScript-的檔案"><a href="#設定-injectScript-的檔案" class="headerlink" title="設定 injectScript 的檔案"></a>設定 injectScript 的檔案</h5><p>injectScript 會將 JS 直接插入網頁作用域，突破 Content-Script 和網頁 window 的隔離。<br>在<code>entrypoints/content.ts</code>中使用<code>injectScript</code>來將<code>tinymcetools.js</code>加入到網頁中，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; messageRequest, messageResponse &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/types/message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; handlers &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/handlers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineContentScript</span>(&#123;</span><br><span class="line">  <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">injectScript</span>(<span class="string">&quot;/tinymcetools.js&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">keepInDom</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(</span><br><span class="line">      <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        message: messageRequest,</span></span></span><br><span class="line"><span class="params"><span class="function">        sender,</span></span></span><br><span class="line"><span class="params"><span class="function">        sendResponse: (response: messageResponse) =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="params"><span class="function">      </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = handlers[message.<span class="property">type</span>];</span><br><span class="line">        <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">          <span class="title function_">sendResponse</span>(<span class="title function_">handler</span>(message));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unknown message type:&quot;</span>, message.<span class="property">type</span>);</span><br><span class="line">          <span class="title function_">sendResponse</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;Unknown message type&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="設定-web-accessible-resources"><a href="#設定-web-accessible-resources" class="headerlink" title="設定 web_accessible_resources"></a>設定 web_accessible_resources</h5><p>這步驟是讓 Chrome Extension 可以將指定的 JS 檔案注入到目標網頁，才能讓 content script 跟網頁本體溝通。<br>在 <code>wxt.config.ts</code>中，設定 <code>web_accessible_resources</code>，讓 Content-Script 可以將 <code>tinymcetools.js</code> 加到網頁中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;wxt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See https://wxt.dev/api/config.html</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&quot;@wxt-dev/module-react&quot;</span>],</span><br><span class="line">  <span class="attr">manifest</span>: <span class="function">(<span class="params">&#123; browser, manifestVersion, mode, command &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;WXT + Agent&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;WXT + Agent&quot;</span>,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">      <span class="attr">action</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">permissions</span>: [<span class="string">&quot;tabs&quot;</span>, <span class="string">&quot;storage&quot;</span>],</span><br><span class="line">      <span class="attr">host_permissions</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">      <span class="attr">web_accessible_resources</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">resources</span>: [<span class="string">&quot;/tinymcetools.js&quot;</span>],</span><br><span class="line">          <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>經過上述的步驟，我們已經完成了對 KM 系統的填表功能，接下來執行<code>npm run dev</code>，把 Extension 安裝到 Chrome 中，<br>進入到 KM 系統，點選 Extension 的 Icon，再開啟到填表畫面，然後在 SidePanel 中輸入需要 LLM 幫我們做的事，在後面貼上 Teams 的開會記事內容，</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">請根據下方會議記錄內容，依網頁表單欄位逐步執行以下流程，請每一步明確說明理由：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**取得網頁所有表單欄位**</span>（透過 tool calling 取得欄位 title, id…）。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**依據每個表單欄位，從會議記錄中找出最適合填入的內容，並說明推理過程**</span>。</span><br><span class="line"><span class="bullet">   -</span> 若找不到合適內容，請註明原因並留空。</span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**產生 tool calling 指令，將判斷後的內容寫入對應的網頁表單欄位。**</span></span><br><span class="line"></span><br><span class="line">會議記錄如下：</span><br><span class="line">[...記事內容...]</span><br></pre></td></tr></table></figure><p>然後按下送出，就可以看到 LLM 幫我們填寫好了表單。如下圖:</p><img src="/2025/05/29/ai-autofill-browser-extension/05.png" class="" title="自動寫回網頁的表單欄位之中"><ul><li>註: 如果您的 Chrome 升級到了 V.137 ，它不再支援 <code>--load-extension</code> 參數，所以要手動安裝 Extension(開啟 開發人員模式 ，載入未封裝項目，選擇 chrome-mv3-dev 目錄)</li><li>註: 如果出現取不到網頁資訊表示 Content-Script 沒有順利載入到網頁中，請重新整理網頁，然後再試一次。</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>從這次的實作可以看到，只要建立好對應的 Tools 和 Handlers，就能快速擴充 AI 助理的新能力，不論是自動填表還是擷取網頁資料都變得簡單高效。<br>這種「工具驅動 + LLM 協作」的模式，不僅大幅減少了重複性工作，更讓我們能把時間投入到真正有價值的決策和創造力發揮上。<br>未來，你也可以依照實際需求，彈性擴充更多自動化功能，讓瀏覽器成為最聰明的工作助手！</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="../../../05/12/ai-browser-extension-integration">用 Browser Extension 打造具網頁背景感知的 AI 助理，補足 LLM 的視野盲點</a><br><a href="../../../05/12/ai-browser-extension-context-bridge">為什麼 AI 工具需要瀏覽器擴充功能來補全 Web 背景？</a><br><a href="../../../05/12/wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a><br><a href="https://github.com/rainmakerho/wxtagent/tree/25.05.02">wxtagent 程式碼</a><br><a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;延續&lt;a href=&quot;../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-</summary>
      
    
    
    
    
    <category term="Browser Extension" scheme="https://rainmakerho.github.io/tags/Browser-Extension/"/>
    
    <category term="Chrome Extension" scheme="https://rainmakerho.github.io/tags/Chrome-Extension/"/>
    
    <category term="AI自動填表" scheme="https://rainmakerho.github.io/tags/AI%E8%87%AA%E5%8B%95%E5%A1%AB%E8%A1%A8/"/>
    
    <category term="一鍵自動填表" scheme="https://rainmakerho.github.io/tags/%E4%B8%80%E9%8D%B5%E8%87%AA%E5%8B%95%E5%A1%AB%E8%A1%A8/"/>
    
    <category term="AI填表神器" scheme="https://rainmakerho.github.io/tags/AI%E5%A1%AB%E8%A1%A8%E7%A5%9E%E5%99%A8/"/>
    
    <category term="網頁自動填表" scheme="https://rainmakerho.github.io/tags/%E7%B6%B2%E9%A0%81%E8%87%AA%E5%8B%95%E5%A1%AB%E8%A1%A8/"/>
    
    <category term="wxt" scheme="https://rainmakerho.github.io/tags/wxt/"/>
    
    <category term="AI自動化" scheme="https://rainmakerho.github.io/tags/AI%E8%87%AA%E5%8B%95%E5%8C%96/"/>
    
    <category term="langchain" scheme="https://rainmakerho.github.io/tags/langchain/"/>
    
  </entry>
  
</feed>
