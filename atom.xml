<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Hello! 我是RM</subtitle>
  <link href="https://rainmakerho.github.io/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2024-07-04T02:04:37.982Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerBI Embed Service Principal embed token generation error for effective identity</title>
    <link href="https://rainmakerho.github.io/2024/07/03/power-bi-embed-rls/"/>
    <id>https://rainmakerho.github.io/2024/07/03/power-bi-embed-rls/</id>
    <published>2024-07-03T09:01:30.000Z</published>
    <updated>2024-07-04T02:04:37.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>透過<a href="https://github.com/rainmakerho/PowerBI-Developer-Samples/tree/master/.NET%20Framework/Embed%20for%20your%20customers/AppOwnsData">PowerBI-Developer-Samples&#x2F;AppOwnsData</a>來開啟 PowerBI 報表時，<br>會出現<code>Creating embed token for accessing dataset ... requires effective identity to be provided</code>的錯誤</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>錯誤說明在取得 Token 時，沒有給<strong>effective identity</strong>，<br>透過 Power BI Desktop 在 Modeling 功能選 Manage roles ，<br>可以發現在 Roles 中有一個 <code>User</code> 的值，如下圖，</p><img src="/2024/07/03/power-bi-embed-rls/01.png" class="" title="Manage roles"><p>在 app.powerbi.com 的 workspace 中，查看報表的 dataset ，<br>按右鍵點選<strong>安全性</strong>也可以發現在<strong>資料列層級安全性</strong>中，<br>有<code>User (0)</code>，如下圖，</p><img src="/2024/07/03/power-bi-embed-rls/02.png" class="" title="資料列層級安全性"><p>所以在<a href="https://github.com/rainmakerho/PowerBI-Developer-Samples/blob/master/.NET%20Framework/Embed%20for%20your%20customers/AppOwnsData/Services/EmbedService.cs#L156">GetEmbedToken</a>程式碼中，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EmbedToken <span class="title">GetEmbedToken</span>(<span class="params">PowerBIClient pbiClient, Guid reportId, IList&lt;Guid&gt; datasetIds, [Optional] Guid targetWorkspaceId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> tokenRequest = <span class="keyword">new</span> GenerateTokenRequestV2(</span><br><span class="line"></span><br><span class="line">    reports: <span class="keyword">new</span> List&lt;GenerateTokenRequestV2Report&gt;() &#123; <span class="keyword">new</span> GenerateTokenRequestV2Report(reportId) &#125;,</span><br><span class="line"></span><br><span class="line">    datasets: datasetIds.Select(datasetId =&gt; <span class="keyword">new</span> GenerateTokenRequestV2Dataset(datasetId.ToString())).ToList(),</span><br><span class="line"></span><br><span class="line">    targetWorkspaces: targetWorkspaceId != Guid.Empty ? <span class="keyword">new</span> List&lt;GenerateTokenRequestV2TargetWorkspace&gt;() &#123; <span class="keyword">new</span> GenerateTokenRequestV2TargetWorkspace(targetWorkspaceId) &#125; : <span class="literal">null</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> embedToken = pbiClient.EmbedToken.GenerateToken(tokenRequest);</span><br><span class="line">    <span class="keyword">return</span> embedToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要建立<strong>EffectiveIdentity</strong>，並在建立<strong>GenerateTokenRequestV2</strong>類別時，多指定<strong>identities</strong>參數，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EmbedToken <span class="title">GetEmbedToken</span>(<span class="params">PowerBIClient pbiClient, Guid reportId, IList&lt;Guid&gt; datasetIds, [Optional] Guid targetWorkspaceId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> identities = <span class="keyword">new</span> List&lt;EffectiveIdentity&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> datasetId <span class="keyword">in</span> datasetIds)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dataSet = pbiClient.Datasets.GetDatasetInGroup(ConfigValidatorService.WorkspaceId, datasetId.ToString());</span><br><span class="line">        <span class="keyword">if</span> (dataSet.IsEffectiveIdentityRolesRequired==<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> userName = <span class="string">&quot;你的使用者&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> roles = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            roles.Add(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> rlsidentity = <span class="keyword">new</span> EffectiveIdentity(</span><br><span class="line">                username: userName,</span><br><span class="line">                datasets: <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; datasetId.ToString() &#125;,</span><br><span class="line">                roles: roles.ToArray()</span><br><span class="line">            );</span><br><span class="line">            identities.Add(rlsidentity );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tokenRequest = <span class="keyword">new</span> GenerateTokenRequestV2(</span><br><span class="line">        reports: <span class="keyword">new</span> List&lt;GenerateTokenRequestV2Report&gt;() &#123; <span class="keyword">new</span> GenerateTokenRequestV2Report(reportId) &#125;,</span><br><span class="line">        datasets: datasetIds.Select(datasetId =&gt; <span class="keyword">new</span> GenerateTokenRequestV2Dataset(datasetId.ToString())).ToList(),</span><br><span class="line">        identities: identities,</span><br><span class="line">        targetWorkspaces: targetWorkspaceId != Guid.Empty ? <span class="keyword">new</span> List&lt;GenerateTokenRequestV2TargetWorkspace&gt;() &#123; <span class="keyword">new</span> GenerateTokenRequestV2TargetWorkspace(targetWorkspaceId) &#125; : <span class="literal">null</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> embedToken = pbiClient.EmbedToken.GenerateToken(tokenRequest);</span><br><span class="line">    <span class="keyword">return</span> embedToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>註 1: 如果出現<code>Unauthorized (401) PowerBINotAuthorizedException</code>，請確定你註冊的 App，是否有加到 PowerBI Workspace 的 管理存取權 之中</p></blockquote><blockquote><p>註 2: EffectiveIdentity 請依報表設定，如果在不需要 RLS 的報表，就會有<code>shouldn&#39;t have effective identit</code>的錯誤哦~</p></blockquote><blockquote><p>註 3: roles 請依系統進行調整</p></blockquote><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/power-bi/developer/embedded/cloud-rls#dynamic-security">Embed a report with RLS</a><br><a href="https://blog.simontimms.com/2021/10/22/RLS_with_power_bi/">Using RLS in Power BI Embedded</a><br><a href="https://github.com/rainmakerho/PowerBI-Developer-Samples/tree/master/.NET%20Framework/Embed%20for%20your%20customers/AppOwnsData">PowerBI-Developer-Samples&#x2F;AppOwnsData</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;透過&lt;a href=&quot;https://github.com/rainmakerho/PowerBI-Developer-Samples/tr</summary>
      
    
    
    
    
    <category term="Power BI embedded" scheme="https://rainmakerho.github.io/tags/Power-BI-embedded/"/>
    
    <category term="AppOwnsData" scheme="https://rainmakerho.github.io/tags/AppOwnsData/"/>
    
    <category term="ReportEmbedConfig" scheme="https://rainmakerho.github.io/tags/ReportEmbedConfig/"/>
    
    <category term="EmbedToken" scheme="https://rainmakerho.github.io/tags/EmbedToken/"/>
    
    <category term="RLS" scheme="https://rainmakerho.github.io/tags/RLS/"/>
    
    <category term="EffectiveIdentity" scheme="https://rainmakerho.github.io/tags/EffectiveIdentity/"/>
    
  </entry>
  
  <entry>
    <title>TypeChat 將自然語言轉成定義好的物件</title>
    <link href="https://rainmakerho.github.io/2024/07/02/llm-language-2-type-typechat/"/>
    <id>https://rainmakerho.github.io/2024/07/02/llm-language-2-type-typechat/</id>
    <published>2024-07-02T05:07:46.000Z</published>
    <updated>2024-07-02T06:19:42.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我們可以透過 Prompt 來讓 LLM 產生我們需要的<code>Json</code>內容，<br>例如 請假、訂 Pizza … 。<br>現在我們可以透過<a href="https://github.com/microsoft/typechat.net">TypeChat.NET</a>來幫我們做到這件事。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>以下使用 Calendar 範例來測試，</p><p>1.加入以下 Nuget 套件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration.Binder</span><br><span class="line">Microsoft.Extensions.Configuration.Json</span><br><span class="line">Microsoft.TypeChat</span><br><span class="line">Microsoft.TypeChat.Schema</span><br></pre></td></tr></table></figure><p>2.將<a href="https://github.com/microsoft/typechat.net/blob/main/examples/typechat.examplesLib/Config.cs">Config.cs</a>及<a href="https://github.com/microsoft/typechat.net/blob/main/examples/Calendar/CalendarActionsSchema.cs">CalendarActionsSchema.cs</a>加到專案之中</p><p>3.在<code>appsettings.json</code>中加入 LLM 的設定值，如下，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For Azure OpenAI service</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;OpenAI&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Azure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ApiKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YOUR API KEY&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://YOUR_RESOURCE_NAME.openai.azure.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-35-turbo&quot;</span>  <span class="comment">// Name of Azure deployment</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For OpenAI Service:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;OpenAI&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Azure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ApiKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YOUR API KEY&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Endpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span>  <span class="comment">// Name of OpenAI model</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4.因為是關於日期，所以在轉換時，要在最後加上現在的時間，再一起透過<code>JsonTranslator</code>來轉換，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//載入 LLM Config</span></span><br><span class="line"><span class="keyword">var</span> config = Config.LoadOpenAI();</span><br><span class="line"><span class="comment">//建立 Translator</span></span><br><span class="line"><span class="keyword">var</span> translator = <span class="keyword">new</span> JsonTranslator&lt;CalendarActions&gt;(<span class="keyword">new</span> LanguageModel(config));</span><br><span class="line"><span class="comment">//SubscribeAllEvents(translator);</span></span><br><span class="line"><span class="built_in">string</span>[] inputs = [</span><br><span class="line">        <span class="string">&quot;我需要在 2024 年 7 月 15 日星期五中午 12:00 到下午 2:00 更換輪胎&quot;</span>,</span><br><span class="line">        <span class="string">&quot;為週五下午 6 點舉辦名為 Jeffs 披薩派對的活動&quot;</span>,</span><br><span class="line">        <span class="string">&quot;請在下週四將 Jennifer 添加到 scrum 中&quot;</span>,</span><br><span class="line">        <span class="string">&quot;您可以在上午 9 點與 Jerri Skinner 預約2個小時嗎？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;我下週的行程是什麼？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;預訂下週五上午 8:30 與 Sonali 和 Marc 就 GPU 效能舉行會議&quot;</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> TranslateCalendarActions(translator, inputs);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> Task <span class="title">TranslateCalendarActions</span>(<span class="params">JsonTranslator&lt;CalendarActions&gt; translator, <span class="built_in">string</span>[] inputs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dateTimeNow = DateTime.Now;</span><br><span class="line">    <span class="built_in">int</span> daysUntilMonday = ((<span class="built_in">int</span>)DayOfWeek.Monday - (<span class="built_in">int</span>)dateTimeNow.DayOfWeek + <span class="number">7</span>) % <span class="number">7</span>;</span><br><span class="line">    DateTime thisWeekMonday = dateTimeNow.AddDays(daysUntilMonday);</span><br><span class="line">    <span class="comment">// 計算下週的星期一</span></span><br><span class="line">    DateTime nextWeekMonday = thisWeekMonday.AddDays(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">var</span> nowDate = <span class="string">$&quot;<span class="subst">&#123;dateTimeNow:yyyy/MM/dd&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> nowTime = <span class="string">$&quot;<span class="subst">&#123;dateTimeNow:HH:mm:ss&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> nextWeek = <span class="string">$&quot;<span class="subst">&#123;nextWeekMonday:yyyy/MM/dd&#125;</span> <span class="subst">&#123;nextWeekMonday:HH:mm:ss&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> nextMonth = <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">new</span> DateTime(dateTimeNow.Year, dateTimeNow.Month, <span class="number">1</span>).AddMonths(<span class="number">1</span>):yyyy/MM/dd&#125;</span> <span class="subst">&#123;dateTimeNow:HH:mm:ss&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> now = <span class="string">$&quot;使用相對於當前日期的精確日期和時間: <span class="subst">&#123;nowDate&#125;</span> 現在時間: <span class="subst">&#123;nowTime&#125;</span>\n&quot;</span>;</span><br><span class="line">    <span class="comment">//now += $&quot;將下週和下個月等範圍轉換為精確日期&quot;;</span></span><br><span class="line">    now += <span class="string">$&quot;將下週(<span class="subst">&#123;nextWeek&#125;</span>)和下個月(<span class="subst">&#123;nextMonth&#125;</span>)等範圍轉換為精確日期&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> input <span class="keyword">in</span> inputs)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;=== Q:<span class="subst">&#123;input&#125;</span> ================================================&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> request = <span class="string">$&quot;<span class="subst">&#123;input&#125;</span>\n<span class="subst">&#123;now&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> actions = <span class="keyword">await</span> translator.TranslateAsync(request);</span><br><span class="line">        <span class="keyword">var</span> jsonString = Microsoft.TypeChat.Json.Stringify(actions);</span><br><span class="line">        <span class="built_in">string</span> deserializedJson = UnicodeToChinese(jsonString);</span><br><span class="line">        Console.WriteLine(deserializedJson);</span><br><span class="line">        PrintUnknown(actions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">PrintUnknown</span>(<span class="params">CalendarActions calendarActions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> countUnknown = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> action <span class="keyword">in</span> calendarActions.Actions)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (action <span class="keyword">is</span> UnknownAction unknown)</span><br><span class="line">        &#123;</span><br><span class="line">            ++countUnknown;</span><br><span class="line">            <span class="keyword">if</span> (countUnknown == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;I didn&#x27;t understand the following:&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(unknown.Text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> countUnknown &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">UnicodeToChinese</span>(<span class="params"><span class="built_in">string</span> input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Regex.Unescape(input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>測試日期為 2024&#x2F;07&#x2F;02，輸出結果如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">=== Q:我需要在 2024 年 7 月 15 日星期五中午 12:00 到下午 2:00 更換輪胎 ================================================</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;$type&quot;: &quot;AddEventAction&quot;,</span><br><span class="line">      &quot;event&quot;: &#123;</span><br><span class="line">        &quot;day&quot;: &quot;2024/07/15&quot;,</span><br><span class="line">        &quot;timeRange&quot;: &#123;</span><br><span class="line">          &quot;startTime&quot;: &quot;12:00&quot;,</span><br><span class="line">          &quot;endTime&quot;: &quot;14:00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;description&quot;: &quot;更換輪胎&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">=== Q:為週五下午 6 點舉辦名為 Jeffs 披薩派對的活動 ================================================</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;$type&quot;: &quot;AddEventAction&quot;,</span><br><span class="line">      &quot;event&quot;: &#123;</span><br><span class="line">        &quot;day&quot;: &quot;2024/07/05&quot;,</span><br><span class="line">        &quot;timeRange&quot;: &#123;</span><br><span class="line">          &quot;startTime&quot;: &quot;18:00&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;description&quot;: &quot;Jeffs 披薩派對&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">=== Q:請在下週四將 Jennifer 添加到 scrum 中 ================================================</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;$type&quot;: &quot;AddParticipantsAction&quot;,</span><br><span class="line">      &quot;eventReference&quot;: &#123;</span><br><span class="line">        &quot;day&quot;: &quot;2024/07/18&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;scrum&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;participants&quot;: [</span><br><span class="line">        &quot;Jennifer&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">=== Q:您可以在上午 9 點與 Jerri Skinner 預約2個小時嗎？ ================================================</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;$type&quot;: &quot;AddEventAction&quot;,</span><br><span class="line">      &quot;event&quot;: &#123;</span><br><span class="line">        &quot;day&quot;: &quot;2024/07/09&quot;,</span><br><span class="line">        &quot;timeRange&quot;: &#123;</span><br><span class="line">          &quot;startTime&quot;: &quot;09:00&quot;,</span><br><span class="line">          &quot;duration&quot;: &quot;2 hours&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;description&quot;: &quot;Meeting with Jerri Skinner&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">=== Q:我下週的行程是什麼？ ================================================</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;$type&quot;: &quot;FindEventsAction&quot;,</span><br><span class="line">      &quot;eventReference&quot;: &#123;</span><br><span class="line">        &quot;dayRange&quot;: &quot;2024/07/15 14:11:02 to 2024/07/21 14:11:02&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">=== Q:預訂下週五上午 8:30 與 Sonali 和 Marc 就 GPU 效能舉行會議 ================================================</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;$type&quot;: &quot;AddEventAction&quot;,</span><br><span class="line">      &quot;event&quot;: &#123;</span><br><span class="line">        &quot;day&quot;: &quot;2024/07/12&quot;,</span><br><span class="line">        &quot;timeRange&quot;: &#123;</span><br><span class="line">          &quot;startTime&quot;: &quot;08:30&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;description&quot;: &quot;與 Sonali 和 Marc 就 GPU 效能舉行會議&quot;,</span><br><span class="line">        &quot;participants&quot;: [</span><br><span class="line">          &quot;Sonali&quot;,</span><br><span class="line">          &quot;Marc&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，透過<a href="https://github.com/microsoft/typechat.net">TypeChat.NET</a>可以很方便用戶輸入的內容，<br>轉成所需要的物件。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/microsoft/typechat.net">TypeChat.NET</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我們可以透過 Prompt 來讓 LLM 產生我們需要的&lt;code&gt;Json&lt;/code&gt;內容，&lt;br&gt;例如 請假、訂 Pizza … 。&lt;</summary>
      
    
    
    
    
    <category term=".NET" scheme="https://rainmakerho.github.io/tags/NET/"/>
    
    <category term="LLM" scheme="https://rainmakerho.github.io/tags/LLM/"/>
    
    <category term="TypeChat" scheme="https://rainmakerho.github.io/tags/TypeChat/"/>
    
    <category term="JsonTranslator" scheme="https://rainmakerho.github.io/tags/JsonTranslator/"/>
    
  </entry>
  
  <entry>
    <title>將 Unicode escaped characters \uXXXX 轉回看得懂的字</title>
    <link href="https://rainmakerho.github.io/2024/07/01/unicode-escaped-for-chinese-characters/"/>
    <id>https://rainmakerho.github.io/2024/07/01/unicode-escaped-for-chinese-characters/</id>
    <published>2024-07-01T08:43:11.000Z</published>
    <updated>2024-07-01T09:05:57.033Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>Post 或是 Get 的 Json 物件，如果是中文字，會變成 <code>\uXXXX</code>，<br>例如<code>請</code>會是<code>\u8ACB</code>。<br>那要怎麼把<code>\u8ACB</code>轉回<code>請</code>呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>在 C# 可以使用 <code>Regex.Unescape</code>，例如，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Regex.Unescape(<span class="string">&quot;\u8ACB&quot;</span>); <span class="comment">//請</span></span><br></pre></td></tr></table></figure><p>在 JavaScript 可以使用 <code>decodeURIComponent</code>，例如，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&quot;\u8ACB&quot;</span>); <span class="comment">// 請</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;Post 或是 Get 的 Json 物件，如果是中文字，會變成 &lt;code&gt;\uXXXX&lt;/code&gt;，&lt;br&gt;例如&lt;code&gt;請&lt;/co</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Decode" scheme="https://rainmakerho.github.io/tags/Decode/"/>
    
    <category term="Unicode escaped" scheme="https://rainmakerho.github.io/tags/Unicode-escaped/"/>
    
    <category term="Json" scheme="https://rainmakerho.github.io/tags/Json/"/>
    
    <category term="Regex.Unescape" scheme="https://rainmakerho.github.io/tags/Regex-Unescape/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx | ASP.NET Core Minimal API Inject Service 會被掃出 Reflected_XSS_All_Clients</title>
    <link href="https://rainmakerho.github.io/2024/06/28/checkmarx-reflected-xss-all-clients-aspnet-minimal-api/"/>
    <id>https://rainmakerho.github.io/2024/06/28/checkmarx-reflected-xss-all-clients-aspnet-minimal-api/</id>
    <published>2024-06-28T09:04:00.000Z</published>
    <updated>2024-06-28T09:25:33.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>Checkmarx 版本為 V9.5.5.1007 HF14。<br>ASP.NET Core Minimal API 的程式中，<br>有 Inject Service 時，全都被 Checkmarx 判斷有*Reflected_XSS_All_Clients***的 Issue。<br>程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.MapGet(<span class="string">&quot;/users/&#123;userId&#125;&quot;</span>, (<span class="built_in">string</span> userId, [FromServices] IAccessControlService accessControlService) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> accessControlService.LoadUserAccessControlAsync(userId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Checkmarx 說明如下，</p><blockquote><p>方法 app.MapGet 在 Program.cs 的第 54 行使用 LoadUserAccessControlAsync 將不受信用的資料嵌入生成的輸出。這些不受信任的資料被嵌入輸出而沒有進行適當的消毒或編碼，使攻擊者能夠將惡意程式碼注入生成的網頁。</p></blockquote><blockquote><p>攻擊者可通過簡單地在使用者輸入 accessControlService 中提供修改過的資料，該資料由 Program.cs 中的 app.MapGet 方法在第 54 行讀取。然後該輸入資料直接通過程式碼流到輸出網頁，而不經過任何消毒處理。</p></blockquote><p><strong>在使用者輸入 accessControlService</strong>???，這個是系統的服務，怎麼會從使用者輸入取得呢?</p><p>看來 Checkmarx 應該是不認得<strong>ASP.NET Core Minimal API 注入 Service</strong>的寫法，<br>導致將注入的 Service 當成是使用者的輸入來判斷，而導致<strong>誤判</strong>。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>要等 Checkmarx 修正!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;Checkmarx 版本為 V9.5.5.1007 HF14。&lt;br&gt;ASP.NET Core Minimal API 的程式中，&lt;br&gt;有</summary>
      
    
    
    
    
    <category term="ASP.NET" scheme="https://rainmakerho.github.io/tags/ASP-NET/"/>
    
    <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
    <category term="Reflected_XSS_All_Clients" scheme="https://rainmakerho.github.io/tags/Reflected-XSS-All-Clients/"/>
    
    <category term="Minimal API" scheme="https://rainmakerho.github.io/tags/Minimal-API/"/>
    
  </entry>
  
  <entry>
    <title>Swashbuckle SwaggerUI 套用 CSP 錯誤的解法</title>
    <link href="https://rainmakerho.github.io/2024/06/25/swashbuckle-swaggerui-csp/"/>
    <id>https://rainmakerho.github.io/2024/06/25/swashbuckle-swaggerui-csp/</id>
    <published>2024-06-25T03:29:19.000Z</published>
    <updated>2024-06-25T05:22:46.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>當程式有設定 CSP(Content Security Policy)，值為<code>default-src &#39;self&#39;;</code>後，<br>會發現 SwaggerUI <code>index.html</code> 會一片白白的，<br>Browser 主控台就會顯示<code>CSP</code>的錯誤，如下，</p><blockquote><p>Refused to apply inline style because it violates the following Content Security Policy directive: “default-src ‘self’”. Either the ‘unsafe-inline’ keyword, a hash (‘sha256-wkAU1AW&#x2F;h8YFx0XlzvpTllAKnFEO2tw8aKErs5a26LY&#x3D;’), or a nonce (‘nonce-…’) is required to enable inline execution. Note also that ‘style-src’ was not explicitly set, so ‘default-src’ is used as a fallback.</p></blockquote><blockquote><p>Refused to execute inline script because it violates the following Content Security Policy directive: “default-src ‘self’”. Either the ‘unsafe-inline’ keyword, a hash (‘sha256-Tui7QoFlnLXkJCSl1&#x2F;JvEZdIXTmBttnWNxzJpXomQjg&#x3D;’), or a nonce (‘nonce-…’) is required to enable inline execution. Note also that ‘script-src’ was not explicitly set, so ‘default-src’ is used as a fallback.</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因為 SwaggerUI 有使用<strong>inline style</strong>及<strong>inline script</strong>，<br>所以被<strong>CSP</strong>的設定擋掉了。</p><h5 id="解法-1-加入-unsafe-inline"><a href="#解法-1-加入-unsafe-inline" class="headerlink" title="解法 1(加入 unsafe-inline)"></a>解法 1(加入 unsafe-inline)</h5><p>所以在<strong>CSP</strong>中可以加入<code>&#39;unsafe-inline&#39;</code> 及 image 的設定(<code>img-src data: https:;</code>)，如下，<br><code>default-src &#39;self&#39;;style-src &#39;self&#39; &#39;unsafe-inline&#39;;script-src &#39;self&#39; &#39;unsafe-inline&#39;;img-src data: https:;</code></p><h5 id="解法-2-使用-nonce"><a href="#解法-2-使用-nonce" class="headerlink" title="解法 2(使用 nonce)"></a>解法 2(使用 nonce)</h5><p>如果不想使用<code>&#39;unsafe-inline&#39;</code>, 那就需要使用<code>nonce</code>。<br>可以在<code>appsettings.json</code>中設定 CSP 的值及要使用的<code>nonce</code>，<br>將<code>&#39;unsafe-inline&#39;</code> 改以 <code>&#39;nonce-&#123;nonceValue&#125;&#39;</code> 替代，如下，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;CSP&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rxa0mkex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default-src &#x27;self&#x27;;style-src &#x27;self&#x27; &#x27;nonce-&#123;nonceValue&#125;&#x27;;script-src &#x27;self&#x27; &#x27;nonce-&#123;nonceValue&#125;&#x27;;img-src data: https:;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然後設定<strong>CSP</strong>，<code>nonce</code>的值，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cspNonce = _configuration[<span class="string">&quot;CSP:Nonce&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> cspContent = _configuration[<span class="string">&quot;CSP:Content&quot;</span>].Replace(<span class="string">&quot;&#123;nonceValue&#125;&quot;</span>, cspNonce);</span><br><span class="line">context.Response.Headers.Append(<span class="string">&quot;Content-Security-Policy&quot;</span>, cspContent);</span><br></pre></td></tr></table></figure><p>再參考<a href="https://mderriey.com/2020/12/14/how-to-lock-down-csp-using-swachbuckle/">How to lock down your CSP when using Swashbuckle</a>，<br>在 SwaggerUI 產生 index.html 時，將 inline script, style ，加上<strong>noce</strong>的值，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">options.SwaggerEndpoint(<span class="string">&quot;/swagger/v1/swagger.json&quot;</span>, <span class="string">&quot;Portal API&quot;</span>);</span><br><span class="line"><span class="comment">//加入處理 SwaggerUI CSP 問題</span></span><br><span class="line"><span class="keyword">var</span> originallIndexStreamFactory = options.IndexStream;</span><br><span class="line">options.IndexStream = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> originalStream = originallIndexStreamFactory();</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> originalStreamReader = <span class="keyword">new</span> StreamReader(originalStream); ;</span><br><span class="line">    <span class="keyword">var</span> originalIndexHtmlContents = originalStreamReader.ReadToEnd();</span><br><span class="line">    <span class="keyword">var</span> requestSpecificNonce = config[<span class="string">&quot;CSP:Nonce&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> nonceEnabledIndexHtmlContents = originalIndexHtmlContents</span><br><span class="line">    .Replace(<span class="string">&quot;&lt;script&gt;&quot;</span>, <span class="string">$&quot;&quot;</span><span class="string">&quot;&lt;script nonce=&quot;</span>&#123;requestSpecificNonce&#125;<span class="string">&quot;&gt;&quot;</span><span class="string">&quot;&quot;</span>, StringComparison.OrdinalIgnoreCase)</span><br><span class="line">    .Replace(<span class="string">&quot;&lt;style&gt;&quot;</span>, <span class="string">$&quot;&quot;</span><span class="string">&quot;&lt;style nonce=&quot;</span>&#123;requestSpecificNonce&#125;<span class="string">&quot;&gt;&quot;</span><span class="string">&quot;&quot;</span>, StringComparison.OrdinalIgnoreCase);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(nonceEnabledIndexHtmlContents));</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2024/06/25/swashbuckle-swaggerui-csp/01.png" class="" title="CSP-nonce"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mderriey.com/2020/12/14/how-to-lock-down-csp-using-swachbuckle/">How to lock down your CSP when using Swashbuckle</a></p><blockquote><p>一時花，二時雨: 喻人做事沒有恆心，毫無決斷力，有時好時壞。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;當程式有設定 CSP(Content Security Policy)，值為&lt;code&gt;default-src &amp;#39;self&amp;#39;</summary>
      
    
    
    
    
    <category term="Content-Security-Policy" scheme="https://rainmakerho.github.io/tags/Content-Security-Policy/"/>
    
    <category term="CSP" scheme="https://rainmakerho.github.io/tags/CSP/"/>
    
    <category term="Swashbuckle" scheme="https://rainmakerho.github.io/tags/Swashbuckle/"/>
    
    <category term="SwaggerUI" scheme="https://rainmakerho.github.io/tags/SwaggerUI/"/>
    
    <category term="SwaggerUIOptions" scheme="https://rainmakerho.github.io/tags/SwaggerUIOptions/"/>
    
  </entry>
  
  <entry>
    <title>為什麼VS.NET 2022新增Class時，都是 internal 呢?</title>
    <link href="https://rainmakerho.github.io/2024/06/24/vs-add-new-class-is-always-internal/"/>
    <id>https://rainmakerho.github.io/2024/06/24/vs-add-new-class-is-always-internal/</id>
    <published>2024-06-24T01:29:59.000Z</published>
    <updated>2024-06-24T03:06:20.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在 Microsoft Visual Studio 2022 新增一個 Class 時，<br>為什麼預設會是<code>internal</code>的 Class ，而不是<code>public</code>呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>可以參考<a href="https://stackoverflow.com/questions/700086/how-do-you-default-a-new-class-to-public-when-creating-it-in-visual-studio">How do you default a new class to public when creating it in Visual Studio?</a>，<br>修改<code>C:\Program Files\Microsoft Visual Studio\2022\版本\Common7\IDE\ItemTemplates\CSharp\Code\1033\Class\Class.cs</code>加上<code>public</code>。<br>上面 Code 目錄下的數值，請依地區版本來調整，例如，如果是 TW 版本的話，請 Code 請改成<code>1028</code>，如下<br><code>C:\Program Files\Microsoft Visual Studio\2022\版本\Common7\IDE\ItemTemplates\CSharp\Code\1028\Class\Class.cs</code>。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/700086/how-do-you-default-a-new-class-to-public-when-creating-it-in-visual-studio">How do you default a new class to public when creating it in Visual Studio?</a></p><blockquote><p>一發如雷，一敗如灰: 喻人做事，開始時如陣雨，銳不可當，但是，不到五分鐘，便煙消雲散。這種人缺乏毅力和恆心，不論才幹如何，終不能成大事。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;在 Microsoft Visual Studio 2022 新增一個 Class 時，&lt;br&gt;為什麼預設會是&lt;code&gt;internal&lt;</summary>
      
    
    
    
    
    <category term="class" scheme="https://rainmakerho.github.io/tags/class/"/>
    
    <category term="internal" scheme="https://rainmakerho.github.io/tags/internal/"/>
    
    <category term="VS 2022" scheme="https://rainmakerho.github.io/tags/VS-2022/"/>
    
    <category term="public" scheme="https://rainmakerho.github.io/tags/public/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx | Stream ToArray Read 會被掃出 Stored XSS</title>
    <link href="https://rainmakerho.github.io/2024/06/20/checkmarx-stored-xss-stream-toarray/"/>
    <id>https://rainmakerho.github.io/2024/06/20/checkmarx-stored-xss-stream-toarray/</id>
    <published>2024-06-20T01:28:05.000Z</published>
    <updated>2024-06-28T09:27:13.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近同事詢問為什麼程式中的<code>Stream.ToArray()</code>, <code>Stream.Read</code>會被 Checkmarx 判斷有<code>Stored XSS</code>的問題呢?<br>Checkmarx 版本為<strong>V9.5.5.1007 HF14</strong>。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Checkmarx 描述為，<br><strong>Stream.Read</strong></p><blockquote><p>使用 Read 生成輸出，但未經過適當的消毒或編碼就將不可信資料嵌入生成的輸出中，這使得攻擊者能夠注入惡意程式碼到生成的網頁中。</p></blockquote><p><strong>Stream.ToArray()</strong></p><blockquote><p>使用 ToArray 生成輸出，但未經過適當的消毒或編碼就將不可信資料嵌入生成的輸出中，這使得攻擊者能夠注入惡意程式碼到生成的網頁中。</p></blockquote><p>看 Checkmarx Rule ，如果輸出為 File 可以加入<code>X-Content-Type-Options</code>Header , 值為<code>nosniff</code> 來避免 XSS。<br>但加入後，問題還是存在，應該是 Checkmarx 的 Bug 吧~<br>透過 Jer 測試後發現，在 Checkmarx<strong>V9.6</strong>就不會有這問題~~<br>所以目前的解法可以請原廠拿<strong>V9.6</strong>的 C# Stored XSS Rule 匯到<strong>V9.5</strong>中。<br>或是改做法來避開，<br><code>Stream.ToArray()</code> 就改用 <code>BinaryReader</code> 如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//byte[] fileContent = stream.ToArray();</span></span><br><span class="line"><span class="built_in">byte</span>[] fileContent = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> binaryReader = <span class="keyword">new</span> BinaryReader(stream))</span><br><span class="line">&#123;</span><br><span class="line">    stream.Position = <span class="number">0</span>;</span><br><span class="line">    fileContent =  binaryReader.ReadBytes((<span class="built_in">int</span>)stream.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Stream.Read</code> 就改用<code>StreamReader</code>，例如</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream, Encoding.UTF8, leaveOpen: <span class="literal">true</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> requestBody = <span class="keyword">await</span> reader.ReadToEndAsync();</span><br><span class="line">    <span class="keyword">return</span> requestBody;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>註: <code>X-Content-Type-Options</code>設為<code>nosniff</code>可避免<strong>MIME 嗅探（MIME sniffing)<strong>，<br>為什麼</strong>MIME 嗅探（MIME sniffing)<strong>會有 XSS 問題呢?<br>例如，如果原本<code>Content-Type</code>設定為<code>text/plain</code>，但裡面包含<code>HTML</code>, <code>JavaScript</code>，<br>Browser 可能會把它當成是 HTML 來執行，就有可能會執行<code>JavaScript</code>，而產生</strong>XSS</strong>問題。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a></p><blockquote><p>一把粉抹在後頭窩: 喻人顧後不顧前，不要臉面。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近同事詢問為什麼程式中的&lt;code&gt;Stream.ToArray()&lt;/code&gt;, &lt;code&gt;Stream.Read&lt;/code&gt;會被</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
    <category term="Stream" scheme="https://rainmakerho.github.io/tags/Stream/"/>
    
    <category term="MemoryStream" scheme="https://rainmakerho.github.io/tags/MemoryStream/"/>
    
    <category term="ToArray" scheme="https://rainmakerho.github.io/tags/ToArray/"/>
    
    <category term="Read" scheme="https://rainmakerho.github.io/tags/Read/"/>
    
    <category term="BinaryReader" scheme="https://rainmakerho.github.io/tags/BinaryReader/"/>
    
  </entry>
  
  <entry>
    <title>MSSQL 運算元類型衝突 varchar 與 nvarchar encrypted with (encryption_type = ... 不相容的錯誤</title>
    <link href="https://rainmakerho.github.io/2024/06/18/mssql-data-types-nvarchar-encrypted-with-encryption/"/>
    <id>https://rainmakerho.github.io/2024/06/18/mssql-data-types-nvarchar-encrypted-with-encryption/</id>
    <published>2024-06-18T05:21:47.000Z</published>
    <updated>2024-06-18T05:42:27.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近同事透過 SSMS 針對加密欄位查詢時，會發生<code>運算元類型衝突</code>的錯誤，如下，</p><blockquote><p>訊息 206，層級 16，<br>運算元類型衝突: varchar 與 nvarchar(300) encrypted with (encryption_type &#x3D; ‘DETERMINISTIC’, encryption_algorithm_name &#x3D; ‘AEAD_AES_256_CBC_HMAC_SHA_256’,…) 不相容</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>SQL 如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> top <span class="number">1</span> 加密欄位 <span class="keyword">FROM</span> DOC</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">-- 運算元類型衝突: varchar 與 nvarchar(300) encrypted 不相容</span></span><br></pre></td></tr></table></figure><p>查看一下錯誤訊息想說 SQL 不是會自動 Convert 嗎?<br>即然不行，就手動 Convert 成 nvarchar(300)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> top <span class="number">1</span> 加密欄位 <span class="keyword">FROM</span> DOC</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;&#x27;</span> <span class="keyword">as</span> nvarchar(<span class="number">300</span>))</span><br><span class="line"><span class="comment">-- 運算元類型衝突: nvarchar 與 nvarchar(300) encrypted 不相容</span></span><br></pre></td></tr></table></figure><p>結果錯誤變成了，<code>運算元類型衝突: nvarchar 與 nvarchar(300) encrypted ... 不相容 </code></p><p>後來參考<a href="https://learn.microsoft.com/zh-tw/sql/relational-databases/security/encryption/always-encrypted-query-columns-ssms?view=sql-server-ver16">使用 Always Encrypted 與 SQL Server Management Studio 查詢資料行</a>，<br>與<strong>加密欄位</strong>打交道，需要使用<strong>參數</strong>才行，<br>如果是 Where 條件，則有可能會是 <code>equal to 運算子中的資料類型 nvarchar(300) encrypted with ... 不相容</code><br>所以 SQL 要改成以<strong>參數</strong>的方式，如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@r</span> nvarchar(<span class="number">300</span>) <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> top <span class="number">1</span> 加密欄位 <span class="keyword">FROM</span> DOC</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@r</span></span><br><span class="line"><span class="comment">-- 運算元類型衝突: nvarchar 與 nvarchar(300) encrypted 不相容</span></span><br></pre></td></tr></table></figure><ul><li>註:在執行 SQL 時，請確認該機器有安裝憑證，不然會有<code>無法使用金鑰存放區提供者 &#39;MSSQL_CERTIFICATE_STORE&#39; 解密資料行加密金鑰</code>的錯誤哦</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/zh-tw/sql/relational-databases/security/encryption/always-encrypted-query-columns-ssms?view=sql-server-ver16">使用 Always Encrypted 與 SQL Server Management Studio 查詢資料行</a></p><blockquote><p>一把柴火不拾，燒啥? : 喻人做事毫無準備，難達願望。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近同事透過 SSMS 針對加密欄位查詢時，會發生&lt;code&gt;運算元類型衝突&lt;/code&gt;的錯誤，如下，&lt;/p&gt;
&lt;blockquote&gt;
</summary>
      
    
    
    
    
    <category term="mssql" scheme="https://rainmakerho.github.io/tags/mssql/"/>
    
    <category term="Always Encrypted" scheme="https://rainmakerho.github.io/tags/Always-Encrypted/"/>
    
    <category term="運算元類型衝突" scheme="https://rainmakerho.github.io/tags/%E9%81%8B%E7%AE%97%E5%85%83%E9%A1%9E%E5%9E%8B%E8%A1%9D%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx | Potential Clickjacking on Legacy Browsers</title>
    <link href="https://rainmakerho.github.io/2024/06/14/checkmarx-potential-clickjacking-on-legacy-browsers/"/>
    <id>https://rainmakerho.github.io/2024/06/14/checkmarx-potential-clickjacking-on-legacy-browsers/</id>
    <published>2024-06-14T06:24:33.000Z</published>
    <updated>2024-06-28T09:27:06.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近同事將 aspx 程式給 Checkmarx 掃時，<br>aspx 會出現 JavaScript 的 <code>Potential Clickjacking on Legacy Browsers</code> 問題。</p><img src="/2024/06/14/checkmarx-potential-clickjacking-on-legacy-browsers/01.png" class="" title="Checkmarx"><p>主要是因為這支程式中有<code>&lt;script&gt;</code>區段，Checkmarx 就會噴那個問題。</p><p><strong>Potential Clickjacking on Legacy Browsers</strong>的問題是怕正常的網頁被放在 IFrame 之中，<br>來騙使用者進行非預期的操作，例如<a href="https://github.com/rainmakerho/OWASPMVC5/blob/main/MyStore/Attacker.MyStore/Views/WinSurfacePro/Index.cshtml">Clickjacking</a>詐騙的網頁中放一個改密碼的 iframe，<br>去覆蓋在原有的頁面上面，讓使用者實際上是操作到 iframe 的頁面。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>所以解法可透過設定<code>X-Frame-Options</code>及<code>Content Security Policy (CSP)</code>來避免，<br>例如在 <code>web.config</code>中設定如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SAMEORIGIN&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;frame-ancestors &#x27;self&#x27;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但上面的方式 Checkmarx 不認得，所以就只能用程式來解，如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (top !== self) &#123;</span><br><span class="line">    top.<span class="property">location</span> = self.<span class="property">location</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但這樣子加上去後，又噴了<code>Client_DOM_XSS</code>及<code>Client_DOM_Open_Redirect</code>的問題，<br>針對 <code>self.location</code> 要進行<code>Client_DOM_XSS</code>及<code>Client_DOM_Open_Redirect</code>處理，<br>所以可以使用<code>encodeURI</code>來處理<code>Client_DOM_XSS</code>，<br>用白名單 Function 來處理<code>Client_DOM_Open_Redirect</code>，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (top !== self) &#123;</span><br><span class="line">    <span class="comment">//top.location = self.location;</span></span><br><span class="line">    <span class="keyword">var</span> u = <span class="built_in">encodeURI</span>(self.<span class="property">location</span>);</span><br><span class="line">    <span class="keyword">var</span> newU = <span class="title function_">sanitizeUrl</span>(u)</span><br><span class="line">    top.<span class="property">location</span> = newU;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">functin <span class="title function_">sanitizeUrl</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> allowedDomains = [<span class="string">&quot;白名單的Domain，例如 rm.com.tw&quot;</span>];</span><br><span class="line">    <span class="keyword">var</span> u = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">    <span class="keyword">if</span> (allowedDomains.<span class="title function_">includes</span>(u.<span class="property">hostname</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Parameter is not a number!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>註 1: 白名單 Function 要以<code>sanitize</code>開頭<br>註 2: Checkmarx 版本為 <code>V 9.5.5.1007 HF14</code><br>註 3: aspx 會有這個問題是因為 aspx 裡面有寫 <code>&lt;script&gt;</code> 才會有問題</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/rainmakerho/OWASPMVC5">OWASP Top 10 - 2017 Examples - ASP.NET MVC 5</a></p><blockquote><p>一個蛋，不能算一隻雞: 假設就是假設，不能當作事實。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近同事將 aspx 程式給 Checkmarx 掃時，&lt;br&gt;aspx 會出現 JavaScript 的 &lt;code&gt;Potential </summary>
      
    
    
    
    
    <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
    <category term="Client_DOM_Open_Redirect" scheme="https://rainmakerho.github.io/tags/Client-DOM-Open-Redirect/"/>
    
    <category term="Potential Clickjacking on Legacy Browsers" scheme="https://rainmakerho.github.io/tags/Potential-Clickjacking-on-Legacy-Browsers/"/>
    
    <category term="Client_DOM_XSS" scheme="https://rainmakerho.github.io/tags/Client-DOM-XSS/"/>
    
  </entry>
  
  <entry>
    <title>Windows Task 排程 Error 0x41301</title>
    <link href="https://rainmakerho.github.io/2024/06/07/windows-task-0x41301/"/>
    <id>https://rainmakerho.github.io/2024/06/07/windows-task-0x41301/</id>
    <published>2024-06-07T03:03:09.000Z</published>
    <updated>2024-06-07T03:23:30.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>同事詢問設定 Windows 排程執行 Bat 檔案，<br>設定成<code>只有使用者登入時才執行(R)</code>可以正常執行，<br>設定成<code>不論使用者登入與否均執行(W)</code>卻會發生<code>0x41301</code>的錯誤</p><h3 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h3><p>檢查</p><p>1.在「條件」Tab，有勾選<code>喚醒電腦以執行此工作(W)</code></p><p>2.執行的使用者也在 Administrators 群組之中</p><p>3.有勾選<code>以最高權限執行(I)</code></p><p>4.檢查 bat 中的內容是否有會卡住、等待的語法，</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello World</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>居然有<strong>pause</strong>在 bat 檔中 …. 問題找到了…<br>請同事不要使用 pause 會卡住執行的語法，問題就解了哦~</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://blog.csdn.net/weixin_44635274/article/details/107923716">windows 任务计划程序 0x41301 问题解决方法</a><br><a href="https://davidhu0903ex3.pixnet.net/blog/post/453551861-%5B%E5%B7%B2%E8%A7%A3%E6%B1%BA%5D-%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%99%A8---%E8%87%AA%E5%8B%95%E5%96%9A%E9%86%92%E5%9F%B7%E8%A1%8C">工作排程器 - 自動喚醒執行 (0x41301)(0x800710E0)</a></p><blockquote><p>一家門口，一個天: 各有各的生活環境，各有各的生活方式。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;同事詢問設定 Windows 排程執行 Bat 檔案，&lt;br&gt;設定成&lt;code&gt;只有使用者登入時才執行(R)&lt;/code&gt;可以正常執行，&lt;b</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://rainmakerho.github.io/tags/Windows/"/>
    
    <category term="267009" scheme="https://rainmakerho.github.io/tags/267009/"/>
    
    <category term="Task" scheme="https://rainmakerho.github.io/tags/Task/"/>
    
    <category term="排程" scheme="https://rainmakerho.github.io/tags/%E6%8E%92%E7%A8%8B/"/>
    
    <category term="Pause" scheme="https://rainmakerho.github.io/tags/Pause/"/>
    
    <category term="bat" scheme="https://rainmakerho.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Call 網頁時，沒帶著 Cookie 呢?</title>
    <link href="https://rainmakerho.github.io/2024/06/06/not-sending-cookies/"/>
    <id>https://rainmakerho.github.io/2024/06/06/not-sending-cookies/</id>
    <published>2024-06-06T06:29:40.000Z</published>
    <updated>2024-06-07T03:22:13.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>我們的程式架構是使用 React (簡稱 F) + ASP.NET Core API (簡稱 B)，<br>在 Local 開發時，會呼叫 B API 進行登入並寫下帳號的 Cookie ，<br>再 Redirect 回到 前端 F。<br>因為 B 已有 Cookie 存在，所以 F 透過 axios 設定 <code>withCredentials: true</code>，<br>讓 F 打 API 時，會帶著 B 的 Cookie ，就可以順利呼叫 API。<br>今天有同事詢問，為什麼他的 Chrome 一直無法登入呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>查看後端程式會確實將 Cookie 寫進去，但在呼叫 API 時，就是不會帶著 B 的 Cookie 。<br>如果直接輸入 B 的 URL，又是會有 Cookie 。<br>但是在 F 透過 axios 去 GET B 的 URL ，就是不會有 Cookie 。<br>請同事改用 Edge 卻是沒問題的，會正常帶著 B 的 Cookie 。</p><p>後來同事想到他有調整 Chrome 的 <strong>第三方 Cookie</strong>的設定(chrome:&#x2F;&#x2F;settings&#x2F;cookies)，<br>他是設定成<code>封鎖第三方 Cookie</code>，所以透過 axios 去 Request 都不會帶著 Cookie。<br>將它調整回<code>允許第三方 Cookie</code> 就沒問題了。</p><img src="/2024/06/06/not-sending-cookies/01.png" class="" title="第三方 Cookie設定"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://support.google.com/chrome/answer/95647?hl=zh-Hant&co=GENIE.Platform=Desktop">在 Chrome 中刪除、允許使用與管理 Cookie</a></p><blockquote><p>一知半解，最易僨事: 不知之謂知，知之謂不知，遇事只知皮毛，而自以為知，這種人最易壞事。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;我們的程式架構是使用 React (簡稱 F) + ASP.NET Core API (簡稱 B)，&lt;br&gt;在 Local 開發時，會呼叫 </summary>
      
    
    
    
    
    <category term="axios" scheme="https://rainmakerho.github.io/tags/axios/"/>
    
    <category term="cookies" scheme="https://rainmakerho.github.io/tags/cookies/"/>
    
    <category term="withCredentials" scheme="https://rainmakerho.github.io/tags/withCredentials/"/>
    
    <category term="第三方 Cookie" scheme="https://rainmakerho.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9-Cookie/"/>
    
  </entry>
  
  <entry>
    <title>遠端電腦需要網路層級驗證，但您的電腦並不支援。</title>
    <link href="https://rainmakerho.github.io/2024/06/06/mstsc-credssp/"/>
    <id>https://rainmakerho.github.io/2024/06/06/mstsc-credssp/</id>
    <published>2024-06-06T03:47:56.000Z</published>
    <updated>2024-06-07T03:22:08.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>透過 遠端桌面連線(mstsc.exe) 來連接電腦時，會出現<code>遠端電腦需要網路層級驗證，但您的電腦並不支援。如需協助，請連絡您的系統管理員或技術支援人員。</code>的錯誤。如下圖，</p><img src="/2024/06/06/mstsc-credssp/01.png" class="" title="遠端電腦需要網路層級驗證"><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>按下<code>顯示選項(O)</code>，按下<code>另存新檔(V)</code>的 Button，<br>將它存成 <code>rdp</code> 檔案。<br>再用筆記本將它打開，尋找<code>enablecredsspsupport</code>的值，<br>原本的值為<code>enablecredsspsupport:i:0</code>，<br>將它改成<code>enablecredsspsupport:i:1</code> 存檔後，<br>再開啟它去連遠端電腦應該就可以了哦~<br>內容大約如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">full address:s:你的電腦:3389</span><br><span class="line">prompt for credentials:i:1</span><br><span class="line">enablecredsspsupport:i:1</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/rdp-files">Supported RDP properties with Remote Desktop Services</a></p><blockquote><p>一登龍門，聲價十倍: 文章經過名人品題，名聲馬上就高起來。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;透過 遠端桌面連線(mstsc.exe) 來連接電腦時，會出現&lt;code&gt;遠端電腦需要網路層級驗證，但您的電腦並不支援。如需協助，請連絡您的</summary>
      
    
    
    
    
    <category term="Windows 10" scheme="https://rainmakerho.github.io/tags/Windows-10/"/>
    
    <category term="RDP" scheme="https://rainmakerho.github.io/tags/RDP/"/>
    
    <category term="CredSSP" scheme="https://rainmakerho.github.io/tags/CredSSP/"/>
    
    <category term="mstsc" scheme="https://rainmakerho.github.io/tags/mstsc/"/>
    
    <category term="遠端桌面" scheme="https://rainmakerho.github.io/tags/%E9%81%A0%E7%AB%AF%E6%A1%8C%E9%9D%A2/"/>
    
    <category term="網路層級驗證" scheme="https://rainmakerho.github.io/tags/%E7%B6%B2%E8%B7%AF%E5%B1%A4%E7%B4%9A%E9%A9%97%E8%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 打造 AI 面試官</title>
    <link href="https://rainmakerho.github.io/2024/05/31/sk-ai-interviewer/"/>
    <id>https://rainmakerho.github.io/2024/05/31/sk-ai-interviewer/</id>
    <published>2024-05-31T00:53:58.000Z</published>
    <updated>2024-05-31T01:59:32.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大家常常會向 ChatGPT 詢問程式相關的解答，所以反過來，也可以讓 ChatGPT 來詢問我們一些問題，<br>用以評量我們對於許多主題的熟悉程度，相當於是一個 AI 面試官。<br>以下介紹，透過設定 System message 的方式，來讓 ChatGPT 變成一位 AI 面試官。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>一開始設定 <code>System message</code>告訴 ChatGPT 擔任 ASP.NET Core 的面試官，<br>會出問題，並針對面試者的答案判斷正確與否並給評價&#x2F;評分。</p><p>面試完成後，詢問 ChatGPT 來做綜合評論及評分。程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chatDeploymentName = <span class="string">&quot;gpt4 or gpt4-o&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;aoai endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;apikey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = Kernel.CreateBuilder()</span><br><span class="line">            .AddAzureOpenAIChatCompletion(chatDeploymentName, endpoint, apikey);</span><br><span class="line"><span class="keyword">var</span> kernel = builder.Build();</span><br><span class="line">IChatCompletionService chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line"><span class="comment">//設定面試題目</span></span><br><span class="line"><span class="keyword">var</span> questionCount = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//給ChatGPT 設定角色</span></span><br><span class="line">ChatHistory chatMessages = <span class="keyword">new</span>(<span class="string">$@&quot;</span></span><br><span class="line"><span class="string">你是一個AI面試官，專門針對 ASP.NET Core 技術進行面試，以zh-TW進行。你的任務是提出相關問題，接收應徵者的回答，並評估他們的答案是否正確，給出專業評論。請按照以下指示進行面試。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 你的問題應涵蓋以下所有 ASP.NET Core 重要的主題，每次面試時隨機選擇和排列問題</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 總共<span class="subst">&#123;questionCount&#125;</span>個題目</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 在應徵者回答後，你需要：</span></span><br><span class="line"><span class="string">    - 比較應徵者的答案與標準答案</span></span><br><span class="line"><span class="string">    - 給出是否正確的評價</span></span><br><span class="line"><span class="string">    - 如果回答錯誤，提供正確答案並解釋正確答案的原因</span></span><br><span class="line"><span class="string">    - 如果題目不是最後一題，就再提出下個問題</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 評分標準：</span></span><br><span class="line"><span class="string">    - 每個問題的答案完全正確，給予10分</span></span><br><span class="line"><span class="string">    - 部分正確的答案，根據回答的完整度和準確性給予1至8分：</span></span><br><span class="line"><span class="string">        - 完整且大部分正確，給予8分</span></span><br><span class="line"><span class="string">        - 大部分正確，但有一些小錯誤或遺漏，給予6至7分</span></span><br><span class="line"><span class="string">        - 部分正確，但有顯著錯誤或缺失，給予4至5分</span></span><br><span class="line"><span class="string">        - 有些正確點，但大部分錯誤或遺漏，給予2至3分</span></span><br><span class="line"><span class="string">        - 少部分正確點，但整體錯誤，給予1分</span></span><br><span class="line"><span class="string">    - 每個問題的答案完全錯誤，給予0分</span></span><br><span class="line"><span class="string">    - 綜合評分將基於<span class="subst">&#123;questionCount&#125;</span>個問題的總得分進行換算（例如：回答全部正確為100分）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 在每個題目後，只提供正確答案。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 問題範例輸出如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">問題1.ASP.NET Core 如何實現依賴注入 (Dependency Injection)?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">問題2.請解釋 ASP.NET Core 中的中介軟體 (Middleware) 是什麼，以及它在請求處理管道中的作用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">請根據這些範例設計問題並進行面試。確保你的評價是清楚且具體的，幫助應徵者理解他們的答案的正確與否以及原因。</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;請輸入您的名稱後開始進行面試，輸入 exit 就結束對話。&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">OpenAIPromptExecutionSettings openAIPromptExecutionSettings = <span class="keyword">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,</span><br><span class="line">    Temperature = <span class="number">0.7</span></span><br><span class="line">&#125;;</span><br><span class="line">Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">Console.Write(<span class="string">&quot;User &gt; &quot;</span>);</span><br><span class="line"><span class="keyword">var</span> userInput = System.Console.ReadLine()!;</span><br><span class="line"><span class="keyword">var</span> qIdx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(userInput) &amp;&amp; userInput.ToLower() != <span class="string">&quot;exit&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    chatMessages.AddUserMessage(<span class="string">$&quot;面試者姓名:<span class="subst">&#123;userInput&#125;</span>，請開始出題。&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qIdx++; <span class="comment">//計算面試題目</span></span><br><span class="line">        <span class="keyword">var</span> result = chatCompletionService.GetStreamingChatMessageContentsAsync(</span><br><span class="line">            chatMessages,</span><br><span class="line">            executionSettings: openAIPromptExecutionSettings,</span><br><span class="line">            kernel: kernel);</span><br><span class="line">        <span class="built_in">string</span> fullMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">        Console.ForegroundColor = ConsoleColor.DarkGreen;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> content <span class="keyword">in</span> result)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(content.Content);</span><br><span class="line">            fullMessage += content.Content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        <span class="comment">//已完成面試</span></span><br><span class="line">        <span class="keyword">if</span> (qIdx &gt; questionCount) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//評論與問題</span></span><br><span class="line">        chatMessages.AddAssistantMessage(fullMessage);</span><br><span class="line">        Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">        Console.Write(<span class="string">&quot;User &gt; &quot;</span>);</span><br><span class="line">        userInput = System.Console.ReadLine()!;</span><br><span class="line">        chatMessages.AddUserMessage(<span class="string">$&quot;<span class="subst">&#123;userInput&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最後取得整體的專業評論</span></span><br><span class="line">    chatMessages.AddUserMessage(<span class="string">&quot;請根據以上的面試的結果，給出整體的專業評論及分數(0~100分)，不需針對每個題目評論及標準答案。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> finallResult = chatCompletionService.GetStreamingChatMessageContentsAsync(</span><br><span class="line">            chatMessages,</span><br><span class="line">            executionSettings: openAIPromptExecutionSettings,</span><br><span class="line">            kernel: kernel);</span><br><span class="line">    Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">    Console.ForegroundColor = ConsoleColor.DarkGreen;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> content <span class="keyword">in</span> finallResult)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(content.Content);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ForegroundColor = ConsoleColor.DarkRed;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;結束對話...&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以一開始輸入名字後，GPT 就會開始顯示問題，面試者回答後，就會給出評價，</p><img src="/2024/05/31/sk-ai-interviewer/01.png" class="" title="面試回答及AI評價"><p>面試結束後，給出整體的專業評論及分數</p><img src="/2024/05/31/sk-ai-interviewer/02.png" class="" title="整體評論及分數"><p>以上就是透過 <code>System Message</code> 來讓 GPT 成為 AI 面試官，<br>大家可以調整 <code>System Message</code> 來符合想要的 AI 面試官。</p><ul><li>註: 以上的 System message 目前在 GPT-4&#x2F;GPT-4o 測試過。</li><li>註: 建議使用 GPT4-o，價格比 GPT4 便宜，速度比較快</li></ul><blockquote><p>一馬不行百馬憂: 比喻一個團體，領導者不得其正，則屬下人等，都會受到影響。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大家常常會向 ChatGPT 詢問程式相關的解答，所以反過來，也可以讓 ChatGPT 來詢問我們一些問題，&lt;br&gt;用以評量我們對於許多主題</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="AI 面試官" scheme="https://rainmakerho.github.io/tags/AI-%E9%9D%A2%E8%A9%A6%E5%AE%98/"/>
    
    <category term="AI Interviewer" scheme="https://rainmakerho.github.io/tags/AI-Interviewer/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 使用 Phi-3 SLM</title>
    <link href="https://rainmakerho.github.io/2024/05/06/sk-phi-3-local/"/>
    <id>https://rainmakerho.github.io/2024/05/06/sk-phi-3-local/</id>
    <published>2024-05-06T09:39:31.000Z</published>
    <updated>2024-05-07T05:19:01.280Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2024/03/29/sk-local-llm-server/">連接 LM Studio Local Phi-2 Server</a>中透過<strong>LM Studio</strong>下載 Phi-2 來運行。<br>之前透過<code>AddAzureOpenAIChatCompletion</code>還需要實作<code>HttpClientHandler</code>。<br>看到<a href="https://laurentkempe.com/2024/05/01/run-phi-3-slm-on-your-machine-with-csharp-semantic-kernel-and-ollama/">Run Phi-3 SLM on your machine with C# Semantic Kernel and Ollama</a>後，<br>所以改用<code>AddOpenAIChatCompletion</code>就不需要自行去實作<code>HttpClientHandler</code>。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>最近可以下載<strong>Phi-3</strong>，所以透過<strong>LM Studio</strong>下載<strong>Phi-3</strong>來測試。</p><img src="/2024/05/06/sk-phi-3-local/01.png" class="" title="LM Studio Server"><p>從上圖可以找到，對話的 Endpoint 是 <code>http://localhost:1234/v1/chat/completions</code>，<br>apikey 是<code>lm-studio</code>，modelId 或是 deploymentName 可以自由給，<br>所以程式改寫如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.ChatCompletion;</span><br><span class="line"></span><br><span class="line">Console.OutputEncoding = Encoding.UTF8;</span><br><span class="line"><span class="keyword">var</span> deploymentName = <span class="string">&quot;phi-3&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;http://localhost:1234/v1/chat/completions&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;lm-studio&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">//kernelBuilder.AddAzureOpenAIChatCompletion(deploymentName, endpoint, apikey, httpClient: httpClient);</span></span><br><span class="line">kernelBuilder.AddOpenAIChatCompletion(modelId: deploymentName, endpoint: <span class="keyword">new</span> Uri(endpoint), apiKey:apikey);</span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder.Build();</span><br><span class="line"><span class="keyword">var</span> ai = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line">ChatHistory chat = <span class="keyword">new</span>(<span class="string">&quot;請以繁體中文並簡要地回答問題，不用說明。&quot;</span>);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;Question: &quot;</span>);</span><br><span class="line">    chat.AddUserMessage(Console.ReadLine()!);</span><br><span class="line">    builder.Clear();</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> message <span class="keyword">in</span> ai.GetStreamingChatMessageContentsAsync(chat, kernel: kernel))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(message);</span><br><span class="line">        builder.Append(message.Content);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    chat.AddAssistantMessage(builder.ToString());</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行結果如下，</p><img src="/2024/05/06/sk-phi-3-local/02.png" class="" title="Result"><p>或是加入<code>Microsoft.SemanticKernel.Connectors.HuggingFace</code>套件，<br>使用<code>AddHuggingFaceChatCompletion</code> Method 也可以哦，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Microsoft.SemanticKernel.ChatCompletion;</span><br><span class="line"></span><br><span class="line">Console.OutputEncoding = Encoding.UTF8;</span><br><span class="line"><span class="keyword">var</span> deploymentName = <span class="string">&quot;phi-3&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;http://localhost:1234&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;lm-studio&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line"><span class="comment">//kernelBuilder.AddAzureOpenAIChatCompletion(deploymentName, endpoint, apikey, httpClient: httpClient);</span></span><br><span class="line"><span class="comment">//kernelBuilder.AddOpenAIChatCompletion(modelId: deploymentName, endpoint: new Uri(endpoint), apiKey: apikey);</span></span><br><span class="line">kernelBuilder.AddHuggingFaceChatCompletion(model: deploymentName, endpoint: <span class="keyword">new</span> Uri(endpoint), apiKey: apikey);</span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder.Build();</span><br><span class="line"><span class="keyword">var</span> ai = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line">ChatHistory chat = <span class="keyword">new</span>(<span class="string">&quot;請以繁體中文並簡要地回答問題，不用說明。&quot;</span>);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;Question: &quot;</span>);</span><br><span class="line">    chat.AddUserMessage(Console.ReadLine()!);</span><br><span class="line">    builder.Clear();</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> message <span class="keyword">in</span> ai.GetStreamingChatMessageContentsAsync(chat, kernel: kernel))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(message);</span><br><span class="line">        builder.Append(message.Content);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    chat.AddAssistantMessage(builder.ToString());</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>註: endpoint 各 Method 都有所不同，所以使用上要注意。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://laurentkempe.com/2024/05/01/run-phi-3-slm-on-your-machine-with-csharp-semantic-kernel-and-ollama/">Run Phi-3 SLM on your machine with C# Semantic Kernel and Ollama</a><br><a href="https://rainmakerho.github.io/2024/03/29/sk-local-llm-server/">連接 LM Studio Local Phi-2 Server</a></p><blockquote><p>一門生意兩門做 - 手法不同: 一樣的買賣，兩種手段。個人有各人的手法。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2024/03/29/sk-local-llm-server</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="LM Studio" scheme="https://rainmakerho.github.io/tags/LM-Studio/"/>
    
    <category term="Local Server" scheme="https://rainmakerho.github.io/tags/Local-Server/"/>
    
    <category term="Phi-3" scheme="https://rainmakerho.github.io/tags/Phi-3/"/>
    
    <category term="AddOpenAIChatCompletion" scheme="https://rainmakerho.github.io/tags/AddOpenAIChatCompletion/"/>
    
    <category term="AddHuggingFaceChatCompletion" scheme="https://rainmakerho.github.io/tags/AddHuggingFaceChatCompletion/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 探索 Semantic Kernel ToolCallBehavior.EnableKernelFunctions</title>
    <link href="https://rainmakerho.github.io/2024/05/03/sk-enable-kernel-functions/"/>
    <id>https://rainmakerho.github.io/2024/05/03/sk-enable-kernel-functions/</id>
    <published>2024-05-03T02:52:34.000Z</published>
    <updated>2024-05-07T01:13:10.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/">探索 Semantic Kernel 在客服 ChatBot 中的應用</a>中，<br>提供一個<code>Plugin</code>並設定<code>ToolCallBehavior.AutoInvokeKernelFunctions</code>，<br>Semantic Kernel 就會自動依使用者意圖幫我們收集使用者的資訊並呼叫<code>Plugin</code>，<br>直到完成使用者的問題。為什麼它會如此聰明呢? 就讓我們深入了解一番 …</p><h3 id="OpenAI-Function-calling-機制"><a href="#OpenAI-Function-calling-機制" class="headerlink" title="OpenAI Function calling 機制"></a>OpenAI Function calling 機制</h3><p><a href="https://platform.openai.com/docs/guides/function-calling">OpenAI Function calling</a>的功能，<br>可以判斷使用者的問題來決定是否要呼叫訊息中提供的<strong>Functions</strong>，例如，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;messsages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;今天日期是?&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Now&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get the current date and time in the local time zone&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Today&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get the current date&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果需要呼叫某個<strong>Function</strong>則會回傳要呼叫該<strong>Function</strong>的內容(Function Name 及 參數)，例如，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;function_call&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Today&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function_call&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>註:因為要 Call Function，所以 message 中的<code>content</code>的值為<code>null</code></li></ul><p>如果<strong>Function</strong>所需的參數沒在上述對話記錄中，Open AI 則會回問題跟使用者取得資料。<br>當我們收到 Open AI 需要我們呼叫<strong>Function</strong>的資訊，<br>我們的程式就去執行該<strong>Function</strong>並帶入參數，<br>取得結果後，將該結果加到對話記錄之中，<br>再讓 Open AI 判斷需要再執行別的<strong>Function</strong>或是將總結給使用者，例如，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;messsages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;今天日期是?&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Friday, 03 May 2024&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Perform the next step of the plan if there is more work to do. When you have reached a final answer, summary the answer back to the user.&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Now&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get the current date and time in the local time zone&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Today&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get the current date&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最後 OpenAI 判斷不需要再呼叫<strong>Function</strong>，就將結果回傳給使用者，例如，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;今天的日期是2024年5月3日，星期五。&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stop&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ToolCallBehavior-EnableKernelFunctions"><a href="#ToolCallBehavior-EnableKernelFunctions" class="headerlink" title="ToolCallBehavior.EnableKernelFunctions"></a>ToolCallBehavior.EnableKernelFunctions</h3><p>以下我們設定<code>ToolCallBehavior.EnableKernelFunctions</code>來看<a href="https://platform.openai.com/docs/guides/function-calling">OpenAI Function calling</a>的過程，</p><p><strong>1.建立 Semantic Kernel ，並載入<code>TimePlugin</code> Plugin</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chatDeploymentName = <span class="string">&quot;aoai的 chat model，例如 gpt4-32k&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;aoai endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;aoai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line">kernelBuilder.Services.AddAzureOpenAIChatCompletion(</span><br><span class="line">    chatDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey</span><br><span class="line">);</span><br><span class="line">builder.Plugins.AddFromType&lt;TimePlugin&gt;();</span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder.Build();</span><br></pre></td></tr></table></figure><p><strong>2.設定對話流程</strong><br>先將<code>systemMessage</code>寫到對話記錄之中，並依對話過程來加入<code>ChatHistory chatMessages</code>之中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">IChatCompletionService chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line">ChatHistory chatMessages = <span class="keyword">new</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Answer the questions as accurately as possible using the provided functions.</span></span><br><span class="line"><span class="string">    Continue the conversation acting as the ASSISTANT.</span></span><br><span class="line"><span class="string">    Respond to the USER by using available information and functions.</span></span><br><span class="line"><span class="string">    Use zh-TW.</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// Start the conversation</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;User &gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> userInput = System.Console.ReadLine()!;</span><br><span class="line">    <span class="keyword">if</span> (userInput == <span class="string">&quot;exit&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chatMessages.AddUserMessage(userInput);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> GetEndResult(chatMessages, kernel);</span><br><span class="line">    Console.Write(<span class="string">$&quot;Assistant &gt; &quot;</span>);</span><br><span class="line">    Console.Write(result.Content);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    chatMessages.AddAssistantMessage(result.Content);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;結束對話...&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>3.處理 OpenAI 回傳的結果</strong><br>設定<code>ToolCallBehavior</code>為<code>ToolCallBehavior.EnableKernelFunctions</code>，<br>取得 OpenAI 回傳的結果，來判斷需要呼叫<strong>Function</strong>與否，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;ChatMessageContent&gt; <span class="title">GetEndResult</span>(<span class="params">ChatHistory chatMessages, Kernel kernel</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IChatCompletionService chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line">    OpenAIPromptExecutionSettings openAIPromptExecutionSettings = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//啟用 Function-calling(半自動), AutoInvokeKernelFunctions 為全自動</span></span><br><span class="line">        ToolCallBehavior = ToolCallBehavior.EnableKernelFunctions</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> chatCompletionService.GetChatMessageContentAsync(</span><br><span class="line">        chatMessages,</span><br><span class="line">        openAIPromptExecutionSettings,</span><br><span class="line">        kernel: kernel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check functionCalls</span></span><br><span class="line">    <span class="keyword">var</span> functionCalls = (result <span class="keyword">as</span> OpenAIChatMessageContent)!.GetOpenAIFunctionToolCalls();</span><br><span class="line">    <span class="keyword">if</span> (functionCalls != <span class="literal">null</span> &amp;&amp; functionCalls.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> functionCall <span class="keyword">in</span> functionCalls)</span><br><span class="line">        &#123;</span><br><span class="line">            KernelFunction pluginFunction;</span><br><span class="line">            KernelArguments arguments;</span><br><span class="line">            kernel.Plugins.TryGetFunctionAndArguments(functionCall, <span class="keyword">out</span> pluginFunction, <span class="keyword">out</span> arguments);</span><br><span class="line">            <span class="keyword">var</span> functionResult = <span class="keyword">await</span> kernel.InvokeAsync(pluginFunction!, arguments);</span><br><span class="line">            <span class="keyword">var</span> jsonResponse = functionResult.GetValue&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line">            <span class="keyword">var</span> json = JsonSerializer.Serialize(jsonResponse);</span><br><span class="line">            chatMessages.AddMessage(AuthorRole.Tool, json);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Call Function:<span class="subst">&#123;functionCall.FunctionName&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Function Result:<span class="subst">&#123;json&#125;</span>&quot;</span>);</span><br><span class="line">            chatMessages.AddUserMessage(<span class="string">&quot;Perform the next step of the plan if there is more work to do. When you have reached a final answer, summary the answer back to the user.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="keyword">await</span> GetEndResult(chatMessages, kernel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次呼叫完<strong>Function</strong>後，就將結果加入<code>chatMessages</code>(角色為:<code>Tool</code>)，<br>最後要加上讓 OpenAI 判斷還有無需要呼叫<strong>Function</strong>，<br>沒有的話，就將結果傳回給 OpenAI 進行總結，回覆給使用者。</p><p>測試結果如下，</p><img src="/2024/05/03/sk-enable-kernel-functions/01.png" class="" title="Result"><ul><li>註:以下為使用 SK 版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.SemanticKernel 1.6.3</span><br><span class="line">Microsoft.KernelMemory.Core 0.35.240321.1</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://platform.openai.com/docs/guides/function-calling">OpenAI Function calling</a><br><a href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/">探索 Semantic Kernel 在客服 ChatBot 中的應用</a></p><blockquote><p>一爭二醜，一讓二有: 人與人之間，若能彼此謙讓，則雙方可以得益;遇事斤斤計較，則不僅雙方受到損失，更為別人製造機會。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2024/04/02/sk-exploring-applic</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="ToolCallBehavior" scheme="https://rainmakerho.github.io/tags/ToolCallBehavior/"/>
    
    <category term="EnableKernelFunctions" scheme="https://rainmakerho.github.io/tags/EnableKernelFunctions/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Web Forms 取得 Azure AD 使用者的 Token</title>
    <link href="https://rainmakerho.github.io/2024/05/02/aspnet-webform-aad-token/"/>
    <id>https://rainmakerho.github.io/2024/05/02/aspnet-webform-aad-token/</id>
    <published>2024-05-02T08:07:22.000Z</published>
    <updated>2024-05-02T09:20:14.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 ASPX 中如何取得 Azure AD 使用者的 Token 呢?<br>當使用者按下登入時，跳轉到 Azure AD 登入頁，讓使用者輸入帳&#x2F;密後，<br>轉回本系統驗證沒問題後，設定使用者登入(FormsAuthentication)</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p><strong>1.註冊 App</strong><br>要使用 Azure AD 登入要先在 Microsoft Entra ID 的 App registrations 新增一個 App，<br>並設定 Redirect URI。建立好之後，可以在<strong>Overview</strong>中看到需要的許多資訊，<br><code>Application (client) ID</code>, <code>Directory (tenant) ID</code> …<br>因為是 ASPX ，所以走 OAuth 2.0 Code Flow，需要 <code>authorization endpoint</code> 及 <code>token endpoint</code>。<br>可以按下<strong>Endpoints</strong>就可以知道它們的 URL，如下，</p><img src="/2024/05/02/aspnet-webform-aad-token/01.png" class="" title="Endpoints"><p><strong>2.secrets</strong><br>取回 Token 需要有<code>client_secret</code>，所以到<strong>Certificates &amp; secrets</strong>，<br>建立一個<strong>Client secret</strong>，建立好之後要馬上將<strong>Value</strong>複制下來。</p><p><strong>3.程式-轉址到 Azure AD 登入頁</strong><br>當 App 準備完成後，就可以將 App 的資訊寫到設定檔中，讓程式呼叫使用。所以在 <code>aspx.cs</code> 中設定變數值如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _clientId = <span class="string">&quot;你的clientId&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _clientSecret = <span class="string">&quot;你的clientSecret&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _aadAuthEndpoint = <span class="string">$&quot;https://login.microsoftonline.com/你的 authorize Endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _aadTokenEndpoint = <span class="string">&quot;https://login.microsoftonline.com/你的 token Endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _redirectUri = <span class="string">@&quot;https://你的程式Url&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] _scopes = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;openid&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;profile&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>如果需要<code>refresh_token</code>, <code>scopes</code>可多加上<code>offline_access</code></p><p>然後畫面的 Button 按下登入的 Click 事件中，要組出 Redirect 到 authorize 的 URL，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = Guid.NewGuid().ToString();</span><br><span class="line">Session[<span class="string">&quot;state&quot;</span>] = state;</span><br><span class="line"><span class="built_in">string</span> redirectURL = <span class="string">$&quot;<span class="subst">&#123;_aadAuthEndpoint&#125;</span>?response_type=code&amp;client_id=<span class="subst">&#123;_clientId&#125;</span>&amp;redirect_url=<span class="subst">&#123;_redirectUri&#125;</span>&amp;scope=<span class="subst">&#123;<span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, _scopes)&#125;</span>&amp;state=<span class="subst">&#123;state&#125;</span>&quot;</span>;</span><br><span class="line">Response.Redirect(redirectURL);</span><br></pre></td></tr></table></figure><p><code>state</code>記在 Session 中等 Azure AD 登入完成後，轉址回來時，要驗證是否一致。</p><p><strong>3.程式-接收 Azure AD 回傳的 Code</strong><br>在 Page_Load 的 Get 時，判斷是否有<code>state</code>及<code>code</code>參數，<br>如果存在驗證<code>state</code>相同後，取得<code>code</code>，再透過<code>code</code>來取回<strong>Token</strong>資訊，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Response.Write(<span class="string">$&quot;是否已登入:<span class="subst">&#123;User.Identity.IsAuthenticated&#125;</span>&lt;hr&gt;user:<span class="subst">&#123;User.Identity.Name&#125;</span>&lt;hr&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!Page.IsPostBack)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> state = Request.QueryString[<span class="string">&quot;state&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(state))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> apSate = (<span class="built_in">string</span>)Session[<span class="string">&quot;state&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.Compare(state, apSate) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//與先前建立的state相同才取得code參數值</span></span><br><span class="line">                <span class="built_in">string</span> code = Request.QueryString[<span class="string">&quot;code&quot;</span>];</span><br><span class="line">                <span class="comment">//透過 code 取回 token 並設定登入</span></span><br><span class="line">                ProcLoginByCode(code);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (User.Identity.IsAuthenticated)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//aspx中的 label 元件，顯示 token 的 claims</span></span><br><span class="line">                lblInfo.Text = <span class="built_in">string</span>.Empty;</span><br><span class="line">                ShowIdTokenClaims();</span><br><span class="line">                ShowAccessTokenClaims();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcLoginByCode</span>(<span class="params"><span class="built_in">string</span> code</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;client_id&quot;</span>, _clientId&#125;,</span><br><span class="line">        &#123; <span class="string">&quot;client_secret&quot;</span>, _clientSecret&#125;,</span><br><span class="line">        &#123; <span class="string">&quot;redirect_uri&quot;</span>, _redirectUri &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;code&quot;</span>, code&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">new</span> FormUrlEncodedContent(postData);</span><br><span class="line">    HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    <span class="keyword">var</span> response = client.PostAsync(_aadTokenEndpoint, content).Result;</span><br><span class="line">    <span class="keyword">var</span> data = response.Content.ReadAsStringAsync().Result;</span><br><span class="line">    <span class="built_in">dynamic</span> tokenObj = JsonConvert.DeserializeObject(data);</span><br><span class="line">    <span class="comment">//將id_token&amp;access_token存到session</span></span><br><span class="line">    Session[<span class="string">&quot;idToken&quot;</span>] = <span class="string">$&quot;<span class="subst">&#123;tokenObj.id_token&#125;</span>&quot;</span>;</span><br><span class="line">    Session[<span class="string">&quot;accessToken&quot;</span>] = <span class="string">$&quot;<span class="subst">&#123;tokenObj.access_token&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> idToken = <span class="keyword">new</span> JwtSecurityToken(<span class="string">$&quot;<span class="subst">&#123;tokenObj.id_token&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> userName = idToken.Claims.FirstOrDefault(c =&gt; c.Type == <span class="string">&quot;email&quot;</span>).Value;</span><br><span class="line">    FormsAuthentication.RedirectFromLoginPage(userName, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要顯示 Token 中 Claims 的內容，可以透過<code>JwtSecurityToken</code>，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowIdTokenClaims</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    lblInfo.Text += <span class="string">&quot;========== ID Token ==============&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> token = <span class="string">$&quot;<span class="subst">&#123;Session[<span class="string">&quot;idToken&quot;</span>]&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> jwt = <span class="keyword">new</span> JwtSecurityToken(token);</span><br><span class="line">        ResponseClaims(jwt.Claims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowAccessTokenClaims</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    lblInfo.Text += <span class="string">&quot;========== Access Token ==============&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> token = <span class="string">$&quot;<span class="subst">&#123;Session[<span class="string">&quot;accessToken&quot;</span>]&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> jwt = <span class="keyword">new</span> JwtSecurityToken(token);</span><br><span class="line">        ResponseClaims(jwt.Claims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResponseClaims</span>(<span class="params">IEnumerable&lt;Claim&gt; claims</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> claims)</span><br><span class="line">    &#123;</span><br><span class="line">        lblInfo.Text += <span class="string">$&quot;<span class="subst">&#123;claim.Type&#125;</span>:<span class="subst">&#123;claim.Value&#125;</span>&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要登入，則清空 Session 值並登出，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Session[<span class="string">&quot;idToken&quot;</span>] = <span class="built_in">string</span>.Empty;</span><br><span class="line">Session[<span class="string">&quot;accessToken&quot;</span>] = <span class="built_in">string</span>.Empty;</span><br><span class="line">lblInfo.Text=<span class="built_in">string</span>.Empty;</span><br><span class="line">FormsAuthentication.SignOut();</span><br><span class="line">Response.Redirect(_redirectUri);</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a><br><a href="https://learn.microsoft.com/zh-tw/entra/identity-platform/v2-oauth2-auth-code-flow">Microsoft 身分識別平台和 OAuth 2.0 授權碼流程</a></p><blockquote><p>一言既出，駟馬難追: 一個人說出去的話，都要負責任，決不可中途變卦。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 ASPX 中如何取得 Azure AD 使用者的 Token 呢?&lt;br&gt;當使用者按下登入時，跳轉到 Azure AD 登入頁，讓使用者</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="ASPX" scheme="https://rainmakerho.github.io/tags/ASPX/"/>
    
    <category term="Azure AD" scheme="https://rainmakerho.github.io/tags/Azure-AD/"/>
    
    <category term="OAuth" scheme="https://rainmakerho.github.io/tags/OAuth/"/>
    
    <category term="Code" scheme="https://rainmakerho.github.io/tags/Code/"/>
    
    <category term="id_token" scheme="https://rainmakerho.github.io/tags/id-token/"/>
    
    <category term="access_token" scheme="https://rainmakerho.github.io/tags/access-token/"/>
    
    <category term="FormsAuthentication" scheme="https://rainmakerho.github.io/tags/FormsAuthentication/"/>
    
  </entry>
  
  <entry>
    <title>npm install 出現 UNABLE_TO_VERIFY_LEAF_SIGNATURE(unable to verify the first certificate) 的錯誤</title>
    <link href="https://rainmakerho.github.io/2024/04/19/npm-install-UNABLE-TO-VERIFY-LEAF-SIGNATURE/"/>
    <id>https://rainmakerho.github.io/2024/04/19/npm-install-UNABLE-TO-VERIFY-LEAF-SIGNATURE/</id>
    <published>2024-04-19T08:52:47.000Z</published>
    <updated>2024-04-19T09:40:47.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天同事透過<code>npm install</code>時發生了<strong>UNABLE_TO_VERIFY_LEAF_SIGNATURE</strong>的錯誤。<br>原本以為只有那台電腦有問題，結果大家的電腦都是如此。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>網路上大多數的都是設定 npm 去忽略憑證問題，如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> strict-ssl <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>等裝好之後，再設定回<strong>true</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> strict-ssl <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>錄到網路如下，</p><img src="/2024/04/19/npm-install-UNABLE-TO-VERIFY-LEAF-SIGNATURE/01.png" class="" title="執行結果"><p>後來同事 Marty 找到<a href="https://stackoverflow.com/questions/78343601/node-unable-to-verify-the-first-certificate">Node unable to verify the first certificate</a>，是因為 ESET 自簽憑證的問題。</p><p>所以在目前 ESET 未給出解法前，除了設定 ESET 先不掃<code>node.exe</code>外，<br>就是要安裝套件前先設定<code>strict-ssl false</code>後，<br>安裝好之後，再設定<code>strict-ssl true</code>回來。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/78343601/node-unable-to-verify-the-first-certificate">Node unable to verify the first certificate</a><br><a href="https://forum.eset.com/topic/40702-eset-ssl-protection-produces-an-invalid-certificate-chain-for-nodejs-apps/">ESET SSL protection produces an invalid certificate chain for NodeJS apps</a></p><blockquote><p>一杯酒，暖烘烘;一尺布，擋那風: 一杯酒尚能抵一陣寒，一尺布，卻無濟於事。喻某些東西雖然為數不多，仍能濟一時之急。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天同事透過&lt;code&gt;npm install&lt;/code&gt;時發生了&lt;strong&gt;UNABLE_TO_VERIFY_LEAF_SIGNAT</summary>
      
    
    
    
    
    <category term="npm" scheme="https://rainmakerho.github.io/tags/npm/"/>
    
    <category term="SSL" scheme="https://rainmakerho.github.io/tags/SSL/"/>
    
    <category term="ESET" scheme="https://rainmakerho.github.io/tags/ESET/"/>
    
    <category term="UNABLE_TO_VERIFY_LEAF_SIGNATURE" scheme="https://rainmakerho.github.io/tags/UNABLE-TO-VERIFY-LEAF-SIGNATURE/"/>
    
    <category term="unable to verify the first certificate" scheme="https://rainmakerho.github.io/tags/unable-to-verify-the-first-certificate/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 如何透過Kernel Memory對RAG資料的進行權限控管</title>
    <link href="https://rainmakerho.github.io/2024/04/16/sk-kernel-memory-RAG-Security/"/>
    <id>https://rainmakerho.github.io/2024/04/16/sk-kernel-memory-RAG-Security/</id>
    <published>2024-04-16T01:55:02.000Z</published>
    <updated>2024-04-16T08:47:13.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2023/12/26/sk-kernel-memory-postgresql/">Kernel Memory (KM) 使用 Postgres 當 Vector DB</a>中，<br>我們將許多文件的內容轉成 Vector 放到 PostgreSQL 之中，進行查詢。<br>然而在企業應用中，查詢時要依使用者的權限進行過濾，在<strong>Kernel Memory</strong>中要如何做呢?</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>依<a href="https://microsoft.github.io/kernel-memory/security/filters">Kernel Memory Security Filters</a>可以在查詢時進行過濾。<br><strong>1.先將 2 份文件(km1.txt, km2.txt)放到 PostgreSQL</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postgresqlConnstring = <span class="string">&quot;postgresqlConnstring&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> azureAIChatOptions = <span class="keyword">new</span> AzureOpenAIConfig &#123; Auth= AzureOpenAIConfig.AuthTypes.APIKey,  APIKey = <span class="string">&quot;apikey&quot;</span>, Endpoint = <span class="string">&quot;aoai endpoint&quot;</span>, Deployment = <span class="string">&quot;deployment name&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> azureAIEmbeddingOptions = <span class="keyword">new</span> AzureOpenAIConfig &#123; Auth = AzureOpenAIConfig.AuthTypes.APIKey,  APIKey = <span class="string">&quot;apikey&quot;</span>, Endpoint = <span class="string">&quot;aoai endpoint&quot;</span>, Deployment = <span class="string">&quot;deployment name&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> kernelMemoryBuilder = <span class="keyword">new</span> KernelMemoryBuilder()</span><br><span class="line">    .WithPostgresMemoryDb(postgresqlConnstring)</span><br><span class="line">    .WithAzureOpenAITextGeneration(azureAIChatOptions)</span><br><span class="line">    .WithAzureOpenAITextEmbeddingGeneration(azureAIEmbeddingOptions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kernelMemory = kernelMemoryBuilder.Build();</span><br><span class="line"><span class="comment">//先存file</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="string">&quot;km1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> docId1 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">await</span> kernelMemory.ImportDocumentAsync(<span class="keyword">new</span> Document(docId1)</span><br><span class="line">   .AddFile(<span class="string">@&quot;C:\docs\km1.txt&quot;</span>) <span class="comment">//說明 kernel memory</span></span><br><span class="line">   .AddTag(<span class="string">&quot;id&quot;</span>, docId1)</span><br><span class="line">   .AddTag(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;user1&quot;</span>)</span><br><span class="line">   , index: index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> docId2 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">await</span> kernelMemory.ImportDocumentAsync(<span class="keyword">new</span> Document(docId2)</span><br><span class="line">   .AddFile(<span class="string">@&quot;C:\docs\km2.txt&quot;</span>) <span class="comment">//說明 kernel memory</span></span><br><span class="line">   .AddTag(<span class="string">&quot;id&quot;</span>, docId2)</span><br><span class="line">   .AddTag(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;user2&quot;</span>)</span><br><span class="line">   , index: index);</span><br></pre></td></tr></table></figure><p><strong>2.查詢時，依文件 id 過濾</strong><br>假設使用者只允許讀取<code>km1.txt</code>，所以在查詢時，可以加上<code>filter</code> or <code>filters</code>(要使用<code>OR</code>條件)，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> question = <span class="string">&quot;Kernel Memory 是什麼?&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer = <span class="keyword">await</span> kernelMemory.AskAsync(question</span><br><span class="line">    , filters: <span class="keyword">new</span> List&lt;MemoryFilter&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    MemoryFilters.ByDocument(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    ,</span><br><span class="line">                    <span class="comment">// or</span></span><br><span class="line">                    <span class="comment">//MemoryFilters.ByTag(&quot;id&quot;, &quot;2&quot;)</span></span><br><span class="line">                &#125;</span><br><span class="line">    ,index: index);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nQuestion: <span class="subst">&#123;question&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nAnswer: <span class="subst">&#123;answer.Result&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot; ====== 參考資訊 ======&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> answer.RelevantSources)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Source:<span class="subst">&#123;r.SourceName&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以結果只會從<code>km1.txt</code>的內容來產生。<br>上面的做法是依使用者可以存取到的文件來加入<code>filters</code>之中，<br>就可以做到<strong>對 RAG 資料的進行權限控管</strong><br>結果如下，</p><img src="/2024/04/16/sk-kernel-memory-RAG-Security/01.png" class="" title="AskAsync"><blockquote><p>Q.但如果將查詢到的資料源，自已過濾後，再產生答案呢?</p></blockquote><p>那就不能使用<code>AskAsync</code>，而要使用<code>SearchAsync</code>將相似的內容找出來後，再進行過濾(假設只取<code>km1.txt</code>)<br><strong>3.自行過濾文件再產生結果</strong><br>參考<a href="https://github.com/microsoft/kernel-memory/blob/main/service/Core/Search/SearchClient.cs">Kernel Memory-SearchClient.cs</a>中的<code>AskAsync</code>來自行過濾，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> noAnswerFound = <span class="keyword">new</span> MemoryAnswer</span><br><span class="line">&#123;</span><br><span class="line">    Question = question,</span><br><span class="line">    NoResult = <span class="literal">true</span>,</span><br><span class="line">    Result = <span class="string">&quot;INFO NOT FOUND&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> selfAnswer = noAnswerFound;</span><br><span class="line"><span class="keyword">var</span> searchResult = <span class="keyword">await</span> kernelMemory.SearchAsync(question, index: index);</span><br><span class="line"><span class="keyword">var</span> facts = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> searchResult.Results)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.DocumentId== <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> r.Partitions)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> fact = <span class="string">$&quot;==== [File:<span class="subst">&#123;r.SourceName&#125;</span>;Relevance:<span class="subst">&#123;p.Relevance:P1&#125;</span>]:\n<span class="subst">&#123;p.Text&#125;</span>\n&quot;</span>;</span><br><span class="line">            facts.Append(fact);</span><br><span class="line">        &#125;</span><br><span class="line">        selfAnswer.RelevantSources.Add(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//產生答案</span></span><br><span class="line"><span class="keyword">var</span> answerWithFacts = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Facts:</span></span><br><span class="line"><span class="string">    &#123;&#123;$facts&#125;&#125;</span></span><br><span class="line"><span class="string">    ======</span></span><br><span class="line"><span class="string">    Given only the facts above, provide a comprehensive/detailed answer.</span></span><br><span class="line"><span class="string">    You don&#x27;t know where the knowledge comes from, just answer.</span></span><br><span class="line"><span class="string">    If you don&#x27;t have sufficient information, reply with &#x27;INFO NOT FOUND&#x27;.</span></span><br><span class="line"><span class="string">    Question: &#123;&#123;$input&#125;&#125;</span></span><br><span class="line"><span class="string">    Answer:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> prompt = answerWithFacts.Replace(<span class="string">&quot;&#123;&#123;$facts&#125;&#125;&quot;</span>, facts.ToString().Trim(), StringComparison.OrdinalIgnoreCase);</span><br><span class="line">question = question.EndsWith(<span class="string">&#x27;?&#x27;</span>) ? question : <span class="string">$&quot;<span class="subst">&#123;question&#125;</span>?&quot;</span>;</span><br><span class="line">prompt = prompt.Replace(<span class="string">&quot;&#123;&#123;$input&#125;&#125;&quot;</span>, question, StringComparison.OrdinalIgnoreCase);</span><br><span class="line"><span class="keyword">var</span> textGenerator = kernelMemoryBuilder.GetOrchestrator().GetTextGenerator();</span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> TextGenerationOptions</span><br><span class="line">&#123;</span><br><span class="line">    Temperature = <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> generateResult = textGenerator.GenerateTextAsync(prompt, options);</span><br><span class="line"><span class="keyword">var</span> generateText = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> x <span class="keyword">in</span> generateResult.ConfigureAwait(<span class="literal">false</span>))</span><br><span class="line">&#123;</span><br><span class="line">    generateText.Append(x);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nQuestion: <span class="subst">&#123;question&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nAnswer: <span class="subst">&#123;generateText.ToString()&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot; ====== 參考資訊 ======&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> selfAnswer.RelevantSources)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Source:<span class="subst">&#123;r.SourceName&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過<code>SearchAsync</code>取得結果後，再自行針對來源進行過濾，再將組合好的內容透過<code>TextGenerator</code>來產生結果。<br>結果如下，</p><img src="/2024/04/16/sk-kernel-memory-RAG-Security/02.png" class="" title="自行過濾內容再產生結果"><ul><li>註:請再針對查無資料進行處理。</li></ul><p>以上介紹透過 Kernel Memory 提供的 Security Filters 方式，<br>及自行進行資料權控過濾的方式，透過 Kernel Memory 真的很方便。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2023/12/26/sk-kernel-memory-postgresql/">Kernel Memory (KM) 使用 Postgres 當 Vector DB</a><br><a href="https://microsoft.github.io/kernel-memory/security/filters">Kernel Memory Security Filters</a><br><a href="https://community.openai.com/t/how-are-people-ensuring-secure-access-to-rag-data/649348">How are people ensuring secure access to RAG data</a><br><a href="https://github.com/microsoft/kernel-memory/blob/main/service/Core/Search/SearchClient.cs">Kernel Memory-SearchClient.cs</a></p><blockquote><p>一滴水一個泡，一報還一報: 因果循環，報應必爽，勸人要行好事，尊德性。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2023/12/26/sk-kernel-memory-po</summary>
      
    
    
    
    
    <category term="RBAC" scheme="https://rainmakerho.github.io/tags/RBAC/"/>
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="Kernel Memory" scheme="https://rainmakerho.github.io/tags/Kernel-Memory/"/>
    
    <category term="RAG" scheme="https://rainmakerho.github.io/tags/RAG/"/>
    
    <category term="Security" scheme="https://rainmakerho.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 透過改變 Prompt 來限制用戶題問範圍及解決參數幻覺問題</title>
    <link href="https://rainmakerho.github.io/2024/04/08/sk-prompt-solve-hallucinate/"/>
    <id>https://rainmakerho.github.io/2024/04/08/sk-prompt-solve-hallucinate/</id>
    <published>2024-04-08T03:36:44.000Z</published>
    <updated>2024-04-17T06:17:18.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/">探索 Semantic Kernel 在客服 ChatBot 中的應用(我的客服 Bot 除了會說，還會做)</a>這篇之中，<br>學到了透過 Semantic Kernel 可以快速打造出客服對話機器人。<br>但如果用戶輸入詢問風景等問題，還是會呼叫我們的 Ask Function，<br>所以我們要限定 AI 只能回覆特定的問題。<br>接 Gpt 3.5 API 時，有時會有<strong>參數幻覺問題(hallucinate parameters)</strong><br>所以我們參考<a href="https://community.openai.com/t/make-gpt-ask-questions-to-the-user/284436">Make gpt ask questions to the user</a>的方式，<br>來改變<strong>systemmessage prompt</strong>，看看是否能解決這些問題。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>將<strong>systemMessage</strong>改成限定只有線上購物相關的議題才會呼叫 Function，<br>不然就要一直跟 User 說明跟網購相關的問題才能詢問，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ChatHistory chatMessages = <span class="keyword">new</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">### Operational parameters</span></span><br><span class="line"><span class="string">You are an AI chatbot. You are provided conversational history to examine the information you have previously gathered. Use zh-TW.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Goals</span></span><br><span class="line"><span class="string">Your goal is to collect online shopping related questions from users efficiently.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Rules</span></span><br><span class="line"><span class="string">- AI must prompt and require users to provide information related to online shopping.</span></span><br><span class="line"><span class="string">- AI will only engage in conversation after receiving all necessary information.</span></span><br><span class="line"><span class="string">- Assume users may provide inconsistent or deceptive information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Function</span></span><br><span class="line"><span class="string">Do not call the backend function to process user data until all required information is provided.</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>將程式跑起來後，詢問無關問題時，會被引導只能詢問網購相關問題，<br>改接<strong>Gpt 3.5 API</strong>也不會再出現<strong>參數幻覺問題 hallucinate parameters</strong>，如下圖，</p><img src="/2024/04/08/sk-prompt-solve-hallucinate/01.png" class="" title="執行結果"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://community.openai.com/t/make-gpt-ask-questions-to-the-user/284436">Make gpt ask questions to the user</a><br><a href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/">探索 Semantic Kernel 在客服 ChatBot 中的應用(我的客服 Bot 除了會說，還會做)</a></p><blockquote><p>一隻鷺鶿守一個灘: 比喻每個人有每個人的工作。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2024/04/02/sk-exploring-applic</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="prompt" scheme="https://rainmakerho.github.io/tags/prompt/"/>
    
    <category term="hallucinate" scheme="https://rainmakerho.github.io/tags/hallucinate/"/>
    
    <category term="systemMessage" scheme="https://rainmakerho.github.io/tags/systemMessage/"/>
    
    <category term="參數幻覺" scheme="https://rainmakerho.github.io/tags/%E5%8F%83%E6%95%B8%E5%B9%BB%E8%A6%BA/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 探索 Semantic Kernel 在客服 ChatBot 中的應用(我的客服Bot除了會說，還會做)</title>
    <link href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/"/>
    <id>https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/</id>
    <published>2024-04-02T02:19:37.000Z</published>
    <updated>2024-04-02T04:06:50.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前的客服對話機器人，可以讓用戶詢問 FAQ 的內容。<br>如果用戶有其他的服務，就需要判斷用戶的<strong>意圖</strong>，走那個意圖的流程。<br>例如，判斷到用戶輸入<strong>要退貨</strong>，走<strong>退貨</strong>的流程，<br>跑一個退貨的卡片出來，或是一個問題一個問題地讓用戶輸入我們所需要的資料。<br>所以客服對話機器人後端可能需要<br><strong>1.FAQ 的問答集</strong>，<strong>2.取用戶意圖的服務</strong>，<strong>3.取得對話中的 Entity(地點、人名、金額…)</strong></p><p>有了 OpenAI 及 Semantic Kernel 後，一切將變的非常容易，而且還很有彈性哦~</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>以下以<a href="https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1">PChome 常見問題</a>來測試，</p><p><strong>1. 將常見問題存到 Memory，讓用戶來查詢</strong><br>透過<code>MemoryBuilder.WithPostgresMemoryStore</code>，將<a href="https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1">PChome 常見問題</a>存到<code>PostgreSQL</code>(<code>ISemanticTextMemory.SaveReferenceAsync</code>)之中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> memoryDeploymentName = <span class="string">&quot;aoai的 embedding model，例如 ada002&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chatDeploymentName = <span class="string">&quot;aoai的 chat model，例如 gpt4-32k&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;aoai endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;aoai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> connectionString = <span class="string">&quot;PostgreSQL連線字串&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memoryBuilder = <span class="keyword">new</span> MemoryBuilder();</span><br><span class="line">memoryBuilder.WithAzureOpenAITextEmbeddingGeneration(</span><br><span class="line">    memoryDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey);</span><br><span class="line"></span><br><span class="line">memoryBuilder.WithPostgresMemoryStore(connectionString, <span class="number">1536</span>);</span><br><span class="line">ISemanticTextMemory memory = memoryBuilder.Build();</span><br><span class="line"><span class="comment">//先把 FAQ 存到 postgresql DB 之中</span></span><br><span class="line"><span class="keyword">await</span> StoreMemoryAsync(memory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">StoreMemoryAsync</span>(<span class="params">ISemanticTextMemory memory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> faqs = FAQList();</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> qa <span class="keyword">in</span> faqs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> qaText = $<span class="string">$&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            User:&#123;&#123;qa.Question&#125;&#125;</span></span><br><span class="line"><span class="string">            Assistant:&#123;&#123;qa.Answer&#125;&#125;</span></span><br><span class="line"><span class="string">            &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">await</span> memory.SaveReferenceAsync(</span><br><span class="line">            collection: <span class="string">&quot;pchomefaq&quot;</span>,</span><br><span class="line">            externalSourceName: qa.Category,</span><br><span class="line">            externalId: <span class="string">$&quot;<span class="subst">&#123;qa.Id&#125;</span>&quot;</span>,</span><br><span class="line">            description: qaText,</span><br><span class="line">            text: qaText);</span><br><span class="line"></span><br><span class="line">        WriteLine(<span class="string">$&quot; #<span class="subst">&#123;++i&#125;</span> saved.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;\n----------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;QAClass&gt; <span class="title">FAQList</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取自 https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> List&lt;QAClass&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">1</span>, Category=<span class="string">&quot;帳號問題&quot;</span>, Answer=<span class="string">&quot;是的，為了保障您的權益，需要成為會員還能在PChome 24h購物購買商品，此外，成為會員才能享有購物行銷活動及累積P幣等優惠哦！&quot;</span>, Question=<span class="string">&quot;我一定要成為會員，才能在PChome 24h購物中訂購商品嗎？&quot;</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">2</span>, Category=<span class="string">&quot;帳號問題&quot;</span>, Answer=<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                    您可透過以下兩個方式成為註冊會員：</span></span><br><span class="line"><span class="string">        以手機門號註冊，依頁面指示完成資料填寫，即可建立您的個人帳號。</span></span><br><span class="line"><span class="string">        透過第三方帳號快速登入(Facebook/ Google/ Apple帳號與PChome旗下平台帳號)，需輸入第三方帳號密碼並驗證手機門號，驗證完成後即會建立您的個人帳號。</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>, Question=<span class="string">&quot;如何註冊為會員？&quot;</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">3</span>, Category=<span class="string">&quot;發票問題&quot;</span>, Answer=<span class="string">&quot;根據財政部訂定之「電子發票實施作業要點」，於PChome消費開立之「電子發票」將不再主動寄送，後續也會將發票上傳至『財政部電子發票整合服務平台』供會員查閱，相關資料可至財政部電子發票整合服務平台。&quot;</span>, Question=<span class="string">&quot;什麼是電子發票？&quot;</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">4</span>, Category=<span class="string">&quot;發票問題&quot;</span>, Answer=<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                    發票開立後即e-mail發票開立通知信，因此在商品送達前就會先收到。</span></span><br><span class="line"><span class="string">        (依據財政部核准字號第0940211766號 「網路購物開立統一發票交付非營業人作業規定」，於本網站消費所開立之個人發票將不主動郵寄(公司發票除外) 。</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>, Question=<span class="string">&quot;為什麼還沒收到商品就收到發票的開立通知信?&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行完成後。<br>可以發現<strong>PostgreSQL</strong>中會自動建立<code>pchomefaq</code>這個 Table，並存放常見問題，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/01.png" class="" title="PostgreSQL"><p><strong>2. 建立 Plugin 來賦與 Chatbot 能力</strong><br>我們需要 Chatbot 除了可以讓用戶查詢 FAQ 外(<code>Ask</code>)，還要可以處理退貨(<code>ReturnGoods</code>)、退貨進度(<code>CheckReturnReceiptProgress</code>)及退款進度(<code>CheckRefundProgress</code>)等服務，所以以要傳入<code>ISemanticTextMemory</code>，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PCHomePlugin</span>(<span class="params">ISemanticTextMemory textMemory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISemanticTextMemory _textMemory = textMemory;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;回答用戶的任何問題&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳FAQ結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Ask</span>(<span class="params">[Description(<span class="string">&quot;用戶的問題&quot;</span></span>)] <span class="built_in">string</span> question)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">&quot;從FAQ找不到，請判斷是否進行訂貨、退貨、回收等任務&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> results = <span class="keyword">await</span> _textMemory.SearchAsync(<span class="string">&quot;pchomefaq&quot;</span>, question, limit: <span class="number">2</span>, minRelevanceScore: <span class="number">0.7</span>).ToListAsync();</span><br><span class="line">        <span class="keyword">if</span> (results.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            result = results.Select(r =&gt; r.Metadata.Description).Aggregate((a, b) =&gt; a + Environment.NewLine + b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;執行退貨申請&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳執行退貨的結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReturnGoods</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Description(<span class="string">&quot;訂購人員姓名&quot;</span></span>)] <span class="built_in">string</span> customerName,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂購人員電話&quot;</span></span>)] <span class="built_in">string</span> phoneNumber,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂單編號&quot;</span></span>)] <span class="built_in">string</span> orderNumber)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> order = GetOrder(customerName, phoneNumber, orderNumber);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，已為您申請退貨流程，宅配將於2-3日內聯繫取件，請您協助將商品恢復原到貨包裝封箱備妥，留意宅配取件通知，謝謝您&quot;</span>;</span><br><span class="line">        DateTime.TryParse(order.OrderDate, <span class="keyword">out</span> <span class="keyword">var</span> orderDate);</span><br><span class="line">        <span class="keyword">var</span> diffOfDates = DateTime.Now - orderDate;</span><br><span class="line">        <span class="keyword">if</span> (diffOfDates.Days &gt; <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，因為您的商品已超過七日猶豫期，若有問題可洽廠商/原廠處理，謝謝您&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;查詢退貨收件進度&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳查詢退貨收件進度的結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">CheckReturnReceiptProgress</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Description(<span class="string">&quot;訂購人員姓名&quot;</span></span>)] <span class="built_in">string</span> customerName,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂購人員電話&quot;</span></span>)] <span class="built_in">string</span> phoneNumber,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂單編號&quot;</span></span>)] <span class="built_in">string</span> orderNumber)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> order = GetOrder(customerName, phoneNumber, orderNumber);</span><br><span class="line">        DateTime.TryParse(order.OrderDate, <span class="keyword">out</span> <span class="keyword">var</span> orderDate);</span><br><span class="line">        order.ApplyReturnGoodDate = orderDate.AddDays(<span class="number">1</span>).ToString();</span><br><span class="line">        order.ReceiptDate = orderDate.AddDays(<span class="number">3</span>).ToString();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，查詢您已於<span class="subst">&#123;order.ApplyReturnGoodDate&#125;</span>申請退貨，退貨商品將於申請退貨後由「物流商」前往取件，會在<span class="subst">&#123;order.ReceiptDate&#125;</span>收件，請您協助保持手機暢通並留意接聽電話&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (order.OrderNumber == <span class="string">&quot;0001&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，查詢您已於<span class="subst">&#123;order.ApplyReturnGoodDate&#125;</span>申請退貨，但尚未與物流商約定時間，我們將為您通知「物流商」儘速與您聯繫約定取件時間，請您協助保持手機暢通並留意接聽電話&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;查詢退款進度&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳查詢退款進度的結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">CheckRefundProgress</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Description(<span class="string">&quot;訂購人員姓名&quot;</span></span>)] <span class="built_in">string</span> customerName,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂購人員電話&quot;</span></span>)] <span class="built_in">string</span> phoneNumber,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂單編號&quot;</span></span>)] <span class="built_in">string</span> orderNumber)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> order = GetOrder(customerName, phoneNumber, orderNumber);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]退貨商品已驗收完成，待確認退款憑證與退款方式無誤後將會進入退款作業，敬請耐心等候，謝謝您&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (order.OrderNumber != <span class="string">&quot;0001&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]因退貨商品尚未驗收完成，需請您耐心等候。若退貨商品尚未取件，懇請您主動與我們聯絡，謝謝您&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Order <span class="title">GetOrder</span>(<span class="params"><span class="built_in">string</span> customerName,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> phoneNumber, <span class="built_in">string</span> orderNumber = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        Order order = <span class="keyword">new</span> Order()</span><br><span class="line">        &#123;</span><br><span class="line">            OrderNumber = orderNumber,</span><br><span class="line">            CustomerName = customerName,</span><br><span class="line">            PhoneNumber = phoneNumber,</span><br><span class="line">            Id = rnd.Next(<span class="number">10000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (orderNumber == <span class="string">&quot;0001&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            order.OrderDate = DateTime.Now.AddDays(<span class="number">-5</span>).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            order.OrderDate = DateTime.Now.AddDays(<span class="number">-1</span>).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OrderNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OrderDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=DateTime.Now.ToString();</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PhoneNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PaymentType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ReceiptDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ApplyReturnGoodDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 透過 Semantic Kernel 將 LLM, Plugin 及 Memory 整合起來服務用戶</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> memoryDeploymentName = <span class="string">&quot;aoai的 embedding model，例如 ada002&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chatDeploymentName = <span class="string">&quot;aoai的 chat model，例如 gpt4-32k&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;aoai endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;aoai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> connectionString = <span class="string">&quot;PostgreSQL連線字串&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memoryBuilder = <span class="keyword">new</span> MemoryBuilder();</span><br><span class="line">memoryBuilder.WithAzureOpenAITextEmbeddingGeneration(</span><br><span class="line">    memoryDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey);</span><br><span class="line"><span class="comment">//設定存到 PostgreSQL</span></span><br><span class="line">memoryBuilder.WithPostgresMemoryStore(connectionString, <span class="number">1536</span>);</span><br><span class="line">ISemanticTextMemory memory = memoryBuilder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line">kernelBuilder.Services.AddAzureOpenAIChatCompletion(</span><br><span class="line">    chatDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey</span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plugin = <span class="keyword">new</span> PCHomePlugin(memory);</span><br><span class="line"><span class="comment">//賦與 Chatbot 有Plugin能力</span></span><br><span class="line">kernel.ImportPluginFromObject(plugin);</span><br><span class="line">IChatCompletionService chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line"><span class="comment">//讓LLM使用我們提供的Function，並使用中文對話</span></span><br><span class="line">ChatHistory chatMessages = <span class="keyword">new</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Answer the questions as accurately as possible using the provided functions.</span></span><br><span class="line"><span class="string">    Continue the conversation acting as the ASSISTANT.</span></span><br><span class="line"><span class="string">    Respond to the USER by using available information and functions.</span></span><br><span class="line"><span class="string">    Use zh-TW.</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;請在 User &gt; 後輸入您想要提問的問題，輸入 exit 就結束對話。&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">    Console.Write(<span class="string">&quot;User &gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> userInput = System.Console.ReadLine()!;</span><br><span class="line">    <span class="keyword">if</span> (userInput == <span class="string">&quot;exit&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chatMessages.AddUserMessage(userInput);</span><br><span class="line"></span><br><span class="line">    OpenAIPromptExecutionSettings openAIPromptExecutionSettings = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//設定讓 ChatCompletionService 可依語義自動去呼叫需要的 Functions(Function Calling)</span></span><br><span class="line">        ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,</span><br><span class="line">        Temperature = <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> result = chatCompletionService.GetStreamingChatMessageContentsAsync(</span><br><span class="line">        chatMessages,</span><br><span class="line">        executionSettings: openAIPromptExecutionSettings,</span><br><span class="line">        kernel: kernel);</span><br><span class="line">    <span class="built_in">string</span> fullMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> first = <span class="literal">true</span>;</span><br><span class="line">    Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">    Console.ForegroundColor = ConsoleColor.DarkGreen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> content <span class="keyword">in</span> result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (content.Role.HasValue &amp;&amp; first)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">$&quot;Assistant &gt; &quot;</span>);</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.Write(content.Content);</span><br><span class="line">        fullMessage += content.Content;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    <span class="comment">// Add the message from the agent to the chat history</span></span><br><span class="line">    chatMessages.AddAssistantMessage(fullMessage);</span><br><span class="line">&#125;</span><br><span class="line">Console.ForegroundColor = ConsoleColor.DarkRed;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;結束對話...&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p><strong>1. 詢問常見問題</strong><br>詢問<code>我一定要成為會員，才能在PChome 24h購物中訂購商品嗎？</code>，會將<strong>會員</strong>相關內容透過<strong>LLM</strong>總結回覆，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/02.png" class="" title="FAQ"><p><strong>2. 申請退貨</strong><br>輸入<code>我要退貨</code>，LLM 會判斷要呼叫<code>ReturnGoods</code>這個 Function，並詢問用戶取得需要的參數值。<br>當收到用戶輸入的參數值後，會透過<code>Semantic Kernel</code>來呼叫<code>ReturnGoods</code>，並帶入參數，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/03.png" class="" title="執行退貨功能"><p>最後將<code>ReturnGoods</code>的結果，透過<strong>LLM</strong>總結回覆，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/04.png" class="" title="回覆執行退貨結果"><p><strong>3. 查詢收貨進度</strong><br>輸入<code>我有申請退貨的商品什麼時候要來收呢?</code>，LLM 會判斷要呼叫<code>CheckReturnReceiptProgress</code>這個 Function，並詢問用戶取得需要的參數值。<br>當收到用戶輸入的參數值後，會透過<code>Semantic Kernel</code>來呼叫<code>CheckReturnReceiptProgress</code>，並帶入參數，最後將<code>CheckReturnReceiptProgress</code>的結果，透過<strong>LLM</strong>總結回覆，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/05.png" class="" title="回覆退貨收件進度"><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>原本需要很多 AI 服務，並需要開發人員去寫出各種複雜的程式流程，<br>當透過<strong>Semantic Kernel</strong>來協調整合<strong>LLM</strong>、<strong>Memory</strong>及<strong>Plugins</strong>後，<br>一切變很容易很多。<br>當然，這其中還有許多要克服的事，例如，</p><p>1.使用 ChatGPT3.5 會有參數幻覺問題(hallucinate parameters)，不會問用戶，會直接給參數值</p><p>2.LLM 總結回覆花費蠻多時間</p><p>3.查詢 FAQ 是否準確<br>…</p><p>但不可否認，這是一個美好的開始，讓寫 Chatbot 更容易、更有彈性。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/semantic-kernel/overview/">Semantic Kernel</a><br><a href="https://rainmakerho.github.io/2024/01/04/sk-agent/">Semantic Kernel | 如何建立智慧助理(Agent)</a><br><a href="https://sannidhisiva.medium.com/semantic-kernel-sk-orchestration-for-healthcare-administrative-operations-8d17d5fbb3cc">Semantic Kernel(SK) Orchestration for Healthcare Administrative operations</a><br><a href="https://learn.microsoft.com/zh-tw/ai-builder/prebuilt-entity-extraction">實體擷取預建模型</a><br><a href="https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1">PChome 常見問題</a><br><a href="https://www.linkedin.com/pulse/vector-embeddings-dimensionality-retriever-augmented-busleiman-/">Vector Embeddings, Dimensionality, and Retriever-Augmented Generation</a></p><blockquote><p>一隻手只捉到一條魚: 勸人做事要專一，以免貪多嚼不爛，應作明確的抉擇。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;以前的客服對話機器人，可以讓用戶詢問 FAQ 的內容。&lt;br&gt;如果用戶有其他的服務，就需要判斷用戶的&lt;strong&gt;意圖&lt;/strong&gt;，</summary>
      
    
    
    
    
    <category term="FAQ" scheme="https://rainmakerho.github.io/tags/FAQ/"/>
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="AutoInvokeKernelFunctions" scheme="https://rainmakerho.github.io/tags/AutoInvokeKernelFunctions/"/>
    
    <category term="ISemanticTextMemory" scheme="https://rainmakerho.github.io/tags/ISemanticTextMemory/"/>
    
  </entry>
  
</feed>
