<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客 - Re:從零開始的軟體開發生活</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Re:從零開始的軟體開發生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2022-03-11T13:26:00.178Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.NET 從附檔名取得 ContentType (MIME Type)</title>
    <link href="https://rainmakerho.github.io/2022/03/11/get-contenttype-from-file-extensions/"/>
    <id>https://rainmakerho.github.io/2022/03/11/get-contenttype-from-file-extensions/</id>
    <published>2022-03-11T13:06:23.000Z</published>
    <updated>2022-03-11T13:26:00.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 .NET Framework 4.5(+)要取得 File 的 MIME type 可以透過 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.mimemapping.getmimemapping?view=netframework-4.8" target="_blank" rel="noopener">MimeMapping.GetMimeMapping(String) Method</a><br>那在 .NET Core 要用什麼方法呢?</p><h3 id="NET-Core-解法"><a href="#NET-Core-解法" class="headerlink" title=".NET Core 解法"></a>.NET Core 解法</h3><p>在 .NET Core 可以使用 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.staticfiles.fileextensioncontenttypeprovider" target="_blank" rel="noopener">FileExtensionContentTypeProvider</a>，如下</p><p>在 Services 設定 FileExtensionContentTypeProvider 為 Singleton<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">builder.Services.AddSingleton&lt;FileExtensionContentTypeProvider&gt;();</span><br></pre></td></tr></table></figure></p><p>在API Controller 建構子中注入，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="meta-string">"api/[controller]"</span>)</span>]</span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilesController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> FileExtensionContentTypeProvider _fileExtensionContentTypeProvider;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilesController</span>(<span class="params">FileExtensionContentTypeProvider fileExtensionContentTypeProvider</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _fileExtensionContentTypeProvider = fileExtensionContentTypeProvider</span><br><span class="line">            ?? <span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentNullException(</span><br><span class="line">                <span class="keyword">nameof</span>(fileExtensionContentTypeProvider));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet(<span class="meta-string">"&#123;fileId&#125;"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">GetFile</span>(<span class="params"><span class="keyword">string</span> fileId</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">string</span> DefaultContentType = <span class="string">"application/octet-stream"</span>;</span><br><span class="line">        <span class="keyword">var</span> pathToFile = <span class="string">"rmfer.pdf"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!System.IO.File.Exists(pathToFile))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> NotFound();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!_fileExtensionContentTypeProvider.TryGetContentType(</span><br><span class="line">            pathToFile, <span class="keyword">out</span> <span class="keyword">var</span> contentType))</span><br><span class="line">        &#123;</span><br><span class="line">            contentType = DefaultContentType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes = System.IO.File.ReadAllBytes(pathToFile);</span><br><span class="line">        <span class="keyword">return</span> File(bytes, contentType, Path.GetFileName(pathToFile));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/1612767/file-extensions-and-mime-types-in-net" target="_blank" rel="noopener">File extensions and MIME Types in .NET</a><br><a href="https://harrybellamy.com/posts/getting-mime-types-from-file-extensions-in-net-core/" target="_blank" rel="noopener">Getting MIME Types from File Extensions in .Net Core</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 .NET Framework 4.5(+)要取得 File 的 MIME type 可以透過 &lt;a href=&quot;https://docs
      
    
    </summary>
    
    
      <category term=".NET Core" scheme="https://rainmakerho.github.io/tags/NET-Core/"/>
    
      <category term="File" scheme="https://rainmakerho.github.io/tags/File/"/>
    
      <category term="MIME" scheme="https://rainmakerho.github.io/tags/MIME/"/>
    
      <category term="ContentType" scheme="https://rainmakerho.github.io/tags/ContentType/"/>
    
      <category term="Download" scheme="https://rainmakerho.github.io/tags/Download/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Resource Owner Password Credentials (ROPC)</title>
    <link href="https://rainmakerho.github.io/2022/03/03/oauth2-ropc/"/>
    <id>https://rainmakerho.github.io/2022/03/03/oauth2-ropc/</id>
    <published>2022-03-03T04:38:44.000Z</published>
    <updated>2022-03-03T06:01:32.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在一些比較舊或是獨立的系統，常常會使用到 Resource Owner Password Credentials (ROPC) 的方式來取得 access token。<br>就是使用者在 Client Application 功能輸入帳/密後，再由 Client Application 將使用者的帳/密 Post 到 Authorization Server 來取回 access token。<br>這樣帳/密不就被 Client Application 取得了嗎!!!</p><h3 id="OAuth-2-0-Resource-Owner-Password-Credentials-ROPC"><a href="#OAuth-2-0-Resource-Owner-Password-Credentials-ROPC" class="headerlink" title="OAuth 2.0 - Resource Owner Password Credentials (ROPC)"></a>OAuth 2.0 - Resource Owner Password Credentials (ROPC)</h3><p>以下以 IdentityServer4 的方式來說明<br>1.在 IdentityServer4 中註冊使用 ROPC 的 Client<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Client</span><br><span class="line">&#123;</span><br><span class="line">    ClientId = <span class="string">"ropcclient"</span>,</span><br><span class="line">    ClientName = <span class="string">"Resource Owner Password Credentials (ROPC) OAuth Client"</span>,</span><br><span class="line">    AllowedScopes = &#123; <span class="string">"tid_api.full"</span>, <span class="string">"tid_api.read"</span> &#125;,</span><br><span class="line">    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,</span><br><span class="line">    ClientSecrets = &#123;</span><br><span class="line">        <span class="keyword">new</span> Secret(<span class="string">"ropcsecret"</span>.Sha256())</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.Post 帳/密資訊給 IdentityServer 的 token ，grant_type 為 password ，取回 access token，並放在 localStorage 之中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ropcUrl = <span class="string">`https://localhost:5001/connect/token`</span>;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: ropcUrl,</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            client_id: <span class="string">'ropcclient'</span>,</span><br><span class="line">            client_secret: <span class="string">'ropcsecret'</span>,</span><br><span class="line">            scope: <span class="string">'tid_api.read'</span>,</span><br><span class="line">            grant_type: <span class="string">'password'</span>,</span><br><span class="line">            username: <span class="string">'bob'</span>,</span><br><span class="line">            password:<span class="string">'bob'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            localStorage.setItem(<span class="string">"token_type"</span>, data.token_type);</span><br><span class="line">            localStorage.setItem(<span class="string">"access_token"</span>, data.access_token);</span><br><span class="line">            localStorage.setItem(<span class="string">"expires_in"</span>, data.expires_in);</span><br><span class="line">            localStorage.setItem(<span class="string">"expires_in"</span>, data.scope);</span><br><span class="line">            <span class="built_in">window</span>.location.reload();</span><br><span class="line">        &#125;,</span><br><span class="line">        failure: <span class="function"><span class="keyword">function</span> (<span class="params">errMsg</span>) </span>&#123;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><img src="/2022/03/03/oauth2-ropc/01.png" title="POST token endpoint"><p>很簡潔的方式，但使用者的帳/密卻被 Client Application 知道，<br>建議改用 <a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Proof Key for Code Exchange (PKCE)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在一些比較舊或是獨立的系統，常常會使用到 Resource Owner Password Credentials (ROPC) 的方式來取得
      
    
    </summary>
    
    
      <category term="oauth2" scheme="https://rainmakerho.github.io/tags/oauth2/"/>
    
      <category term="ROPC" scheme="https://rainmakerho.github.io/tags/ROPC/"/>
    
      <category term="Resource Owner Password Credentials" scheme="https://rainmakerho.github.io/tags/Resource-Owner-Password-Credentials/"/>
    
      <category term="grant_type=password" scheme="https://rainmakerho.github.io/tags/grant-type-password/"/>
    
  </entry>
  
  <entry>
    <title>OpenID Connect Authorization Code Flow</title>
    <link href="https://rainmakerho.github.io/2022/02/23/OpenId-oAuth2/"/>
    <id>https://rainmakerho.github.io/2022/02/23/OpenId-oAuth2/</id>
    <published>2022-02-23T09:09:14.000Z</published>
    <updated>2022-02-25T01:25:25.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源。<br>但除了可以使用之中，有時會需要使用者的一些資訊，例如，名稱、Email、地址等資訊，<br>如果都是從 authorize 及 token 這2個 endpoint 來拿，又有點不太合適，<br>這時就要用到 <a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a></p><h3 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a><a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a></h3><p><a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a>是架構在 OAuth 2.0 之上，可以讓我們在 Authorization Server(這時變成 Identity Provider) 登入認證完成後，取回 Access Token 外，還可以取回 Identity Token。<br>以下使用<a href="https://www.oauth.com/playground/oidc.html" target="_blank" rel="noopener">OpenID Connect Authorization Code Flow</a>來演示。</p><p>1.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br><strong>response_type</strong>的值為<strong>code</strong>(表示我們要取回<strong>授權碼</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br><strong>scope</strong> 則為要求的 Resources，這裡給的值為 openid, profile, email (identity 的資料)及 photo ，這裡是用 <strong>+</strong>，有些是使用 <strong>空白</strong> 分隔，<br><strong>state</strong> 為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br><strong>nonce</strong> 會放在 Identity Token Payload 之中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=vMlmc7cEbsWF2CmFC_Uy7lgN</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/oidc.html</span><br><span class="line">  &amp;scope=openid+profile+email+photos</span><br><span class="line">  &amp;state=gBbLdtXyDGkC8mTP</span><br><span class="line">  &amp;nonce=9iX47YKplAznSlMH</span><br></pre></td></tr></table></figure></p><p>2.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/23/OpenId-oAuth2/02.png" title="input user Credential"></p><p>3.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/23/OpenId-oAuth2/03.png" title="User Consent"></p><p>4.當使用者同意後，Authorization Server 會把產生的 code (授權碼)及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(oidc.html)去驗證 state 值是否正確。<br><img src="/2022/02/23/OpenId-oAuth2/04.png" title="Verify the state parameter"></p><p>註:參數透過 QueryString ，所以 <code>response_mode=query</code></p><p>5.組出要透過 Code 來跟 Authorization Server 取回 AccessToken 及 Identity Token 的 URL(token)，<br>grant_type為authorization_code，code為剛才從 Authorization Server 取回的 授權碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorization-server.com/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=vMlmc7cEbsWF2CmFC_Uy7lgN</span><br><span class="line">&amp;client_secret=9234yuAokHSrB2LeBZOkZGMtvw6d_RzuarXFebXOcbqRMwci</span><br><span class="line">&amp;redirect_uri=https://www.oauth.com/playground/oidc.html</span><br><span class="line">&amp;code=9AKMAVWM5nF-jBlB3QYhNJ16jVcsgZfoKWhJz9ll74LlgvKe</span><br></pre></td></tr></table></figure></p><p>6.Post後就會得到 access_token 及 id_token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;C4BAD186C2DE0EF771F5E7DD8E0CB114867D6AC278ADCCAE3F2FC2BE0F04A86D&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;openid profile email photo&quot;,</span><br><span class="line">  &quot;id_token&quot;: &quot;.....&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>註: id_token 是 JWTs(Json Web Token)</li></ul><p>7.呼叫 <strong>userinfo</strong> Endpoint 取回使用者的相關資訊(可透過 IdentityModel 的擴充方法來取回使用者的資訊)<br>以下用 IdentityServer4 來測試，要求的 scopes 為 <strong>openid profile email address</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfoResponse = <span class="keyword">await</span> tokenClient.GetUserInfoAsync(<span class="keyword">new</span> UserInfoRequest</span><br><span class="line">&#123;</span><br><span class="line">    Address = <span class="string">$"<span class="subst">&#123;IdpServer&#125;</span>/connect/userinfo"</span>,</span><br><span class="line">    Token = [上面取得的access_token]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> claims = userInfoResponse.Claims;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> claims)</span><br><span class="line">&#123;</span><br><span class="line">    System.Diagnostics.Debug.WriteLine(<span class="string">$"<span class="subst">&#123;claim.Type&#125;</span> =&gt; <span class="subst">&#123;claim.Value&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下為使用 postman 取回的資料畫面，<br><img src="/2022/02/23/OpenId-oAuth2/05.png" title="User Info"></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a><br><a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Authorization Code Flow With PKCE</a><br><a href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/">OAuth 2.0 - Implicit Flow</a><br><a href="https://www.oauth.com/playground/" target="_blank" rel="noopener">OAuth 2.0 Playground</a><br><a href="https://openid.net/connect/" target="_blank" rel="noopener">OpenID Connect</a><br><a href="https://stackoverflow.com/questions/46844285/difference-between-oauth-2-0-state-and-openid-nonce-parameter-why-state-cou" target="_blank" rel="noopener">Difference between OAuth 2.0 “state” and OpenID “nonce” parameter? Why state could not be reused?</a><br><a href="https://darutk.medium.com/diagrams-of-all-the-openid-connect-flows-6968e3990660" target="_blank" rel="noopener">Diagrams of All The OpenID Connect Flows</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源。&lt;br&gt;但
      
    
    </summary>
    
    
      <category term="OpenID Connect" scheme="https://rainmakerho.github.io/tags/OpenID-Connect/"/>
    
      <category term="OAuth" scheme="https://rainmakerho.github.io/tags/OAuth/"/>
    
      <category term="oidc" scheme="https://rainmakerho.github.io/tags/oidc/"/>
    
  </entry>
  
  <entry>
    <title>Create Windows Form Application Custom URI Scheme</title>
    <link href="https://rainmakerho.github.io/2022/02/21/Custom-URI-Scheme/"/>
    <id>https://rainmakerho.github.io/2022/02/21/Custom-URI-Scheme/</id>
    <published>2022-02-21T02:19:35.000Z</published>
    <updated>2022-02-23T09:26:12.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>現在很多的桌面<strong>應用程式</strong>在登入時，會使用 OAuth2 ，所以在登入時，會開啟 Browser 到<strong>授權中心</strong>，讓<strong>使用者</strong>輸入帳/密後，再透過 Browser 來開啟 <strong>應用程式</strong>，如下，<br><img src="/2022/02/21/Custom-URI-Scheme/01.png" title="Open Native Application"><br>Windows Form 程式要如何做才可以達到這樣的功能呢?</p><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p>如果以 Windows 平台來看，只需要在機碼寫入設定值就可以了，<br>先在 <strong>HKEY_CLASSES_ROOT</strong> 機碼建立 <strong>AP Name</strong> (apname為 Tid-WinPKCE)的相關機碼如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT</span><br><span class="line">   Tid-WinPKCE</span><br><span class="line">      (Default) = &quot;&quot;</span><br><span class="line">      URL Protocol = URL:Tid-WinPKCE Protocol&quot;&quot;</span><br><span class="line">      shell</span><br><span class="line">         open</span><br><span class="line">            command</span><br><span class="line">               (Default) = &quot;C:\Projects\OAuth2\Tid.WinPKCE.exe&quot; &quot;%1&quot;</span><br></pre></td></tr></table></figure></p><img src="/2022/02/21/Custom-URI-Scheme/03.png" title="Custom URI Scheme 註冊機碼"><p>所以當在 Browser 網址列入 <strong>Tid-WinPKCE</strong> 再按下　<strong>:</strong> ，可以發現 Browser 網址列最前面的圖示會變成<strong>地球</strong>的圖示，<br>再按下 Enter ，就會提示是否要開啟該 App。<br><img src="/2022/02/21/Custom-URI-Scheme/02.png" title="Custom URI Scheme Address">s</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa767914(v=vs.85" target="_blank" rel="noopener">Registering an Application to a URI Scheme</a>?redirectedfrom=MSDN)<br><a href="https://css-tricks.com/hyperlinking-beyond-the-web/" target="_blank" rel="noopener">Hyperlinking Beyond the Web</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;現在很多的桌面&lt;strong&gt;應用程式&lt;/strong&gt;在登入時，會使用 OAuth2 ，所以在登入時，會開啟 Browser 到&lt;stro
      
    
    </summary>
    
    
      <category term="Custom URI Scheme" scheme="https://rainmakerho.github.io/tags/Custom-URI-Scheme/"/>
    
      <category term="Windows" scheme="https://rainmakerho.github.io/tags/Windows/"/>
    
      <category term="OAuth2" scheme="https://rainmakerho.github.io/tags/OAuth2/"/>
    
      <category term="Private-Use URI Scheme" scheme="https://rainmakerho.github.io/tags/Private-Use-URI-Scheme/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Proof Key for Code Exchange (PKCE)</title>
    <link href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/"/>
    <id>https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/</id>
    <published>2022-02-18T00:42:49.000Z</published>
    <updated>2022-02-25T03:36:49.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Native applications 因為是安裝在個人的設備上面，例如 手機，個人電腦。<br>這些 Native applications 通常會跟作業系統註冊 App-Claimed https URL (<a href="https://app.exp.com" target="_blank" rel="noopener">https://app.exp.com</a> 會開啟該 application) 或是使用 Custom URL Scheme(myapp://callback#token=…)。<br>因為<a href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/">OAuth 2.0 - Implicit Flow</a>可以用在 public client，<br>因為 Implicit Flow 比較不安全，所以現在大多改使用 PKCE，它是擴充自 Authorization Code Flow 。<br>在 <a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a> 在取得 Token 時，需要將 client_secret 一併傳出來取得 access token ，如果是 public client 就有可能會被知道 client_secret 的值，所以 PKCE 就是動態建立 Code Verifier 來取代 client_secret。<br>以下使用<a href="https://www.oauth.com/playground/authorization-code-with-pkce.html" target="_blank" rel="noopener">OAuth 2.0 Playground - pkce</a>來演示。</p><h3 id="OAuth-2-0-Authorization-Code-Flow-With-PKCE"><a href="#OAuth-2-0-Authorization-Code-Flow-With-PKCE" class="headerlink" title="OAuth 2.0 - Authorization Code Flow With PKCE"></a>OAuth 2.0 - Authorization Code Flow With PKCE</h3><p>1.建立 Code Verifier ( A-Z, a-z, 0-9, and the punctuation characters -._~ (hyphen, period, underscore, and tilde), between 43 and 128 characters long)<br>可透過 <strong>IdentityModel</strong> Nuget 套件的 CryptoRandom.CreateUniqueId 來建立<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> codeVerifier = CryptoRandom.CreateUniqueId(<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p><p>2.建立 Code Challenge<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> codeChallenge = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> sha256 = SHA256.Create())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> challengeBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(codeVerifier));</span><br><span class="line">    codeChallenge = Base64Url.Encode(challengeBytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2022/02/18/oAuth2-PKCE/01.png" title="Code Verifier"><p>3.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br>response_type的值為<strong>code</strong>(表示我們要取回<strong>授權碼</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br>state為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br>scope 則為要求的 Resources，這裡給的值為 photo 及 offline_access ，這裡是用 <strong>+</strong>，有些是使用 <strong>空白</strong> 分隔，<br>code_challenge就是前面 codeVerifier 透過 Sha256 算出 Hash 值轉成 Base64 字串，<br>為的就是在取 Access Token 時可以透過 codeVerfier 而不需傳遞 client_secret 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=d6O09tD6FCiCLxL6izEBBe3a</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/authorization-code-with-pkce.html</span><br><span class="line">  &amp;scope=photo+offline_access</span><br><span class="line">  &amp;state=s9IYwOaNw9iNRr89</span><br><span class="line">  &amp;code_challenge=LLruaPaJLgW0puyjcM5u9AbngsIXsUslae3eZNXT8YM</span><br><span class="line">  &amp;code_challenge_method=S256</span><br></pre></td></tr></table></figure></p><p>4.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/18/oAuth2-PKCE/02.png" title="input user Credential"></p><p>5.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/18/oAuth2-PKCE/03.png" title="User Consent"></p><p>6.當使用者同意後，Authorization Server 會把產生的 code (授權碼)及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(authorization-code-with-pkce.html)去驗證 state 值是否正確。<br></p><p>註:參數透過 QueryString ，所以 <code>response_mode=query</code></p><p>7.組出要透過 Code 及 Code Verifier 來跟 Authorization Server 取回 AccessToken 的 URL(token)，<br>grant_type為authorization_code，code為剛才從 Authorization Server 取回的 授權碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorization-server.com/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=d6O09tD6FCiCLxL6izEBBe3a</span><br><span class="line">&amp;client_secret=n9Esj_tJXmQoALz5GGx7pLsDaFEUvRiThVCfstiz1QSj0VvT</span><br><span class="line">&amp;redirect_uri=https://www.oauth.com/playground/authorization-code-with-pkce.html</span><br><span class="line">&amp;code=aLosw59x2JxvXGf4w35OXVWA9wUbqfoh32NmMgyziUsQKvWE</span><br><span class="line">&amp;code_verifier=ZDaKG5paqwvrjQ5luDSvxIMZgg9Ze2pySYWjRPFM1ZmvgkHE</span><br></pre></td></tr></table></figure></p><ul><li>註: 像 IdentityServer4 的 Client 可以設定 client_secret 不是必要的，所以 client_secret 就可以不需要傳遞</li></ul><p>8.Post後就會得到 AccessToken<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;OJ8LsvkJX75c4FvGVWQeCZ1m7k8hZwsMir-l1TpzE_6m2M7VmwX-gTR5_A_eGeAgcrBQbCrQ&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;photo offline_access&quot;,</span><br><span class="line">  &quot;refresh_token&quot;: &quot;ivHlMEInAeqqncUaMpGNCd31&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要呼叫 API 時，加入 access_token 就可以了<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, access_token);</span><br></pre></td></tr></table></figure></p><ul><li>因為 scope 有 offline_access，所以 refresh_token 會一併回傳</li></ul><h3 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h3><p>因為在取得 AccessToken 時，不會傳遞 client_secret 改以 code_verifier 傳遞，所以適用於 public client，例如 SPA, Native applications<br>而 Private Application 則可以加上 PKCE 讓它更安全，原本使用 Implicit Flow 的 Public Application 請改使用 Authorization Code Flow + PKCE ，<br>並設定 client_secret 不是必要值。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.oauth.com/oauth2-servers/pkce/" target="_blank" rel="noopener">Protecting Apps with PKCE</a><br><a href="https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uris-native-apps/" target="_blank" rel="noopener">Redirect URLs for Native Apps</a><br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa767914(v=vs.85" target="_blank" rel="noopener">Registering an Application to a URI Scheme</a>?redirectedfrom=MSDN)<br><a href="https://css-tricks.com/hyperlinking-beyond-the-web/" target="_blank" rel="noopener">Hyperlinking Beyond the Web</a><br><a href="https://dropbox.tech/developers/pkce--what-and-why-#:~:text=PKCE%20provides%20dynamic%20client%20secrets,you%20should%20switch%20to%20PKCE." target="_blank" rel="noopener">PKCE: What and Why?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 Native applications 因為是安裝在個人的設備上面，例如 手機，個人電腦。&lt;br&gt;這些 Native applicati
      
    
    </summary>
    
    
      <category term="Private-Use URI Scheme" scheme="https://rainmakerho.github.io/tags/Private-Use-URI-Scheme/"/>
    
      <category term="OAuth 2.0" scheme="https://rainmakerho.github.io/tags/OAuth-2-0/"/>
    
      <category term="public client" scheme="https://rainmakerho.github.io/tags/public-client/"/>
    
      <category term="PKCE" scheme="https://rainmakerho.github.io/tags/PKCE/"/>
    
      <category term="Proof Key for Code Exchange" scheme="https://rainmakerho.github.io/tags/Proof-Key-for-Code-Exchange/"/>
    
      <category term="claiming URLs" scheme="https://rainmakerho.github.io/tags/claiming-URLs/"/>
    
      <category term="Custom URL Scheme" scheme="https://rainmakerho.github.io/tags/Custom-URL-Scheme/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Implicit Flow</title>
    <link href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/"/>
    <id>https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/</id>
    <published>2022-02-17T01:24:26.000Z</published>
    <updated>2022-02-23T15:40:43.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a> 了解它是先取回<strong>授權碼</strong>後再透過該<strong>授權碼</strong>，<strong>Client Id</strong>及<strong>Client Secret</strong>，再取回<strong>Access Token</strong>，透過它去存取 API。<br><strong>Client Secret</strong>相當於是 Password，如果是 Public Client(SPA, Native applications)，那就會讓別人知道<strong>Client Secret</strong>，<br>所以可以使用<strong>OAuth 2.0 - Implicit Flow</strong></p><p>以下使用<a href="https://www.oauth.com/playground/index.html" target="_blank" rel="noopener">OAuth 2.0 Playground</a>來演示。</p><h3 id="OAuth-2-0-Implicit-Flow"><a href="#OAuth-2-0-Implicit-Flow" class="headerlink" title="OAuth 2.0 - Implicit Flow"></a>OAuth 2.0 - Implicit Flow</h3><p>開始之前需要註冊 Client<br><img src="/2022/02/17/oAuth2-implicit-flow/01.png" title="Client Registration"></p><p>1.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br>response_type的值為<strong>token</strong>(表示我們直接取回<strong>Access Token</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br>state為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br>scope 則為要求的 Resources，這裡給的值為 photo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=token</span><br><span class="line">  &amp;client_id=oW44Q708NN7dMkJT_ua2Vgbi</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/implicit.html</span><br><span class="line">  &amp;scope=photo</span><br><span class="line">  &amp;state=usBUtMUEzN1-ZKHy</span><br></pre></td></tr></table></figure></p><p>2.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/17/oAuth2-implicit-flow/02.png" title="input user Credential"></p><p>3.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/17/oAuth2-implicit-flow/03.png" title="User Consent"></p><p>4.當使用者同意後，Authorization Server 會把產生的 <strong>access_token</strong> 及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(implicit.html)去驗證 state 值是否正確。<br><img src="/2022/02/17/oAuth2-implicit-flow/04.png" title="Verify the state parameter"></p><p>註:參數透過 # ，所以 <code>response_mode=fragment</code></p><p>5.解析 URL 取回 <strong>access_token</strong>，呼叫 API 時，加入 access_token 就可以了<br><img src="/2022/02/17/oAuth2-implicit-flow/05.png" title="token"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, access_token);</span><br></pre></td></tr></table></figure><h3 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h3><p>因為在取得 AccessToken 時，不會傳遞 client_secret ，所以適用於 public client，例如 SPA, Native applications，<br>建議使用 <a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Authorization Code Flow With PKCE</a> 來代替 </p><ul><li>註: OAuth 2.1 就沒有 Implicit Flow</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://www.oauth.com/playground/index.html" target="_blank" rel="noopener">OAuth 2.0 Playground</a><br><a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 &lt;a href=&quot;https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/&quot;&gt;OAu
      
    
    </summary>
    
    
      <category term="OAuth 2.0" scheme="https://rainmakerho.github.io/tags/OAuth-2-0/"/>
    
      <category term="Implicit Flow" scheme="https://rainmakerho.github.io/tags/Implicit-Flow/"/>
    
      <category term="response_type=token" scheme="https://rainmakerho.github.io/tags/response-type-token/"/>
    
      <category term="response_mode=fragment" scheme="https://rainmakerho.github.io/tags/response-mode-fragment/"/>
    
      <category term="public client" scheme="https://rainmakerho.github.io/tags/public-client/"/>
    
      <category term="token flow" scheme="https://rainmakerho.github.io/tags/token-flow/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 - Authorization Code Flow</title>
    <link href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/"/>
    <id>https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/</id>
    <published>2022-02-15T05:18:04.000Z</published>
    <updated>2022-02-23T09:17:05.485Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源。<br>使用者會在授權伺服器上驗證帳密，將 Access Token 交給 Client App，所以 Client App 並不會拿到 使用者的帳密。<br><img src="https://identityserver4.readthedocs.io/en/3.1.0/_images/protocols.png" alt="OAuth2"><br>以上圖來說，當使用者使用 Web App 需要輸入帳密時，應該是網頁轉到 Security Token Service(Authorization Server) 輸入使用者的帳密，而 Web App 從 Token Service 取得 Token 去存取 API。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>OAuth 2.0 主要有4個參與交換的合作對象:<br><img src="https://identityserver4.readthedocs.io/en/latest/_images/terminology.png" alt="The OAuth 2.0 Players"></p><ul><li>Resources: 使用 Authorization Server 保護的資料或是API，每個 Resource 有一個唯一的名稱， Client 用這些名稱指定要存取的 Resource。</li><li>Clients: 跟 Authorization Server 註冊過的 App (會取得 client id 及 client secret)，例如 Web 應用程式, 手機 App, 桌面應用程式, SPA, Server Processes 等等。</li><li>Users: Resource Owner，具有允許 Client 存取 Protected Resource 的能力。</li><li>Authorization Server: 也稱為身份識別提供者(identity provider)，包含以下功能<ul><li>保護 Resources</li><li>驗證 User </li><li>Single sign-on</li><li>管理及驗證 Client</li><li>發行 Token 給 Client</li><li>驗證 Token</li></ul></li></ul><p>了解這些合作對象後，接下來透過這些對象的合作，有那些的 OAuth flow 及它們的適用情境。</p><p>以下使用<a href="https://www.oauth.com/playground/index.html" target="_blank" rel="noopener">OAuth 2.0 Playground</a>來演示。</p><h3 id="OAuth-flow"><a href="#OAuth-flow" class="headerlink" title="OAuth flow"></a>OAuth flow</h3><p>開始之前需要註冊 Client<br><img src="/2022/02/15/oAuth2-Basic/01.png" title="Client Registration"></p><h4 id="Authorization-Code-Flow"><a href="#Authorization-Code-Flow" class="headerlink" title="Authorization Code Flow"></a>Authorization Code Flow</h4><p>1.組出跟 Authorization Server 取回 Code 的 URL(authorize)，<br>response_type的值為<strong>code</strong>(表示我們要取回<strong>授權碼</strong>)，client_id, redirect_uri為 Client 註冊的資訊，<br>state為防止 XSRF 準備的值，當 Authorization Server 回 Call 時，也會把接收到的 state 回傳回來，<br>scope 則為要求的 Resources，這裡給的值為 photo 及 offline_access ，這裡是用 <strong>+</strong>，有些是使用 <strong>空白</strong> 分隔。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://authorization-server.com/authorize?</span><br><span class="line">  response_type=code</span><br><span class="line">  &amp;client_id=kPfE4R0EH5HRw4oR-DxbckSB</span><br><span class="line">  &amp;redirect_uri=https://www.oauth.com/playground/authorization-code.html</span><br><span class="line">  &amp;scope=photo+offline_access</span><br><span class="line">  &amp;state=ClJTpXOaXdN-0ER4</span><br></pre></td></tr></table></figure></p><p>2.轉址到上述建立的 URL(Authorization Server 的 Authorization endpoint)，在 Authorization Server系統中，輸入使用者帳號及密碼<br><img src="/2022/02/15/oAuth2-Basic/02.png" title="input user Credential"></p><p>3.顯示同意 Client 存取要求的 scope 權限(consent 畫面可以設定顯示與否)。<br><img src="/2022/02/15/oAuth2-Basic/03.png" title="User Consent"></p><p>4.當使用者同意後，Authorization Server 會把產生的 code (授權碼)及剛才傳過去的 state 一併傳回來給 redirect_uri 的網址(authorization-code.html)去驗證 state 值是否正確。<br><img src="/2022/02/15/oAuth2-Basic/04.png" title="Verify the state parameter"></p><p>註:參數透過 QueryString ，所以 <code>response_mode=query</code></p><p>5.組出要透過 Code 來跟 Authorization Server 取回 AccessToken 的 URL(token)，<br>grant_type為authorization_code，code為剛才從 Authorization Server 取回的 授權碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST https://authorization-server.com/token</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">&amp;client_id=kPfE4R0EH5HRw4oR-DxbckSB</span><br><span class="line">&amp;client_secret=x60IAq1A5sG090NlY3ANlCpOAnhajIFJbP7lCrF_Vr2Sr8Ij</span><br><span class="line">&amp;redirect_uri=https://www.oauth.com/playground/authorization-code.html</span><br><span class="line">&amp;code=P8Er2eBWUngJcc2m6VB4wNOodXMQiNO5Qtrycn2g4hI9bzhg</span><br></pre></td></tr></table></figure></p><p>6.Post後就會得到 AccessToken<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 86400,</span><br><span class="line">  &quot;access_token&quot;: &quot;C3QQyQycfCT4UMrh8K4GCMnvlHCxHrdlXQf6SFoPDWjRxpG3cDlNjPPHPLHOpeHgeWdg84aQ&quot;,</span><br><span class="line">  &quot;scope&quot;: &quot;photo offline_access&quot;,</span><br><span class="line">  &quot;refresh_token&quot;: &quot;ckWvTKpkiLANJ67Ktzd6f3PA&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要呼叫 API 時，加入 access_token 就可以了<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, access_token);</span><br></pre></td></tr></table></figure></p><p>註: 因為 scope 有 offline_access，所以 refresh_token 會一併回傳</p><h3 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h3><p>因為在取得 AccessToken 時，需要傳遞 client_secret ，所以適用於 Server Site 的 App。<br>Public App 請參考 <a href="https://rainmakerho.github.io/2022/02/18/oAuth2-PKCE/">OAuth 2.0 - Authorization Code Flow With PKCE</a> 或是 <a href="https://rainmakerho.github.io/2022/02/17/oAuth2-implicit-flow/">OAuth 2.0 - Implicit Flow</a></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://auth0.com/intro-to-iam/what-is-oauth-2/" target="_blank" rel="noopener">What is OAuth 2.0?</a><br><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/develop/active-directory-v2-protocols" target="_blank" rel="noopener">Microsoft 身分識別平臺上的 OAuth 2.0 和 OpenID Connect 通訊協定</a><br><a href="https://www.oauth.com/playground/" target="_blank" rel="noopener">OAuth 2.0 Playground</a><br><a href="https://www.oauth.com/oauth2-servers/server-side-apps/authorization-code/" target="_blank" rel="noopener">Authorization Code Grant</a></p><ul><li>註:本文有些圖片引用自 <a href="https://identityserver4.readthedocs.io" target="_blank" rel="noopener">https://identityserver4.readthedocs.io</a> 網站</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;OAuth是”Open Authorization”,它讓使用者在授權伺服器上，同意 Client App 代表使用者去存取資源。&lt;br&gt;使
      
    
    </summary>
    
    
      <category term="OAuth 2.0" scheme="https://rainmakerho.github.io/tags/OAuth-2-0/"/>
    
      <category term="Authorization Code Flow" scheme="https://rainmakerho.github.io/tags/Authorization-Code-Flow/"/>
    
      <category term="response_type=code" scheme="https://rainmakerho.github.io/tags/response-type-code/"/>
    
      <category term="grant_type=authorization_code" scheme="https://rainmakerho.github.io/tags/grant-type-authorization-code/"/>
    
      <category term="private client" scheme="https://rainmakerho.github.io/tags/private-client/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler 無法錄到 HttpClient 發出的 Request</title>
    <link href="https://rainmakerho.github.io/2022/02/11/fiddler-cannot-trace-httpclient/"/>
    <id>https://rainmakerho.github.io/2022/02/11/fiddler-cannot-trace-httpclient/</id>
    <published>2022-02-11T05:02:37.000Z</published>
    <updated>2022-02-11T07:52:43.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>如果透過 Fiddler 錄不到 HttpClient 發出的 Request 。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>參考<a href="https://www.telerik.com/forums/no-traffic-seen-from-vs-2017-http-client-app-in-fiddler" target="_blank" rel="noopener">No traffic seen from VS 2017 HTTP Client app in Fiddler ?</a><br>可以透過 <code>netsh winhttp</code> 來設定 Proxy 轉向 Fiddler。<br>以系統管理者身份開啟 Command 視窗，輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp set proxy 127.0.0.1:8888</span><br></pre></td></tr></table></figure></p><p>如果要 Reset ，則可以輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winhttp reset proxy</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;如果透過 Fiddler 錄不到 HttpClient 發出的 Request 。&lt;/p&gt;
&lt;h3 id=&quot;解法&quot;&gt;&lt;a href=&quot;#解法
      
    
    </summary>
    
    
      <category term="HttpClient" scheme="https://rainmakerho.github.io/tags/HttpClient/"/>
    
      <category term="Fiddler" scheme="https://rainmakerho.github.io/tags/Fiddler/"/>
    
      <category term="netsh winhttp" scheme="https://rainmakerho.github.io/tags/netsh-winhttp/"/>
    
  </entry>
  
  <entry>
    <title>Excessive Data Exposure</title>
    <link href="https://rainmakerho.github.io/2022/01/24/Excessive-Data-Exposure/"/>
    <id>https://rainmakerho.github.io/2022/01/24/Excessive-Data-Exposure/</id>
    <published>2022-01-24T03:30:50.000Z</published>
    <updated>2022-03-01T03:09:36.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>當透過 Checkmarx 集合為 OWASP TOP 10 - 2021 掃 ASP.NET MVC 時，<br>如果回傳的物件中，如果 <strong>類別/屬性名稱</strong> 中有一些 機敏性名稱時，<br>Checkmarx 就會出 <strong>Excessive_Data_Exposure</strong> 的中風險</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>機敏性名稱類例如以下字串，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*Credit*&quot;,</span><br><span class="line">&quot;*credentials*&quot;,</span><br><span class="line">&quot;*secret*&quot;,</span><br><span class="line">&quot;*Account*&quot;,</span><br><span class="line">&quot;*SSN&quot;,</span><br><span class="line">&quot;DOB&quot;,</span><br><span class="line">&quot;SSN*&quot;,</span><br><span class="line">&quot;*SocialSecurity*&quot;,</span><br><span class="line">&quot;DeviceUniqueId&quot;,</span><br><span class="line">&quot;auth*&quot;,</span><br><span class="line">&quot;*passport*&quot;</span><br></pre></td></tr></table></figure></p><p>例如 User Class 為，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HiddenInput(DisplayValue = false)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> UserID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required(ErrorMessage = <span class="meta-string">"Please enter a email"</span>)</span>]</span><br><span class="line">    [<span class="meta">DataType(DataType.EmailAddress)</span>]</span><br><span class="line">    [<span class="meta">RegularExpression(@<span class="meta-string">"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*"</span>, ErrorMessage = <span class="meta-string">"Invalid email address"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">StringLength(100)</span>]</span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"First name"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">StringLength(100)</span>]</span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"Last name"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required, AllowHtml</span>]</span><br><span class="line">    [<span class="meta">StringLength(10, ErrorMessage = <span class="meta-string">"The password cannot be longer than 10 characters."</span>)</span>]</span><br><span class="line">    [<span class="meta">DataType(DataType.Password)</span>]</span><br><span class="line">    [<span class="meta">RegularExpression(@<span class="meta-string">"^([a-zA-Z0-9]+)$"</span>, ErrorMessage = <span class="meta-string">"The password cannot contain special characters."</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PasswordHash &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> PasswordSalt &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> CreditCard &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span>? IsAdmin &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HiddenInput(DisplayValue = false)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Token &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HiddenInput(DisplayValue = false)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime? TokenCreTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Action 程式碼為，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AllowAnonymous</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> PartialViewResult <span class="title">UserProfiler</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    User user = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(User.Identity.IsAuthenticated)</span><br><span class="line">    &#123;</span><br><span class="line">        user = userRepository.Users.FirstOrDefault(u =&gt; <span class="keyword">string</span>.Compare(u.Email, User.Identity.Name, StringComparison.InvariantCultureIgnoreCase) == <span class="number">0</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PartialView(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以 user 在回傳前，要先將那些機敏性屬性值清掉，或是建立一個沒有那些機敏性屬性的類別回傳出去。<br>以下是透過 Method ，將機敏性屬性值清掉 (<code>user.WithoutSensitiveData()</code>)，如下，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AllowAnonymous</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> PartialViewResult <span class="title">UserProfiler</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    User user = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(User.Identity.IsAuthenticated)</span><br><span class="line">    &#123;</span><br><span class="line">        user = userRepository.Users.FirstOrDefault(u =&gt; <span class="keyword">string</span>.Compare(u.Email, User.Identity.Name, StringComparison.InvariantCultureIgnoreCase) == <span class="number">0</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PartialView(user.WithoutSensitiveData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">WithoutSensitiveData</span>(<span class="params"><span class="keyword">this</span> User user</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    user.Password = <span class="keyword">string</span>.Empty;</span><br><span class="line">    user.PasswordHash = <span class="keyword">string</span>.Empty;</span><br><span class="line">    user.PasswordSalt = <span class="keyword">string</span>.Empty;</span><br><span class="line">    user.CreditCard = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;當透過 Checkmarx 集合為 OWASP TOP 10 - 2021 掃 ASP.NET MVC 時，&lt;br&gt;如果回傳的物件中，如果 
      
    
    </summary>
    
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="Excessive_Data_Exposure" scheme="https://rainmakerho.github.io/tags/Excessive-Data-Exposure/"/>
    
  </entry>
  
  <entry>
    <title>Missing Object Level Authorization</title>
    <link href="https://rainmakerho.github.io/2022/01/23/Missing-Object-Level-Authorization/"/>
    <id>https://rainmakerho.github.io/2022/01/23/Missing-Object-Level-Authorization/</id>
    <published>2022-01-23T07:48:42.000Z</published>
    <updated>2022-01-24T01:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>當透過 Checkmarx 集合為 OWASP TOP 10 - 2021 掃 ASP.NET MVC 時，<br>在一些有 Authorize 的 Action 上，如果接受一些 int, string 的參數直接當作DB的Filter，<br>Checkmarx 就會出 <strong>Missing Object Level Authorization</strong> 的中風險</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Checkmarx 認為這個 Action 除了登入者之外，<br>還需要特別的角色人員才可以執行它，<br>所以除了 <code>[Authorize]</code> 外是不行的，<br>需要改成 <code>[Authorize(Roles = &quot;某個角色&quot;)]</code>，<br>或是在Method中判斷是否為某個 User ，例如，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!User.IsInRole(<span class="string">"某個角色"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    ModelState.AddModelError(<span class="string">"Unauthorized"</span>, <span class="string">"Unauthorized access"</span>);</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>設定使用者及角色程式碼為，<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userPrincipal =</span><br><span class="line">    <span class="keyword">new</span> GenericPrincipal(<span class="keyword">new</span> GenericIdentity(<span class="string">"使用者代號"</span>), <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"某個角色"</span>, <span class="string">"角色2"</span>&#125;);</span><br><span class="line">Context.User = userPrincipal;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;當透過 Checkmarx 集合為 OWASP TOP 10 - 2021 掃 ASP.NET MVC 時，&lt;br&gt;在一些有 Authori
      
    
    </summary>
    
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="OWSAP Top 10 2021" scheme="https://rainmakerho.github.io/tags/OWSAP-Top-10-2021/"/>
    
      <category term="Missing_Object_Level_Authorization" scheme="https://rainmakerho.github.io/tags/Missing-Object-Level-Authorization/"/>
    
  </entry>
  
  <entry>
    <title>npm ERR! sqlite3@4.2.0 install</title>
    <link href="https://rainmakerho.github.io/2022/01/13/npm-ERR-sqlite-install/"/>
    <id>https://rainmakerho.github.io/2022/01/13/npm-ERR-sqlite-install/</id>
    <published>2022-01-13T01:06:26.000Z</published>
    <updated>2022-01-13T01:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近在 CentOS 8 上下載 NodeJS 的程式，然後下<code>npm install</code>，就發生 npm ERR! <a href="mailto:sqlite3@4.2.0" target="_blank" rel="noopener">sqlite3@4.2.0</a> install: <code>node-pre-gyp install --fallback-to-build</code> 的錯誤。</p><blockquote><p>npm ERR! <a href="mailto:sqlite3@4.2.0" target="_blank" rel="noopener">sqlite3@4.2.0</a> install: <code>node-pre-gyp install --fallback-to-build</code><br>npm ERR! Exit status 1<br>npm ERR!<br>npm ERR! Failed at the <a href="mailto:sqlite3@4.2.0" target="_blank" rel="noopener">sqlite3@4.2.0</a> install script.<br>npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因為在 npm install sqlite 時，它會進行編譯，所以還需要安裝 python 及 make</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install python2</span><br><span class="line">alias python='python2'</span><br><span class="line">yum install make</span><br></pre></td></tr></table></figure><p>之後再下 <code>npm install</code> 就可以了哦!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近在 CentOS 8 上下載 NodeJS 的程式，然後下&lt;code&gt;npm install&lt;/code&gt;，就發生 npm ERR! &lt;
      
    
    </summary>
    
    
      <category term="node" scheme="https://rainmakerho.github.io/tags/node/"/>
    
      <category term="CentOS" scheme="https://rainmakerho.github.io/tags/CentOS/"/>
    
      <category term="sqlite" scheme="https://rainmakerho.github.io/tags/sqlite/"/>
    
      <category term="npm install" scheme="https://rainmakerho.github.io/tags/npm-install/"/>
    
  </entry>
  
  <entry>
    <title>webpack opensslErrorStack error 03000086:digital envelope routines initialization error</title>
    <link href="https://rainmakerho.github.io/2022/01/10/webpack-error-03000086-digital-envelope-routines-ERR-OSSL-EVP-UNSUPPORTED/"/>
    <id>https://rainmakerho.github.io/2022/01/10/webpack-error-03000086-digital-envelope-routines-ERR-OSSL-EVP-UNSUPPORTED/</id>
    <published>2022-01-10T03:52:11.000Z</published>
    <updated>2022-01-10T04:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>更新 NodeJS 到 V17 後，執行 <code>npx webpack</code> 時，會噴 <code>error:0308010C:digital envelope routines::unsupported</code> 的錯誤</p><blockquote><p>node_modules\loader-runner\lib\LoaderRunner.js:133<br>                if(isError) throw e;<br>                            ^<br>Error: error:0308010C:digital envelope routines::unsupported<br>    at new Hash (node:internal/crypto/hash:67:19)<br>    at Object.createHash (node:crypto:130:10)<br>    at module.exports (C:\Projects\local_directline\node_modules\webpack\lib\util\createHash.js:135:53)<br>    at NormalModule._initBuildHash (C:\Projects\local_directline\node_modules\webpack\lib\NormalModule.js:417:16)<br>    at handleParseError (C:\Projects\local_directline\node_modules\webpack\lib\NormalModule.js:471:10)<br>    …<br>    opensslErrorStack: [ ‘error:03000086:digital envelope routines::initialization error’ ],<br>  library: ‘digital envelope routines’,<br>  reason: ‘unsupported’,<br>  code: ‘ERR_OSSL_EVP_UNSUPPORTED’</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>專案中使用的 webpack 版本是 4.19 ，參考 <a href="https://github.com/cockpit-project/starter-kit/commit/3220617fec508aabbbc226a87a165c21fb72e913" target="_blank" rel="noopener">webpack: Avoid md4 hash for OpenSSL 3 compatibility</a> 的解法，將 hash 設定成 <strong>sha256</strong>。<br>所以在 webpack.config.js 中加入設定 hash 的程式碼，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">"crypto"</span>);</span><br><span class="line"><span class="keyword">const</span> crypto_orig_createHash = crypto.createHash;</span><br><span class="line">crypto.createHash = <span class="function"><span class="params">algorithm</span> =&gt;</span> crypto_orig_createHash(algorithm == <span class="string">"md4"</span> ? <span class="string">"sha256"</span> : algorithm);</span><br></pre></td></tr></table></figure></p><h3 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h3><p><a href="https://stackoverflow.com/questions/69394632/webpack-build-failing-with-err-ossl-evp-unsupported" target="_blank" rel="noopener">Webpack build failing with ERR_OSSL_EVP_UNSUPPORTED</a><br><a href="https://github.com/cockpit-project/starter-kit/commit/3220617fec508aabbbc226a87a165c21fb72e913" target="_blank" rel="noopener">webpack: Avoid md4 hash for OpenSSL 3 compatibility</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;更新 NodeJS 到 V17 後，執行 &lt;code&gt;npx webpack&lt;/code&gt; 時，會噴 &lt;code&gt;error:0308010
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://rainmakerho.github.io/tags/webpack/"/>
    
      <category term="opensslErrorStack" scheme="https://rainmakerho.github.io/tags/opensslErrorStack/"/>
    
      <category term="ERR_OSSL_EVP_UNSUPPORTED" scheme="https://rainmakerho.github.io/tags/ERR-OSSL-EVP-UNSUPPORTED/"/>
    
      <category term="03000086" scheme="https://rainmakerho.github.io/tags/03000086/"/>
    
      <category term="digital envelope routines::initialization error" scheme="https://rainmakerho.github.io/tags/digital-envelope-routines-initialization-error/"/>
    
  </entry>
  
  <entry>
    <title>error TS2307 Cannot find module</title>
    <link href="https://rainmakerho.github.io/2022/01/10/error-TS2307-Cannot-find-module/"/>
    <id>https://rainmakerho.github.io/2022/01/10/error-TS2307-Cannot-find-module/</id>
    <published>2022-01-10T03:10:51.000Z</published>
    <updated>2022-01-10T03:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>透過 CentOS 8 來 compile ts 檔時，居然噴<code>error TS2307 Cannot find module</code>的錯誤</p><blockquote><p>error TS2307: Cannot find module ‘./../adapters/WebChatAdapter’ or its corresponding type declarations.<br>8 import { WebChatAdapter } from ‘./../adapters/WebChatAdapter’;</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>可是，原本在 Mac/Windows 中怎麼沒有錯誤呢?<br>TypeScript 的 import 在 Mac/Windows 是不分大小寫的，但在 CentOS 是有區分的。<br>而會發生那個錯誤是因為，程式碼中寫的是 from 檔名是大寫開頭的 <strong>W</strong>ebChatAdapter ，<br>但實際檔名卻是小寫開頭的 <strong>w</strong>ebChatAdapter。<br>所以將 from 的檔名改成小寫就可以了。<br><code>from &#39;./../adapters/WebChatAdapter&#39;</code> =&gt; <code>from &#39;./../adapters/webChatAdapter&#39;</code></p><p>而為了怕未來有類似的狀況，就在 tsconfig.json 中加入 <code>forceConsistentCasingInFileNames</code> 的設定(預設是 false)。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"forceConsistentCasingInFileNames"</span>: <span class="literal">true</span> //確保檔案的大小寫一致</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣在 Mac/Windows 有 import 跟 檔名大小寫不同時，也一樣會噴錯誤，就可以在開發時第一時間發現問題。</p><h3 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h3><p><a href="https://briandesousa.net/?p=870" target="_blank" rel="noopener">CASE-SENSITIVE IMPORT STATEMENTS IN TYPESCRIPT</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;透過 CentOS 8 來 compile ts 檔時，居然噴&lt;code&gt;error TS2307 Cannot find module&lt;/
      
    
    </summary>
    
    
      <category term="tsc" scheme="https://rainmakerho.github.io/tags/tsc/"/>
    
      <category term="TS2307" scheme="https://rainmakerho.github.io/tags/TS2307/"/>
    
      <category term="Cannot find module" scheme="https://rainmakerho.github.io/tags/Cannot-find-module/"/>
    
      <category term="import" scheme="https://rainmakerho.github.io/tags/import/"/>
    
      <category term="CASE-SENSITIVE" scheme="https://rainmakerho.github.io/tags/CASE-SENSITIVE/"/>
    
      <category term="CentOS" scheme="https://rainmakerho.github.io/tags/CentOS/"/>
    
      <category term="forceConsistentCasingInFileNames" scheme="https://rainmakerho.github.io/tags/forceConsistentCasingInFileNames/"/>
    
  </entry>
  
  <entry>
    <title>npm install - OpenSSL configuration error</title>
    <link href="https://rainmakerho.github.io/2022/01/10/npm-OpenSSL-configuration-error/"/>
    <id>https://rainmakerho.github.io/2022/01/10/npm-OpenSSL-configuration-error/</id>
    <published>2022-01-10T02:42:46.000Z</published>
    <updated>2022-01-10T03:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在 Windows 10 X64, 更新 NodeJS 到 V17 後，執行 <code>npm install</code> 時，噴以 <code>OpenSSL configuration error</code> 的錯誤</p><blockquote><p>OpenSSL configuration error: 404F0000:error:80000002:system library:BIO_new_file:No such file or</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>看了 <a href="https://github.com/nodejs/node/issues/40547" target="_blank" rel="noopener">17.0.1 win10 x64 OpenSSL configuration error</a> 後，<br>在環境變數中的系統變數有一個 <strong>OPENSSL_CONF</strong> ，它的值是 <code>C:\Program Files\PostgreSQL\psqlODBC\etc\openssl.cnf</code> 。<br>開啟檔案總管查看 etc 中是否有 openssl.cnf 的檔案，它又不存在。<br>所以就將 系統變數 <strong>OPENSSL_CONF</strong> 刪除，另開一個視窗來下 npm install 就沒有問題了哦!</p><ul><li>開啟 Windows 10 環境變數: 設定 -&gt; 系統 -&gt; 關於 -&gt; 進階系統設定 (在右邊 相關設定 下面的Link)</li></ul><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://github.com/nodejs/node/issues/40547" target="_blank" rel="noopener">17.0.1 win10 x64 OpenSSL configuration error</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;在 Windows 10 X64, 更新 NodeJS 到 V17 後，執行 &lt;code&gt;npm install&lt;/code&gt; 時，噴以 &lt;
      
    
    </summary>
    
    
      <category term="node" scheme="https://rainmakerho.github.io/tags/node/"/>
    
      <category term="npm" scheme="https://rainmakerho.github.io/tags/npm/"/>
    
      <category term="OpenSSL configuration error" scheme="https://rainmakerho.github.io/tags/OpenSSL-configuration-error/"/>
    
      <category term="Windows 10 環境變數" scheme="https://rainmakerho.github.io/tags/Windows-10-%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx V9.4 在 Heap_Inspection 的改變(ASPX)</title>
    <link href="https://rainmakerho.github.io/2021/12/28/Heap-Inspection-ASPX/"/>
    <id>https://rainmakerho.github.io/2021/12/28/Heap-Inspection-ASPX/</id>
    <published>2021-12-28T01:09:40.000Z</published>
    <updated>2021-12-28T01:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前在 ASP.NET WebForm ASPX 中，只要有 Password 等機敏性名稱的元件、屬性及變數都會被 Checkmarx 找出 <strong>Heap Inspection</strong> ，例如登入頁面的 <code>&lt;asp:TextBox ID=&quot;txtPassword&quot; TextMode=&quot;Password&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</code> 欄位。而且該問題還是<strong>中風險</strong>(在 Checkmarx V8.9測試)。<br><img src="/2021/12/28/Heap-Inspection-ASPX/01.png" title="Checkmarx V8.9"></p><h3 id="Checkmarx-V9-4"><a href="#Checkmarx-V9-4" class="headerlink" title="Checkmarx V9.4"></a>Checkmarx V9.4</h3><p>把相同的程式碼放到 Checkmarx V9.4 有以下幾點改變，</p><ol><li>風險等級由變成了<strong>低風險</strong></li><li><strong>全域屬性/變數</strong>才會被判斷為 Heap Inspection 風險<img src="/2021/12/28/Heap-Inspection-ASPX/02.png" title="Checkmarx V9.4"></li></ol><p>所以只要在 Login 的事件處理中，接收到 Password 欄位值，<br>並進行使用者帳/密驗證，在 Checkmarx V9.4 中判斷出 Heap_Inspection 的風險。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前在 ASP.NET WebForm ASPX 中，只要有 Password 等機敏性名稱的元件、屬性及變數都會被 Checkmarx 找
      
    
    </summary>
    
    
      <category term="ASPX" scheme="https://rainmakerho.github.io/tags/ASPX/"/>
    
      <category term="ASP.NET" scheme="https://rainmakerho.github.io/tags/ASP-NET/"/>
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="Password" scheme="https://rainmakerho.github.io/tags/Password/"/>
    
      <category term="Heap Inspection" scheme="https://rainmakerho.github.io/tags/Heap-Inspection/"/>
    
      <category term="Heap_Inspection" scheme="https://rainmakerho.github.io/tags/Heap-Inspection/"/>
    
      <category term="WebForm" scheme="https://rainmakerho.github.io/tags/WebForm/"/>
    
  </entry>
  
  <entry>
    <title>將 PDF 轉成 Tiff or PNG</title>
    <link href="https://rainmakerho.github.io/2021/12/01/pdf-convert-2-png-tiff/"/>
    <id>https://rainmakerho.github.io/2021/12/01/pdf-convert-2-png-tiff/</id>
    <published>2021-12-01T08:55:08.000Z</published>
    <updated>2021-12-01T09:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前有透過 <a href="https://www.ghostscript.com/releases/gsdnld.html" target="_blank" rel="noopener">Ghostscript</a> 及 .NET 封裝它的.NET套件 <a href="https://github.com/jhabjan/Ghostscript.NET" target="_blank" rel="noopener">Ghostscript.NET</a> 來將 PDF 檔案轉成 Tiff 檔。<br>最近有朋友詢問當字型為 <strong>標楷體</strong> 時，轉出的圖檔卻會破碎掉，是否有什麼解法呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>原本程式是透過 GhostscriptRasterizer 去轉換，而我原本的 <a href="https://www.ghostscript.com/releases/gsdnld.html" target="_blank" rel="noopener">Ghostscript</a> 為 9.54 版本，PDF 中有 <strong>標楷體</strong> 轉出來的 Tiff 的確會有破碎掉的狀況。<br>於是先將 <a href="https://www.ghostscript.com/releases/gsdnld.html" target="_blank" rel="noopener">Ghostscript</a> 有區分 32/64 位元的版本，<br>目前 Windows 大多應該為 64 位元，更新到最新版本。<br>再測試還是會有破碎掉的狀況。<br><img src="/2021/12/01/pdf-convert-2-png-tiff/01.png" title="破碎"></p><p>於是透過 Ghostscript 的 Command 來測試<br><code>gswin64c -q -dNOPAUSE -dBATCH -sDEVICE=tiffg4  -r300x300 -sOutputFile=abc.tif abc.pdf</code><br>出來的結果是正常的。</p><p>而 Ghostscript.NET 中透過 GhostscriptProcessor 似乎透過 Command 執行，所以 改用 <strong>ProcessorSample1.cs</strong> 提供的方式來轉換， 標楷體就正常了。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pdf2PNG</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> inputFile = <span class="string">@"c:\temp\abc.pdf"</span>;</span><br><span class="line">    <span class="keyword">string</span> outputFile = <span class="string">@"c:\temp\abc-page-%03d.png"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pageFrom = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pageTo = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (GhostscriptProcessor ghostscript = <span class="keyword">new</span> GhostscriptProcessor())</span><br><span class="line">    &#123;</span><br><span class="line">        ghostscript.Processing += <span class="keyword">new</span> GhostscriptProcessorProcessingEventHandler(ghostscript_Processing);</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">string</span>&gt; switches = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        switches.Add(<span class="string">"-empty"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dSAFER"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dBATCH"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dNOPAUSE"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dNOPROMPT"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dFirstPage="</span> + pageFrom.ToString());</span><br><span class="line">        switches.Add(<span class="string">"-dLastPage="</span> + pageTo.ToString());</span><br><span class="line">        switches.Add(<span class="string">"-sDEVICE=png16m"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-r96"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dTextAlphaBits=4"</span>);</span><br><span class="line">        switches.Add(<span class="string">"-dGraphicsAlphaBits=4"</span>);</span><br><span class="line">        switches.Add(<span class="string">@"-sOutputFile="</span> + outputFile);</span><br><span class="line">        switches.Add(<span class="string">@"-f"</span>);</span><br><span class="line">        switches.Add(inputFile);</span><br><span class="line">        ghostscript.Process(switches.ToArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>註1: 如果要轉換成 Tiff ，請將 DEVICE 從 png16m 改成 tiffg4 or tiff24nc</li><li>註2: 如果要解析度好一點，請將 r 從 96 改成 300</li></ul><img src="/2021/12/01/pdf-convert-2-png-tiff/02.png" title="完整"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://dotblogs.com.tw/rainmaker/2014/04/14/144731" target="_blank" rel="noopener">[.NET]透過 Ghostscript.NET 來將 Pdf 檔轉成 Tiff 檔</a><br><a href="https://github.com/jhabjan/Ghostscript.NET" target="_blank" rel="noopener">Ghostscript.NET</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前有透過 &lt;a href=&quot;https://www.ghostscript.com/releases/gsdnld.html&quot; targe
      
    
    </summary>
    
    
      <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
      <category term="PDF" scheme="https://rainmakerho.github.io/tags/PDF/"/>
    
      <category term="PNG" scheme="https://rainmakerho.github.io/tags/PNG/"/>
    
      <category term="TIFF" scheme="https://rainmakerho.github.io/tags/TIFF/"/>
    
      <category term="標楷體" scheme="https://rainmakerho.github.io/tags/%E6%A8%99%E6%A5%B7%E9%AB%94/"/>
    
      <category term="kaiu.tff" scheme="https://rainmakerho.github.io/tags/kaiu-tff/"/>
    
      <category term="GhostscriptProcessor" scheme="https://rainmakerho.github.io/tags/GhostscriptProcessor/"/>
    
      <category term="GhostscriptRasterizer" scheme="https://rainmakerho.github.io/tags/GhostscriptRasterizer/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD 地端的 Web App 透過 RBAC 存取 Azure Key Vault</title>
    <link href="https://rainmakerho.github.io/2021/11/28/Azure-WebApp-Access-KeyVault-RBAC/"/>
    <id>https://rainmakerho.github.io/2021/11/28/Azure-WebApp-Access-KeyVault-RBAC/</id>
    <published>2021-11-28T08:14:34.000Z</published>
    <updated>2021-11-28T08:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我們在 Azure AD 中註冊一個地端 Web App (myapp)，而它註冊後，同時也會有一個 azure service principal 叫 myapp。<br>如果要在 myapp 中取得放在 Azure Key Vault 中的 Secret 要怎麼設定呢?</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>設定方式及程式寫作方式可依<a href="https://docs.microsoft.com/en-us/azure/key-vault/general/tutorial-net-create-vault-azure-web-app" target="_blank" rel="noopener">Tutorial: Use a managed identity to connect Key Vault to an Azure web app in .NET</a>。<br>但因為系統是放在地端，所以要將 DefaultAzureCredential 改用 <a href="https://azuresdkdocs.blob.core.windows.net/$web/dotnet/Azure.Identity/1.0.0/api/Azure.Identity/Azure.Identity.ClientSecretCredential.html" target="_blank" rel="noopener">ClientSecretCredential</a> 。<br>因為 <a href="https://azuresdkdocs.blob.core.windows.net/$web/dotnet/Azure.Identity/1.0.0/api/Azure.Identity/Azure.Identity.ClientSecretCredential.html" target="_blank" rel="noopener">ClientSecretCredential</a> 需要 tenantId, clientId 及 clientSecret ，<br>所以需要在 myapp 的 Manage -&gt; Certificates &amp; secrets 功能中，新增一個 Client Secret 並取得它的值即可。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.microsoft.com/en-us/azure/key-vault/general/tutorial-net-create-vault-azure-web-app" target="_blank" rel="noopener">Tutorial: Use a managed identity to connect Key Vault to an Azure web app in .NET</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我們在 Azure AD 中註冊一個地端 Web App (myapp)，而它註冊後，同時也會有一個 azure service princ
      
    
    </summary>
    
    
      <category term="Azure" scheme="https://rainmakerho.github.io/tags/Azure/"/>
    
      <category term="Key Vault" scheme="https://rainmakerho.github.io/tags/Key-Vault/"/>
    
      <category term="RBAC" scheme="https://rainmakerho.github.io/tags/RBAC/"/>
    
      <category term="DefaultAzureCredential" scheme="https://rainmakerho.github.io/tags/DefaultAzureCredential/"/>
    
      <category term="ClientSecretCredential" scheme="https://rainmakerho.github.io/tags/ClientSecretCredential/"/>
    
  </entry>
  
  <entry>
    <title>在 Jenkins 中取回使用者密碼</title>
    <link href="https://rainmakerho.github.io/2021/11/28/Extract-Pass-From-Jenkins/"/>
    <id>https://rainmakerho.github.io/2021/11/28/Extract-Pass-From-Jenkins/</id>
    <published>2021-11-28T07:23:43.000Z</published>
    <updated>2021-11-28T09:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很多公司都會透過 Jenkins 去執行許多 CI 的 Job，<br>而那些 Job 大多需要權限去執行，<br>所以你是設定使用者帳號/密碼，還是使用 Token 呢?<br>當使用帳/密時， Jenkins 會將存起來的<strong>密碼</strong>解回來送給需要的 Task ，<br>所以如果忘了某個帳號的密碼，就可以透過以下的方式取回它!</p><h3 id="如何取得"><a href="#如何取得" class="headerlink" title="如何取得?"></a>如何取得?</h3><p>Jenkins 取得的密碼在 Console output 中是使用 *** 輸出，那要如何取得使用者的密碼呢?</p><p>在 <a href="https://stackoverflow.com/questions/37683143/extract-passphrase-from-jenkins-credentials-xml" target="_blank" rel="noopener">Extract passphrase from Jenkins’ credentials.xml</a> 中，<a href="https://stackoverflow.com/users/2182665/raterus" target="_blank" rel="noopener">raterus</a> 介紹透過 <a href="https://wiki.jenkins.io/display/JENKINS/Credentials+Binding+Plugin?focusedCommentId=80184884" target="_blank" rel="noopener">Jenkins Credential Binding Plugin</a> ，將使用者的密碼 Bind 到 USERPASSWORD 變數之中，在 Buid 階段使用 <strong>Execute Windows batch command</strong> or <strong>Execute shell</strong> ，透過 echo 將密碼存到實體檔案中，即可以得到<strong>使用者:使用者的密碼</strong>。<br><img src="https://i.stack.imgur.com/jYYRY.png"></p><p><code>echo %USERPASSWORD% &gt; password.txt</code></p><p>Bash 請使用 <code>$USERPASSWORD &gt; password.txt</code></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/37683143/extract-passphrase-from-jenkins-credentials-xml" target="_blank" rel="noopener">Extract passphrase from Jenkins’ credentials.xml</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;很多公司都會透過 Jenkins 去執行許多 CI 的 Job，&lt;br&gt;而那些 Job 大多需要權限去執行，&lt;br&gt;所以你是設定使用者帳號/
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://rainmakerho.github.io/tags/Jenkins/"/>
    
      <category term="資安" scheme="https://rainmakerho.github.io/tags/%E8%B3%87%E5%AE%89/"/>
    
      <category term="使用者密碼" scheme="https://rainmakerho.github.io/tags/%E4%BD%BF%E7%94%A8%E8%80%85%E5%AF%86%E7%A2%BC/"/>
    
      <category term="Password" scheme="https://rainmakerho.github.io/tags/Password/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx Insufficient_Connection_String_Encryption</title>
    <link href="https://rainmakerho.github.io/2021/11/18/Insufficient-Connection-String-Encryption/"/>
    <id>https://rainmakerho.github.io/2021/11/18/Insufficient-Connection-String-Encryption/</id>
    <published>2021-11-18T11:55:10.000Z</published>
    <updated>2021-11-18T12:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>web.config 的 Oracle connectionString 被 Checkmarx 掃出 Insufficient_Connection_String_Encryption。<br>因為 Checkmarx 從 Connection String 檢查連到 Oracle 不是走 TLS 協定。<br>註: 如果 MSSQL 就是判斷 Encrypt=true; </p><h3 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"RM"</span> <span class="attr">connectionString</span>=<span class="string">"Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.1.188)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=rmora)));User Id=RM;Password=rmpwd123;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要走 TLS 的話，原本 Protocol 是走 TCP ，依 <a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/odpnt/featConnecting.html#GUID-3B4B12E5-767F-4956-A3E4-EBD501A5365C" target="_blank" rel="noopener">ODP.NET Secure Sockets Layer Configuration</a> 說明，要改走 <strong>TCPS</strong> ，<br>Port Number 也需要一併更改哦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"RM"</span> <span class="attr">connectionString</span>=<span class="string">"Data Source=(DESCRIPTION=(ADDRESS = (PROTOCOL=tcps)(PORT=1522) (HOST=finance_server) (CONNECT_DATA = (SERVICE_NAME=rmora) ));User Id=RM;Password=rmpwd123;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/odpnt/featConnecting.html#GUID-3B4B12E5-767F-4956-A3E4-EBD501A5365C" target="_blank" rel="noopener">ODP.NET Secure Sockets Layer Configuration</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;web.config 的 Oracle connectionString 被 Checkmarx 掃出 Insufficient_Conne
      
    
    </summary>
    
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="Insufficient_Connection_String_Encryption" scheme="https://rainmakerho.github.io/tags/Insufficient-Connection-String-Encryption/"/>
    
      <category term="Oracle" scheme="https://rainmakerho.github.io/tags/Oracle/"/>
    
      <category term="TCPS" scheme="https://rainmakerho.github.io/tags/TCPS/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx Client_Heuristic_Poor_XSS_Validation</title>
    <link href="https://rainmakerho.github.io/2021/11/18/Client-Heuristic-Poor-XSS-Validation/"/>
    <id>https://rainmakerho.github.io/2021/11/18/Client-Heuristic-Poor-XSS-Validation/</id>
    <published>2021-11-18T05:41:33.000Z</published>
    <updated>2021-11-18T05:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>系統被 Checkmarx 掃出有 Client_Heuristic_Poor_XSS_Validation 的 問題要怎麼解呢?<br>Checkmarx 說 Client 端的 Poor_XSS_Validation 表示在 JavaScript 處理 DOM base XSS 時，<br>使用了不夠完整的過濾 Method，例如，escape, encodeURI 等等…</p><h3 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h3><p>以下為修改前的 JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">escape</span>(<span class="built_in">window</span>.location.search);</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">d.innerHTML = x;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(d);</span><br></pre></td></tr></table></figure></p><p>主要從 window.location.search 取得資料，但只是透過簡單的 escape 過濾。<br>可以改用 <a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noopener">DOMPurify</a> 的 sanitize Method，如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = DOMPurify.sanitize(<span class="built_in">window</span>.location.search);</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">d.innerHTML = x;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(d);</span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noopener">DOMPurify</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;系統被 Checkmarx 掃出有 Client_Heuristic_Poor_XSS_Validation 的 問題要怎麼解呢?&lt;br&gt;C
      
    
    </summary>
    
    
      <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
      <category term="Client_Heuristic_Poor_XSS_Validation" scheme="https://rainmakerho.github.io/tags/Client-Heuristic-Poor-XSS-Validation/"/>
    
      <category term="JavaScript" scheme="https://rainmakerho.github.io/tags/JavaScript/"/>
    
      <category term="escape" scheme="https://rainmakerho.github.io/tags/escape/"/>
    
      <category term="encodeURI" scheme="https://rainmakerho.github.io/tags/encodeURI/"/>
    
      <category term="DOMPurify" scheme="https://rainmakerho.github.io/tags/DOMPurify/"/>
    
      <category term="DOM base XSS" scheme="https://rainmakerho.github.io/tags/DOM-base-XSS/"/>
    
  </entry>
  
</feed>
