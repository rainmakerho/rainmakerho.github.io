<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Hello! 我是RM</subtitle>
  <link href="https://rainmakerho.github.io/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2024-05-02T09:20:14.316Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ASP.NET Web Forms 取得 Azure AD 使用者的 Token</title>
    <link href="https://rainmakerho.github.io/2024/05/02/aspnet-webform-aad-token/"/>
    <id>https://rainmakerho.github.io/2024/05/02/aspnet-webform-aad-token/</id>
    <published>2024-05-02T08:07:22.000Z</published>
    <updated>2024-05-02T09:20:14.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 ASPX 中如何取得 Azure AD 使用者的 Token 呢?<br>當使用者按下登入時，跳轉到 Azure AD 登入頁，讓使用者輸入帳&#x2F;密後，<br>轉回本系統驗證沒問題後，設定使用者登入(FormsAuthentication)</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p><strong>1.註冊 App</strong><br>要使用 Azure AD 登入要先在 Microsoft Entra ID 的 App registrations 新增一個 App，<br>並設定 Redirect URI。建立好之後，可以在<strong>Overview</strong>中看到需要的許多資訊，<br><code>Application (client) ID</code>, <code>Directory (tenant) ID</code> …<br>因為是 ASPX ，所以走 OAuth 2.0 Code Flow，需要 <code>authorization endpoint</code> 及 <code>token endpoint</code>。<br>可以按下<strong>Endpoints</strong>就可以知道它們的 URL，如下，</p><img src="/2024/05/02/aspnet-webform-aad-token/01.png" class="" title="Endpoints"><p><strong>2.secrets</strong><br>取回 Token 需要有<code>client_secret</code>，所以到<strong>Certificates &amp; secrets</strong>，<br>建立一個<strong>Client secret</strong>，建立好之後要馬上將<strong>Value</strong>複制下來。</p><p><strong>3.程式-轉址到 Azure AD 登入頁</strong><br>當 App 準備完成後，就可以將 App 的資訊寫到設定檔中，讓程式呼叫使用。所以在 <code>aspx.cs</code> 中設定變數值如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _clientId = <span class="string">&quot;你的clientId&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _clientSecret = <span class="string">&quot;你的clientSecret&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _aadAuthEndpoint = <span class="string">$&quot;https://login.microsoftonline.com/你的 authorize Endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _aadTokenEndpoint = <span class="string">&quot;https://login.microsoftonline.com/你的 token Endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _redirectUri = <span class="string">@&quot;https://你的程式Url&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] _scopes = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;openid&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;profile&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>如果需要<code>refresh_token</code>, <code>scopes</code>可多加上<code>offline_access</code></p><p>然後畫面的 Button 按下登入的 Click 事件中，要組出 Redirect 到 authorize 的 URL，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = Guid.NewGuid().ToString();</span><br><span class="line">Session[<span class="string">&quot;state&quot;</span>] = state;</span><br><span class="line"><span class="built_in">string</span> redirectURL = <span class="string">$&quot;<span class="subst">&#123;_aadAuthEndpoint&#125;</span>?response_type=code&amp;client_id=<span class="subst">&#123;_clientId&#125;</span>&amp;redirect_url=<span class="subst">&#123;_redirectUri&#125;</span>&amp;scope=<span class="subst">&#123;<span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, _scopes)&#125;</span>&amp;state=<span class="subst">&#123;state&#125;</span>&quot;</span>;</span><br><span class="line">Response.Redirect(redirectURL);</span><br></pre></td></tr></table></figure><p><code>state</code>記在 Session 中等 Azure AD 登入完成後，轉址回來時，要驗證是否一致。</p><p><strong>3.程式-接收 Azure AD 回傳的 Code</strong><br>在 Page_Load 的 Get 時，判斷是否有<code>state</code>及<code>code</code>參數，<br>如果存在驗證<code>state</code>相同後，取得<code>code</code>，再透過<code>code</code>來取回<strong>Token</strong>資訊，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Response.Write(<span class="string">$&quot;是否已登入:<span class="subst">&#123;User.Identity.IsAuthenticated&#125;</span>&lt;hr&gt;user:<span class="subst">&#123;User.Identity.Name&#125;</span>&lt;hr&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!Page.IsPostBack)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> state = Request.QueryString[<span class="string">&quot;state&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(state))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> apSate = (<span class="built_in">string</span>)Session[<span class="string">&quot;state&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.Compare(state, apSate) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//與先前建立的state相同才取得code參數值</span></span><br><span class="line">                <span class="built_in">string</span> code = Request.QueryString[<span class="string">&quot;code&quot;</span>];</span><br><span class="line">                <span class="comment">//透過 code 取回 token 並設定登入</span></span><br><span class="line">                ProcLoginByCode(code);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (User.Identity.IsAuthenticated)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//aspx中的 label 元件，顯示 token 的 claims</span></span><br><span class="line">                lblInfo.Text = <span class="built_in">string</span>.Empty;</span><br><span class="line">                ShowIdTokenClaims();</span><br><span class="line">                ShowAccessTokenClaims();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcLoginByCode</span>(<span class="params"><span class="built_in">string</span> code</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;client_id&quot;</span>, _clientId&#125;,</span><br><span class="line">        &#123; <span class="string">&quot;client_secret&quot;</span>, _clientSecret&#125;,</span><br><span class="line">        &#123; <span class="string">&quot;redirect_uri&quot;</span>, _redirectUri &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;code&quot;</span>, code&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">new</span> FormUrlEncodedContent(postData);</span><br><span class="line">    HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    <span class="keyword">var</span> response = client.PostAsync(_aadTokenEndpoint, content).Result;</span><br><span class="line">    <span class="keyword">var</span> data = response.Content.ReadAsStringAsync().Result;</span><br><span class="line">    <span class="built_in">dynamic</span> tokenObj = JsonConvert.DeserializeObject(data);</span><br><span class="line">    <span class="comment">//將id_token&amp;access_token存到session</span></span><br><span class="line">    Session[<span class="string">&quot;idToken&quot;</span>] = <span class="string">$&quot;<span class="subst">&#123;tokenObj.id_token&#125;</span>&quot;</span>;</span><br><span class="line">    Session[<span class="string">&quot;accessToken&quot;</span>] = <span class="string">$&quot;<span class="subst">&#123;tokenObj.access_token&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> idToken = <span class="keyword">new</span> JwtSecurityToken(<span class="string">$&quot;<span class="subst">&#123;tokenObj.id_token&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> userName = idToken.Claims.FirstOrDefault(c =&gt; c.Type == <span class="string">&quot;email&quot;</span>).Value;</span><br><span class="line">    FormsAuthentication.RedirectFromLoginPage(userName, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要顯示 Token 中 Claims 的內容，可以透過<code>JwtSecurityToken</code>，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowIdTokenClaims</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    lblInfo.Text += <span class="string">&quot;========== ID Token ==============&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> token = <span class="string">$&quot;<span class="subst">&#123;Session[<span class="string">&quot;idToken&quot;</span>]&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> jwt = <span class="keyword">new</span> JwtSecurityToken(token);</span><br><span class="line">        ResponseClaims(jwt.Claims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowAccessTokenClaims</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    lblInfo.Text += <span class="string">&quot;========== Access Token ==============&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> token = <span class="string">$&quot;<span class="subst">&#123;Session[<span class="string">&quot;accessToken&quot;</span>]&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> jwt = <span class="keyword">new</span> JwtSecurityToken(token);</span><br><span class="line">        ResponseClaims(jwt.Claims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResponseClaims</span>(<span class="params">IEnumerable&lt;Claim&gt; claims</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> claims)</span><br><span class="line">    &#123;</span><br><span class="line">        lblInfo.Text += <span class="string">$&quot;<span class="subst">&#123;claim.Type&#125;</span>:<span class="subst">&#123;claim.Value&#125;</span>&lt;br/&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要登入，則清空 Session 值並登出，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Session[<span class="string">&quot;idToken&quot;</span>] = <span class="built_in">string</span>.Empty;</span><br><span class="line">Session[<span class="string">&quot;accessToken&quot;</span>] = <span class="built_in">string</span>.Empty;</span><br><span class="line">lblInfo.Text=<span class="built_in">string</span>.Empty;</span><br><span class="line">FormsAuthentication.SignOut();</span><br><span class="line">Response.Redirect(_redirectUri);</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2022/02/15/oAuth2-Basic/">OAuth 2.0 - Authorization Code Flow</a><br><a href="https://learn.microsoft.com/zh-tw/entra/identity-platform/v2-oauth2-auth-code-flow">Microsoft 身分識別平台和 OAuth 2.0 授權碼流程</a></p><blockquote><p>一言既出，駟馬難追: 一個人說出去的話，都要負責任，決不可中途變卦。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 ASPX 中如何取得 Azure AD 使用者的 Token 呢?&lt;br&gt;當使用者按下登入時，跳轉到 Azure AD 登入頁，讓使用者</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="ASPX" scheme="https://rainmakerho.github.io/tags/ASPX/"/>
    
    <category term="Azure AD" scheme="https://rainmakerho.github.io/tags/Azure-AD/"/>
    
    <category term="OAuth" scheme="https://rainmakerho.github.io/tags/OAuth/"/>
    
    <category term="Code" scheme="https://rainmakerho.github.io/tags/Code/"/>
    
    <category term="id_token" scheme="https://rainmakerho.github.io/tags/id-token/"/>
    
    <category term="access_token" scheme="https://rainmakerho.github.io/tags/access-token/"/>
    
    <category term="FormsAuthentication" scheme="https://rainmakerho.github.io/tags/FormsAuthentication/"/>
    
  </entry>
  
  <entry>
    <title>npm install 出現 UNABLE_TO_VERIFY_LEAF_SIGNATURE(unable to verify the first certificate) 的錯誤</title>
    <link href="https://rainmakerho.github.io/2024/04/19/npm-install-UNABLE-TO-VERIFY-LEAF-SIGNATURE/"/>
    <id>https://rainmakerho.github.io/2024/04/19/npm-install-UNABLE-TO-VERIFY-LEAF-SIGNATURE/</id>
    <published>2024-04-19T08:52:47.000Z</published>
    <updated>2024-04-19T09:40:47.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天同事透過<code>npm install</code>時發生了<strong>UNABLE_TO_VERIFY_LEAF_SIGNATURE</strong>的錯誤。<br>原本以為只有那台電腦有問題，結果大家的電腦都是如此。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>網路上大多數的都是設定 npm 去忽略憑證問題，如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> strict-ssl <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>等裝好之後，再設定回<strong>true</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> strict-ssl <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>錄到網路如下，</p><img src="/2024/04/19/npm-install-UNABLE-TO-VERIFY-LEAF-SIGNATURE/01.png" class="" title="執行結果"><p>後來同事 Marty 找到<a href="https://stackoverflow.com/questions/78343601/node-unable-to-verify-the-first-certificate">Node unable to verify the first certificate</a>，是因為 ESET 自簽憑證的問題。</p><p>所以在目前 ESET 未給出解法前，除了設定 ESET 先不掃<code>node.exe</code>外，<br>就是要安裝套件前先設定<code>strict-ssl false</code>後，<br>安裝好之後，再設定<code>strict-ssl true</code>回來。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/78343601/node-unable-to-verify-the-first-certificate">Node unable to verify the first certificate</a><br><a href="https://forum.eset.com/topic/40702-eset-ssl-protection-produces-an-invalid-certificate-chain-for-nodejs-apps/">ESET SSL protection produces an invalid certificate chain for NodeJS apps</a></p><blockquote><p>一杯酒，暖烘烘;一尺布，擋那風: 一杯酒尚能抵一陣寒，一尺布，卻無濟於事。喻某些東西雖然為數不多，仍能濟一時之急。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天同事透過&lt;code&gt;npm install&lt;/code&gt;時發生了&lt;strong&gt;UNABLE_TO_VERIFY_LEAF_SIGNAT</summary>
      
    
    
    
    
    <category term="npm" scheme="https://rainmakerho.github.io/tags/npm/"/>
    
    <category term="SSL" scheme="https://rainmakerho.github.io/tags/SSL/"/>
    
    <category term="ESET" scheme="https://rainmakerho.github.io/tags/ESET/"/>
    
    <category term="UNABLE_TO_VERIFY_LEAF_SIGNATURE" scheme="https://rainmakerho.github.io/tags/UNABLE-TO-VERIFY-LEAF-SIGNATURE/"/>
    
    <category term="unable to verify the first certificate" scheme="https://rainmakerho.github.io/tags/unable-to-verify-the-first-certificate/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 如何透過Kernel Memory對RAG資料的進行權限控管</title>
    <link href="https://rainmakerho.github.io/2024/04/16/sk-kernel-memory-RAG-Security/"/>
    <id>https://rainmakerho.github.io/2024/04/16/sk-kernel-memory-RAG-Security/</id>
    <published>2024-04-16T01:55:02.000Z</published>
    <updated>2024-04-16T08:47:13.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2023/12/26/sk-kernel-memory-postgresql/">Kernel Memory (KM) 使用 Postgres 當 Vector DB</a>中，<br>我們將許多文件的內容轉成 Vector 放到 PostgreSQL 之中，進行查詢。<br>然而在企業應用中，查詢時要依使用者的權限進行過濾，在<strong>Kernel Memory</strong>中要如何做呢?</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>依<a href="https://microsoft.github.io/kernel-memory/security/filters">Kernel Memory Security Filters</a>可以在查詢時進行過濾。<br><strong>1.先將 2 份文件(km1.txt, km2.txt)放到 PostgreSQL</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postgresqlConnstring = <span class="string">&quot;postgresqlConnstring&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> azureAIChatOptions = <span class="keyword">new</span> AzureOpenAIConfig &#123; Auth= AzureOpenAIConfig.AuthTypes.APIKey,  APIKey = <span class="string">&quot;apikey&quot;</span>, Endpoint = <span class="string">&quot;aoai endpoint&quot;</span>, Deployment = <span class="string">&quot;deployment name&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> azureAIEmbeddingOptions = <span class="keyword">new</span> AzureOpenAIConfig &#123; Auth = AzureOpenAIConfig.AuthTypes.APIKey,  APIKey = <span class="string">&quot;apikey&quot;</span>, Endpoint = <span class="string">&quot;aoai endpoint&quot;</span>, Deployment = <span class="string">&quot;deployment name&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> kernelMemoryBuilder = <span class="keyword">new</span> KernelMemoryBuilder()</span><br><span class="line">    .WithPostgresMemoryDb(postgresqlConnstring)</span><br><span class="line">    .WithAzureOpenAITextGeneration(azureAIChatOptions)</span><br><span class="line">    .WithAzureOpenAITextEmbeddingGeneration(azureAIEmbeddingOptions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kernelMemory = kernelMemoryBuilder.Build();</span><br><span class="line"><span class="comment">//先存file</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="string">&quot;km1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> docId1 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">await</span> kernelMemory.ImportDocumentAsync(<span class="keyword">new</span> Document(docId1)</span><br><span class="line">   .AddFile(<span class="string">@&quot;C:\docs\km1.txt&quot;</span>) <span class="comment">//說明 kernel memory</span></span><br><span class="line">   .AddTag(<span class="string">&quot;id&quot;</span>, docId1)</span><br><span class="line">   .AddTag(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;user1&quot;</span>)</span><br><span class="line">   , index: index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> docId2 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">await</span> kernelMemory.ImportDocumentAsync(<span class="keyword">new</span> Document(docId2)</span><br><span class="line">   .AddFile(<span class="string">@&quot;C:\docs\km2.txt&quot;</span>) <span class="comment">//說明 kernel memory</span></span><br><span class="line">   .AddTag(<span class="string">&quot;id&quot;</span>, docId2)</span><br><span class="line">   .AddTag(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;user2&quot;</span>)</span><br><span class="line">   , index: index);</span><br></pre></td></tr></table></figure><p><strong>2.查詢時，依文件 id 過濾</strong><br>假設使用者只允許讀取<code>km1.txt</code>，所以在查詢時，可以加上<code>filter</code> or <code>filters</code>(要使用<code>OR</code>條件)，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> question = <span class="string">&quot;Kernel Memory 是什麼?&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer = <span class="keyword">await</span> kernelMemory.AskAsync(question</span><br><span class="line">    , filters: <span class="keyword">new</span> List&lt;MemoryFilter&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    MemoryFilters.ByDocument(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    ,</span><br><span class="line">                    <span class="comment">// or</span></span><br><span class="line">                    <span class="comment">//MemoryFilters.ByTag(&quot;id&quot;, &quot;2&quot;)</span></span><br><span class="line">                &#125;</span><br><span class="line">    ,index: index);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nQuestion: <span class="subst">&#123;question&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nAnswer: <span class="subst">&#123;answer.Result&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot; ====== 參考資訊 ======&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> answer.RelevantSources)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Source:<span class="subst">&#123;r.SourceName&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以結果只會從<code>km1.txt</code>的內容來產生。<br>上面的做法是依使用者可以存取到的文件來加入<code>filters</code>之中，<br>就可以做到<strong>對 RAG 資料的進行權限控管</strong><br>結果如下，</p><img src="/2024/04/16/sk-kernel-memory-RAG-Security/01.png" class="" title="AskAsync"><blockquote><p>Q.但如果將查詢到的資料源，自已過濾後，再產生答案呢?</p></blockquote><p>那就不能使用<code>AskAsync</code>，而要使用<code>SearchAsync</code>將相似的內容找出來後，再進行過濾(假設只取<code>km1.txt</code>)<br><strong>3.自行過濾文件再產生結果</strong><br>參考<a href="https://github.com/microsoft/kernel-memory/blob/main/service/Core/Search/SearchClient.cs">Kernel Memory-SearchClient.cs</a>中的<code>AskAsync</code>來自行過濾，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> noAnswerFound = <span class="keyword">new</span> MemoryAnswer</span><br><span class="line">&#123;</span><br><span class="line">    Question = question,</span><br><span class="line">    NoResult = <span class="literal">true</span>,</span><br><span class="line">    Result = <span class="string">&quot;INFO NOT FOUND&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> selfAnswer = noAnswerFound;</span><br><span class="line"><span class="keyword">var</span> searchResult = <span class="keyword">await</span> kernelMemory.SearchAsync(question, index: index);</span><br><span class="line"><span class="keyword">var</span> facts = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> searchResult.Results)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(r.DocumentId== <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> r.Partitions)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> fact = <span class="string">$&quot;==== [File:<span class="subst">&#123;r.SourceName&#125;</span>;Relevance:<span class="subst">&#123;p.Relevance:P1&#125;</span>]:\n<span class="subst">&#123;p.Text&#125;</span>\n&quot;</span>;</span><br><span class="line">            facts.Append(fact);</span><br><span class="line">        &#125;</span><br><span class="line">        selfAnswer.RelevantSources.Add(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//產生答案</span></span><br><span class="line"><span class="keyword">var</span> answerWithFacts = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Facts:</span></span><br><span class="line"><span class="string">    &#123;&#123;$facts&#125;&#125;</span></span><br><span class="line"><span class="string">    ======</span></span><br><span class="line"><span class="string">    Given only the facts above, provide a comprehensive/detailed answer.</span></span><br><span class="line"><span class="string">    You don&#x27;t know where the knowledge comes from, just answer.</span></span><br><span class="line"><span class="string">    If you don&#x27;t have sufficient information, reply with &#x27;INFO NOT FOUND&#x27;.</span></span><br><span class="line"><span class="string">    Question: &#123;&#123;$input&#125;&#125;</span></span><br><span class="line"><span class="string">    Answer:</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> prompt = answerWithFacts.Replace(<span class="string">&quot;&#123;&#123;$facts&#125;&#125;&quot;</span>, facts.ToString().Trim(), StringComparison.OrdinalIgnoreCase);</span><br><span class="line">question = question.EndsWith(<span class="string">&#x27;?&#x27;</span>) ? question : <span class="string">$&quot;<span class="subst">&#123;question&#125;</span>?&quot;</span>;</span><br><span class="line">prompt = prompt.Replace(<span class="string">&quot;&#123;&#123;$input&#125;&#125;&quot;</span>, question, StringComparison.OrdinalIgnoreCase);</span><br><span class="line"><span class="keyword">var</span> textGenerator = kernelMemoryBuilder.GetOrchestrator().GetTextGenerator();</span><br><span class="line"><span class="keyword">var</span> options = <span class="keyword">new</span> TextGenerationOptions</span><br><span class="line">&#123;</span><br><span class="line">    Temperature = <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> generateResult = textGenerator.GenerateTextAsync(prompt, options);</span><br><span class="line"><span class="keyword">var</span> generateText = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> x <span class="keyword">in</span> generateResult.ConfigureAwait(<span class="literal">false</span>))</span><br><span class="line">&#123;</span><br><span class="line">    generateText.Append(x);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nQuestion: <span class="subst">&#123;question&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;\nAnswer: <span class="subst">&#123;generateText.ToString()&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot; ====== 參考資訊 ======&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> selfAnswer.RelevantSources)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Source:<span class="subst">&#123;r.SourceName&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過<code>SearchAsync</code>取得結果後，再自行針對來源進行過濾，再將組合好的內容透過<code>TextGenerator</code>來產生結果。<br>結果如下，</p><img src="/2024/04/16/sk-kernel-memory-RAG-Security/02.png" class="" title="自行過濾內容再產生結果"><ul><li>註:請再針對查無資料進行處理。</li></ul><p>以上介紹透過 Kernel Memory 提供的 Security Filters 方式，<br>及自行進行資料權控過濾的方式，透過 Kernel Memory 真的很方便。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2023/12/26/sk-kernel-memory-postgresql/">Kernel Memory (KM) 使用 Postgres 當 Vector DB</a><br><a href="https://microsoft.github.io/kernel-memory/security/filters">Kernel Memory Security Filters</a><br><a href="https://community.openai.com/t/how-are-people-ensuring-secure-access-to-rag-data/649348">How are people ensuring secure access to RAG data</a><br><a href="https://github.com/microsoft/kernel-memory/blob/main/service/Core/Search/SearchClient.cs">Kernel Memory-SearchClient.cs</a></p><blockquote><p>一滴水一個泡，一報還一報: 因果循環，報應必爽，勸人要行好事，尊德性。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2023/12/26/sk-kernel-memory-po</summary>
      
    
    
    
    
    <category term="RBAC" scheme="https://rainmakerho.github.io/tags/RBAC/"/>
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="Kernel Memory" scheme="https://rainmakerho.github.io/tags/Kernel-Memory/"/>
    
    <category term="RAG" scheme="https://rainmakerho.github.io/tags/RAG/"/>
    
    <category term="Security" scheme="https://rainmakerho.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 透過改變 Prompt 來限制用戶題問範圍及解決參數幻覺問題</title>
    <link href="https://rainmakerho.github.io/2024/04/08/sk-prompt-solve-hallucinate/"/>
    <id>https://rainmakerho.github.io/2024/04/08/sk-prompt-solve-hallucinate/</id>
    <published>2024-04-08T03:36:44.000Z</published>
    <updated>2024-04-17T06:17:18.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/">探索 Semantic Kernel 在客服 ChatBot 中的應用(我的客服 Bot 除了會說，還會做)</a>這篇之中，<br>學到了透過 Semantic Kernel 可以快速打造出客服對話機器人。<br>但如果用戶輸入詢問風景等問題，還是會呼叫我們的 Ask Function，<br>所以我們要限定 AI 只能回覆特定的問題。<br>接 Gpt 3.5 API 時，有時會有<strong>參數幻覺問題(hallucinate parameters)</strong><br>所以我們參考<a href="https://community.openai.com/t/make-gpt-ask-questions-to-the-user/284436">Make gpt ask questions to the user</a>的方式，<br>來改變<strong>systemmessage prompt</strong>，看看是否能解決這些問題。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>將<strong>systemMessage</strong>改成限定只有線上購物相關的議題才會呼叫 Function，<br>不然就要一直跟 User 說明跟網購相關的問題才能詢問，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ChatHistory chatMessages = <span class="keyword">new</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">### Operational parameters</span></span><br><span class="line"><span class="string">You are an AI chatbot. You are provided conversational history to examine the information you have previously gathered. Use zh-TW.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Goals</span></span><br><span class="line"><span class="string">Your goal is to collect online shopping related questions from users efficiently.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Rules</span></span><br><span class="line"><span class="string">- AI must prompt and require users to provide information related to online shopping.</span></span><br><span class="line"><span class="string">- AI will only engage in conversation after receiving all necessary information.</span></span><br><span class="line"><span class="string">- Assume users may provide inconsistent or deceptive information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Function</span></span><br><span class="line"><span class="string">Do not call the backend function to process user data until all required information is provided.</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>將程式跑起來後，詢問無關問題時，會被引導只能詢問網購相關問題，<br>改接<strong>Gpt 3.5 API</strong>也不會再出現<strong>參數幻覺問題 hallucinate parameters</strong>，如下圖，</p><img src="/2024/04/08/sk-prompt-solve-hallucinate/01.png" class="" title="執行結果"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://community.openai.com/t/make-gpt-ask-questions-to-the-user/284436">Make gpt ask questions to the user</a><br><a href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/">探索 Semantic Kernel 在客服 ChatBot 中的應用(我的客服 Bot 除了會說，還會做)</a></p><blockquote><p>一隻鷺鶿守一個灘: 比喻每個人有每個人的工作。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2024/04/02/sk-exploring-applic</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="prompt" scheme="https://rainmakerho.github.io/tags/prompt/"/>
    
    <category term="hallucinate" scheme="https://rainmakerho.github.io/tags/hallucinate/"/>
    
    <category term="systemMessage" scheme="https://rainmakerho.github.io/tags/systemMessage/"/>
    
    <category term="參數幻覺" scheme="https://rainmakerho.github.io/tags/%E5%8F%83%E6%95%B8%E5%B9%BB%E8%A6%BA/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 探索 Semantic Kernel 在客服 ChatBot 中的應用(我的客服Bot除了會說，還會做)</title>
    <link href="https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/"/>
    <id>https://rainmakerho.github.io/2024/04/02/sk-exploring-application-in-customer-service-bots/</id>
    <published>2024-04-02T02:19:37.000Z</published>
    <updated>2024-04-02T04:06:50.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前的客服對話機器人，可以讓用戶詢問 FAQ 的內容。<br>如果用戶有其他的服務，就需要判斷用戶的<strong>意圖</strong>，走那個意圖的流程。<br>例如，判斷到用戶輸入<strong>要退貨</strong>，走<strong>退貨</strong>的流程，<br>跑一個退貨的卡片出來，或是一個問題一個問題地讓用戶輸入我們所需要的資料。<br>所以客服對話機器人後端可能需要<br><strong>1.FAQ 的問答集</strong>，<strong>2.取用戶意圖的服務</strong>，<strong>3.取得對話中的 Entity(地點、人名、金額…)</strong></p><p>有了 OpenAI 及 Semantic Kernel 後，一切將變的非常容易，而且還很有彈性哦~</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>以下以<a href="https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1">PChome 常見問題</a>來測試，</p><p><strong>1. 將常見問題存到 Memory，讓用戶來查詢</strong><br>透過<code>MemoryBuilder.WithPostgresMemoryStore</code>，將<a href="https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1">PChome 常見問題</a>存到<code>PostgreSQL</code>(<code>ISemanticTextMemory.SaveReferenceAsync</code>)之中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> memoryDeploymentName = <span class="string">&quot;aoai的 embedding model，例如 ada002&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chatDeploymentName = <span class="string">&quot;aoai的 chat model，例如 gpt4-32k&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;aoai endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;aoai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> connectionString = <span class="string">&quot;PostgreSQL連線字串&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memoryBuilder = <span class="keyword">new</span> MemoryBuilder();</span><br><span class="line">memoryBuilder.WithAzureOpenAITextEmbeddingGeneration(</span><br><span class="line">    memoryDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey);</span><br><span class="line"></span><br><span class="line">memoryBuilder.WithPostgresMemoryStore(connectionString, <span class="number">1536</span>);</span><br><span class="line">ISemanticTextMemory memory = memoryBuilder.Build();</span><br><span class="line"><span class="comment">//先把 FAQ 存到 postgresql DB 之中</span></span><br><span class="line"><span class="keyword">await</span> StoreMemoryAsync(memory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">StoreMemoryAsync</span>(<span class="params">ISemanticTextMemory memory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> faqs = FAQList();</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> qa <span class="keyword">in</span> faqs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> qaText = $<span class="string">$&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            User:&#123;&#123;qa.Question&#125;&#125;</span></span><br><span class="line"><span class="string">            Assistant:&#123;&#123;qa.Answer&#125;&#125;</span></span><br><span class="line"><span class="string">            &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">await</span> memory.SaveReferenceAsync(</span><br><span class="line">            collection: <span class="string">&quot;pchomefaq&quot;</span>,</span><br><span class="line">            externalSourceName: qa.Category,</span><br><span class="line">            externalId: <span class="string">$&quot;<span class="subst">&#123;qa.Id&#125;</span>&quot;</span>,</span><br><span class="line">            description: qaText,</span><br><span class="line">            text: qaText);</span><br><span class="line"></span><br><span class="line">        WriteLine(<span class="string">$&quot; #<span class="subst">&#123;++i&#125;</span> saved.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;\n----------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;QAClass&gt; <span class="title">FAQList</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取自 https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> List&lt;QAClass&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">1</span>, Category=<span class="string">&quot;帳號問題&quot;</span>, Answer=<span class="string">&quot;是的，為了保障您的權益，需要成為會員還能在PChome 24h購物購買商品，此外，成為會員才能享有購物行銷活動及累積P幣等優惠哦！&quot;</span>, Question=<span class="string">&quot;我一定要成為會員，才能在PChome 24h購物中訂購商品嗎？&quot;</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">2</span>, Category=<span class="string">&quot;帳號問題&quot;</span>, Answer=<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                    您可透過以下兩個方式成為註冊會員：</span></span><br><span class="line"><span class="string">        以手機門號註冊，依頁面指示完成資料填寫，即可建立您的個人帳號。</span></span><br><span class="line"><span class="string">        透過第三方帳號快速登入(Facebook/ Google/ Apple帳號與PChome旗下平台帳號)，需輸入第三方帳號密碼並驗證手機門號，驗證完成後即會建立您的個人帳號。</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>, Question=<span class="string">&quot;如何註冊為會員？&quot;</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">3</span>, Category=<span class="string">&quot;發票問題&quot;</span>, Answer=<span class="string">&quot;根據財政部訂定之「電子發票實施作業要點」，於PChome消費開立之「電子發票」將不再主動寄送，後續也會將發票上傳至『財政部電子發票整合服務平台』供會員查閱，相關資料可至財政部電子發票整合服務平台。&quot;</span>, Question=<span class="string">&quot;什麼是電子發票？&quot;</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> QAClass&#123; Id=<span class="number">4</span>, Category=<span class="string">&quot;發票問題&quot;</span>, Answer=<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                    發票開立後即e-mail發票開立通知信，因此在商品送達前就會先收到。</span></span><br><span class="line"><span class="string">        (依據財政部核准字號第0940211766號 「網路購物開立統一發票交付非營業人作業規定」，於本網站消費所開立之個人發票將不主動郵寄(公司發票除外) 。</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>, Question=<span class="string">&quot;為什麼還沒收到商品就收到發票的開立通知信?&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行完成後。<br>可以發現<strong>PostgreSQL</strong>中會自動建立<code>pchomefaq</code>這個 Table，並存放常見問題，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/01.png" class="" title="PostgreSQL"><p><strong>2. 建立 Plugin 來賦與 Chatbot 能力</strong><br>我們需要 Chatbot 除了可以讓用戶查詢 FAQ 外(<code>Ask</code>)，還要可以處理退貨(<code>ReturnGoods</code>)、退貨進度(<code>CheckReturnReceiptProgress</code>)及退款進度(<code>CheckRefundProgress</code>)等服務，所以以要傳入<code>ISemanticTextMemory</code>，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PCHomePlugin</span>(<span class="params">ISemanticTextMemory textMemory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISemanticTextMemory _textMemory = textMemory;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;回答用戶的任何問題&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳FAQ結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Ask</span>(<span class="params">[Description(<span class="string">&quot;用戶的問題&quot;</span></span>)] <span class="built_in">string</span> question)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">&quot;從FAQ找不到，請判斷是否進行訂貨、退貨、回收等任務&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> results = <span class="keyword">await</span> _textMemory.SearchAsync(<span class="string">&quot;pchomefaq&quot;</span>, question, limit: <span class="number">2</span>, minRelevanceScore: <span class="number">0.7</span>).ToListAsync();</span><br><span class="line">        <span class="keyword">if</span> (results.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            result = results.Select(r =&gt; r.Metadata.Description).Aggregate((a, b) =&gt; a + Environment.NewLine + b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;執行退貨申請&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳執行退貨的結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReturnGoods</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Description(<span class="string">&quot;訂購人員姓名&quot;</span></span>)] <span class="built_in">string</span> customerName,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂購人員電話&quot;</span></span>)] <span class="built_in">string</span> phoneNumber,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂單編號&quot;</span></span>)] <span class="built_in">string</span> orderNumber)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> order = GetOrder(customerName, phoneNumber, orderNumber);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，已為您申請退貨流程，宅配將於2-3日內聯繫取件，請您協助將商品恢復原到貨包裝封箱備妥，留意宅配取件通知，謝謝您&quot;</span>;</span><br><span class="line">        DateTime.TryParse(order.OrderDate, <span class="keyword">out</span> <span class="keyword">var</span> orderDate);</span><br><span class="line">        <span class="keyword">var</span> diffOfDates = DateTime.Now - orderDate;</span><br><span class="line">        <span class="keyword">if</span> (diffOfDates.Days &gt; <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，因為您的商品已超過七日猶豫期，若有問題可洽廠商/原廠處理，謝謝您&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;查詢退貨收件進度&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳查詢退貨收件進度的結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">CheckReturnReceiptProgress</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Description(<span class="string">&quot;訂購人員姓名&quot;</span></span>)] <span class="built_in">string</span> customerName,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂購人員電話&quot;</span></span>)] <span class="built_in">string</span> phoneNumber,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂單編號&quot;</span></span>)] <span class="built_in">string</span> orderNumber)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> order = GetOrder(customerName, phoneNumber, orderNumber);</span><br><span class="line">        DateTime.TryParse(order.OrderDate, <span class="keyword">out</span> <span class="keyword">var</span> orderDate);</span><br><span class="line">        order.ApplyReturnGoodDate = orderDate.AddDays(<span class="number">1</span>).ToString();</span><br><span class="line">        order.ReceiptDate = orderDate.AddDays(<span class="number">3</span>).ToString();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，查詢您已於<span class="subst">&#123;order.ApplyReturnGoodDate&#125;</span>申請退貨，退貨商品將於申請退貨後由「物流商」前往取件，會在<span class="subst">&#123;order.ReceiptDate&#125;</span>收件，請您協助保持手機暢通並留意接聽電話&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (order.OrderNumber == <span class="string">&quot;0001&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]您好，查詢您已於<span class="subst">&#123;order.ApplyReturnGoodDate&#125;</span>申請退貨，但尚未與物流商約定時間，我們將為您通知「物流商」儘速與您聯繫約定取件時間，請您協助保持手機暢通並留意接聽電話&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">KernelFunction, Description(<span class="string">&quot;查詢退款進度&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">return: Description(<span class="string">&quot;回傳查詢退款進度的結果&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">CheckRefundProgress</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        [Description(<span class="string">&quot;訂購人員姓名&quot;</span></span>)] <span class="built_in">string</span> customerName,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂購人員電話&quot;</span></span>)] <span class="built_in">string</span> phoneNumber,</span></span><br><span class="line"><span class="function">        [<span class="title">Description</span>(<span class="params"><span class="string">&quot;訂單編號&quot;</span></span>)] <span class="built_in">string</span> orderNumber)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> order = GetOrder(customerName, phoneNumber, orderNumber);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]退貨商品已驗收完成，待確認退款憑證與退款方式無誤後將會進入退款作業，敬請耐心等候，謝謝您&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (order.OrderNumber != <span class="string">&quot;0001&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">$&quot;[<span class="subst">&#123;order.CustomerName&#125;</span>,<span class="subst">&#123;order.PhoneNumber&#125;</span>, <span class="subst">&#123;order.PaymentType&#125;</span>]因退貨商品尚未驗收完成，需請您耐心等候。若退貨商品尚未取件，懇請您主動與我們聯絡，謝謝您&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Order <span class="title">GetOrder</span>(<span class="params"><span class="built_in">string</span> customerName,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">string</span> phoneNumber, <span class="built_in">string</span> orderNumber = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">        Order order = <span class="keyword">new</span> Order()</span><br><span class="line">        &#123;</span><br><span class="line">            OrderNumber = orderNumber,</span><br><span class="line">            CustomerName = customerName,</span><br><span class="line">            PhoneNumber = phoneNumber,</span><br><span class="line">            Id = rnd.Next(<span class="number">10000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (orderNumber == <span class="string">&quot;0001&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            order.OrderDate = DateTime.Now.AddDays(<span class="number">-5</span>).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            order.OrderDate = DateTime.Now.AddDays(<span class="number">-1</span>).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OrderNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OrderDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=DateTime.Now.ToString();</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PhoneNumber &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PaymentType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;=<span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ReceiptDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ApplyReturnGoodDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 透過 Semantic Kernel 將 LLM, Plugin 及 Memory 整合起來服務用戶</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> memoryDeploymentName = <span class="string">&quot;aoai的 embedding model，例如 ada002&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chatDeploymentName = <span class="string">&quot;aoai的 chat model，例如 gpt4-32k&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;aoai endpoint&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;aoai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> connectionString = <span class="string">&quot;PostgreSQL連線字串&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memoryBuilder = <span class="keyword">new</span> MemoryBuilder();</span><br><span class="line">memoryBuilder.WithAzureOpenAITextEmbeddingGeneration(</span><br><span class="line">    memoryDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey);</span><br><span class="line"><span class="comment">//設定存到 PostgreSQL</span></span><br><span class="line">memoryBuilder.WithPostgresMemoryStore(connectionString, <span class="number">1536</span>);</span><br><span class="line">ISemanticTextMemory memory = memoryBuilder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line">kernelBuilder.Services.AddAzureOpenAIChatCompletion(</span><br><span class="line">    chatDeploymentName,</span><br><span class="line">    endpoint,</span><br><span class="line">    apikey</span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plugin = <span class="keyword">new</span> PCHomePlugin(memory);</span><br><span class="line"><span class="comment">//賦與 Chatbot 有Plugin能力</span></span><br><span class="line">kernel.ImportPluginFromObject(plugin);</span><br><span class="line">IChatCompletionService chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line"><span class="comment">//讓LLM使用我們提供的Function，並使用中文對話</span></span><br><span class="line">ChatHistory chatMessages = <span class="keyword">new</span>(<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Answer the questions as accurately as possible using the provided functions.</span></span><br><span class="line"><span class="string">    Continue the conversation acting as the ASSISTANT.</span></span><br><span class="line"><span class="string">    Respond to the USER by using available information and functions.</span></span><br><span class="line"><span class="string">    Use zh-TW.</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;請在 User &gt; 後輸入您想要提問的問題，輸入 exit 就結束對話。&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">    Console.Write(<span class="string">&quot;User &gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> userInput = System.Console.ReadLine()!;</span><br><span class="line">    <span class="keyword">if</span> (userInput == <span class="string">&quot;exit&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    chatMessages.AddUserMessage(userInput);</span><br><span class="line"></span><br><span class="line">    OpenAIPromptExecutionSettings openAIPromptExecutionSettings = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//設定讓 ChatCompletionService 可依語義自動去呼叫需要的 Functions(Function Calling)</span></span><br><span class="line">        ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,</span><br><span class="line">        Temperature = <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> result = chatCompletionService.GetStreamingChatMessageContentsAsync(</span><br><span class="line">        chatMessages,</span><br><span class="line">        executionSettings: openAIPromptExecutionSettings,</span><br><span class="line">        kernel: kernel);</span><br><span class="line">    <span class="built_in">string</span> fullMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> first = <span class="literal">true</span>;</span><br><span class="line">    Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">    Console.ForegroundColor = ConsoleColor.DarkGreen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> content <span class="keyword">in</span> result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (content.Role.HasValue &amp;&amp; first)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">$&quot;Assistant &gt; &quot;</span>);</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.Write(content.Content);</span><br><span class="line">        fullMessage += content.Content;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    <span class="comment">// Add the message from the agent to the chat history</span></span><br><span class="line">    chatMessages.AddAssistantMessage(fullMessage);</span><br><span class="line">&#125;</span><br><span class="line">Console.ForegroundColor = ConsoleColor.DarkRed;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;結束對話...&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p><strong>1. 詢問常見問題</strong><br>詢問<code>我一定要成為會員，才能在PChome 24h購物中訂購商品嗎？</code>，會將<strong>會員</strong>相關內容透過<strong>LLM</strong>總結回覆，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/02.png" class="" title="FAQ"><p><strong>2. 申請退貨</strong><br>輸入<code>我要退貨</code>，LLM 會判斷要呼叫<code>ReturnGoods</code>這個 Function，並詢問用戶取得需要的參數值。<br>當收到用戶輸入的參數值後，會透過<code>Semantic Kernel</code>來呼叫<code>ReturnGoods</code>，並帶入參數，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/03.png" class="" title="執行退貨功能"><p>最後將<code>ReturnGoods</code>的結果，透過<strong>LLM</strong>總結回覆，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/04.png" class="" title="回覆執行退貨結果"><p><strong>3. 查詢收貨進度</strong><br>輸入<code>我有申請退貨的商品什麼時候要來收呢?</code>，LLM 會判斷要呼叫<code>CheckReturnReceiptProgress</code>這個 Function，並詢問用戶取得需要的參數值。<br>當收到用戶輸入的參數值後，會透過<code>Semantic Kernel</code>來呼叫<code>CheckReturnReceiptProgress</code>，並帶入參數，最後將<code>CheckReturnReceiptProgress</code>的結果，透過<strong>LLM</strong>總結回覆，如下，</p><img src="/2024/04/02/sk-exploring-application-in-customer-service-bots/05.png" class="" title="回覆退貨收件進度"><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>原本需要很多 AI 服務，並需要開發人員去寫出各種複雜的程式流程，<br>當透過<strong>Semantic Kernel</strong>來協調整合<strong>LLM</strong>、<strong>Memory</strong>及<strong>Plugins</strong>後，<br>一切變很容易很多。<br>當然，這其中還有許多要克服的事，例如，</p><p>1.使用 ChatGPT3.5 會有參數幻覺問題(hallucinate parameters)，不會問用戶，會直接給參數值</p><p>2.LLM 總結回覆花費蠻多時間</p><p>3.查詢 FAQ 是否準確<br>…</p><p>但不可否認，這是一個美好的開始，讓寫 Chatbot 更容易、更有彈性。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/semantic-kernel/overview/">Semantic Kernel</a><br><a href="https://rainmakerho.github.io/2024/01/04/sk-agent/">Semantic Kernel | 如何建立智慧助理(Agent)</a><br><a href="https://sannidhisiva.medium.com/semantic-kernel-sk-orchestration-for-healthcare-administrative-operations-8d17d5fbb3cc">Semantic Kernel(SK) Orchestration for Healthcare Administrative operations</a><br><a href="https://learn.microsoft.com/zh-tw/ai-builder/prebuilt-entity-extraction">實體擷取預建模型</a><br><a href="https://ecvip.pchome.com.tw/web/pages/faqmap.htm?qid=1">PChome 常見問題</a><br><a href="https://www.linkedin.com/pulse/vector-embeddings-dimensionality-retriever-augmented-busleiman-/">Vector Embeddings, Dimensionality, and Retriever-Augmented Generation</a></p><blockquote><p>一隻手只捉到一條魚: 勸人做事要專一，以免貪多嚼不爛，應作明確的抉擇。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;以前的客服對話機器人，可以讓用戶詢問 FAQ 的內容。&lt;br&gt;如果用戶有其他的服務，就需要判斷用戶的&lt;strong&gt;意圖&lt;/strong&gt;，</summary>
      
    
    
    
    
    <category term="FAQ" scheme="https://rainmakerho.github.io/tags/FAQ/"/>
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="AutoInvokeKernelFunctions" scheme="https://rainmakerho.github.io/tags/AutoInvokeKernelFunctions/"/>
    
    <category term="ISemanticTextMemory" scheme="https://rainmakerho.github.io/tags/ISemanticTextMemory/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | 連接 LM Studio Local Phi-2 Server</title>
    <link href="https://rainmakerho.github.io/2024/03/29/sk-local-llm-server/"/>
    <id>https://rainmakerho.github.io/2024/03/29/sk-local-llm-server/</id>
    <published>2024-03-29T09:19:45.000Z</published>
    <updated>2024-03-31T06:22:27.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我們可以透過<a href="https://lmstudio.ai/">LM Studio</a>下載 LLM Model 在 Local 測試。<br>透過 Sementic Kernel 要如何使用 LM Studio 啟動的 Server 呢?</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>在<a href="https://lmstudio.ai/">LM Studio</a>，下載 phi-2 來測試。</p><img src="/2024/03/29/sk-local-llm-server/01.png" class="" title="LM Studio phi-2"><p>下載完成後，可以點選左側<strong>AI Chat</strong>，選擇下載的<strong>phi 2 3B Q4_KS gguf</strong>Model 來進行測試。</p><img src="/2024/03/29/sk-local-llm-server/02.png" class="" title="LM Studio AI Chat"><p>如果要起 Local Server ，則要按左側<strong>Local Server</strong>，再按下<strong>Start Server</strong>，<br>就可以看到 Service 的 Endpoint，如下，</p><img src="/2024/03/29/sk-local-llm-server/03.png" class="" title="LM Studio Server"><p>因為我們用的是 Chat ，所以 Endpoint 是 <code>http://localhost:1234/v1/chat/completions</code>，<br>而 apikey 則是<code>lm-studio</code>，有了這些資訊，就可以開始透過<code>Semantic Kernel</code>連到 Local LLM Server。<br>因為 Endpoint 與 Azure AOAI 不同，所以我們要建立 HttpHandler 來將 URL 改成正確的，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LocalLLMHttpHandler</span>(<span class="params"><span class="built_in">string</span> url</span>) : HttpClientHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Uri _Uri = <span class="keyword">new</span> Uri(url);</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;HttpResponseMessage&gt; <span class="title">SendAsync</span>(<span class="params">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//原本的URL是 /v1/chat/completions/openai/deployments/localLLM/chat/completions?api-version=2024-02-15-preview</span></span><br><span class="line">        <span class="comment">//要改成 http://localhost:1234/v1/chat/completions</span></span><br><span class="line">        request.RequestUri = _Uri;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.SendAsync(request, cancellationToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以透過<code>KernelBuilder.AddAzureOpenAIChatCompletion</code>時，<br>要傳入有設定<code>LocalLLMHttpHandler</code>的<code>HttpClient</code>就可以了，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deploymentName = <span class="string">&quot;localLLM&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> endpoint = <span class="string">&quot;http://localhost:1234/v1/chat/completions&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> apikey = <span class="string">&quot;lm-studio&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient(<span class="keyword">new</span> LocalLLMHttpHandler(endpoint)) ;</span><br><span class="line">httpClient.BaseAddress = <span class="keyword">new</span> Uri(endpoint);</span><br><span class="line"><span class="keyword">var</span> kernelBuilder = Kernel.CreateBuilder();</span><br><span class="line">kernelBuilder.AddAzureOpenAIChatCompletion(deploymentName, endpoint, apikey, httpClient:httpClient);</span><br><span class="line"><span class="keyword">var</span> kernel = kernelBuilder.Build();</span><br><span class="line"><span class="keyword">var</span> historyFunction = KernelFunctionFactory.CreateFromPrompt(<span class="string">&quot;Briefly describe historical information about Taiwan&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">//var response = await kernel.InvokeAsync(historyFunction);</span></span><br><span class="line"><span class="string">//Console.WriteLine(response.GetValue&lt;string&gt;());</span></span><br><span class="line"><span class="string">var response = kernel.InvokeStreamingAsync(historyFunction);</span></span><br><span class="line"><span class="string">await foreach(var item in  response)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Console.Write(item);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>執行結果如下，</p><img src="/2024/03/29/sk-local-llm-server/04.png" class="" title="Semantic Kernel Result"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.youtube.com/watch?v=9Bl7aZ_s9nE">Connecting to Local LLM Server with Microsoft Semantic Kernel</a><br><a href="https://techcommunity.microsoft.com/t5/educator-developer-blog/chat-service-demo-running-phi-2-llm-locally-with-semantic-kernel/ba-p/4054821">Chat Service demo running Phi-2 LLM locally with Semantic Kernel</a></p><blockquote><p>一隻手拿五枝花，一隻手拿六枝花(五花打六花): 喻雙方旗鼓相當，相差不遠。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我們可以透過&lt;a href=&quot;https://lmstudio.ai/&quot;&gt;LM Studio&lt;/a&gt;下載 LLM Model 在 Local</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="LM Studio" scheme="https://rainmakerho.github.io/tags/LM-Studio/"/>
    
    <category term="Local Server" scheme="https://rainmakerho.github.io/tags/Local-Server/"/>
    
    <category term="Phi-2" scheme="https://rainmakerho.github.io/tags/Phi-2/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Kernel | OpenAI Assistants</title>
    <link href="https://rainmakerho.github.io/2024/03/28/sk-assistant-api-agent/"/>
    <id>https://rainmakerho.github.io/2024/03/28/sk-assistant-api-agent/</id>
    <published>2024-03-28T05:02:17.000Z</published>
    <updated>2024-03-29T06:47:41.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在<a href="https://rainmakerho.github.io/2023/11/29/openai-assistant-api/">OpenAI Assistants API 初體驗</a>是自行呼叫 API，<br>在 Semantic Kernel(SK) 中已有封裝對應的 Method 可以使用。<br>以下就來看看如何透過 Semantic Kernel 中的 AgentBuilder 來建立出 Assistant 。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>Azure OpenAI 中，只要 Region 是在 australiaeast, eastus, eastus2, francecentral, norwayeast, swedencentral, uksouth ，<br>就可以建立 Assistant(Preview) 。<br>建立完成後，把檔案上傳上去，並啟用「Code interpreter」存檔後，<br>最上面有一個<code>Assistant ID</code>，將它 Copy 下來，程式中可以透過它來取得 Agent。</p><img src="/2024/03/28/sk-assistant-api-agent/01.png" class="" title="TimePlugin_Today"><p>有了<code>AssistantId</code>，就可以建立<code>Agent</code>來問它問題，如下，</p><p>1.加入<code>Microsoft.SemanticKernel.Experimental.Agents</code>套件，</p><p>2.開始寫程式，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> agentBuilder = <span class="keyword">new</span> AgentBuilder()</span><br><span class="line">            .WithAzureOpenAIChatCompletion(<span class="string">&quot;azureAI的Endpoint&quot;</span>, <span class="string">&quot;azureAI的Deployment&quot;</span>, <span class="string">&quot;azureAI的APIKey&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> agentId = <span class="string">&quot;建立AssistantId&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> agent = <span class="keyword">await</span> agentBuilder.GetAsync(agentId);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Assistant Name:<span class="subst">&#123;agent.Name&#125;</span>&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> thread = <span class="keyword">await</span> agent.NewThreadAsync();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(<span class="string">&quot;User &gt; &quot;</span>);</span><br><span class="line"><span class="keyword">var</span> userInput = Console.ReadLine()!;</span><br><span class="line"><span class="keyword">if</span> (userInput == <span class="string">&quot;exit&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Console.Write(<span class="string">&quot;Assistant &gt; &quot;</span>);</span><br><span class="line"><span class="keyword">var</span> response = thread.InvokeAsync(agent, userInput);</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> message <span class="keyword">in</span> response)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;[<span class="subst">&#123;message.Id&#125;</span>]&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;# <span class="subst">&#123;message.Role&#125;</span>: <span class="subst">&#123;message.Content&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> ( Exception ex )</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(ex.ToString() );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//最後要把 Thread 刪掉</span></span><br><span class="line">    <span class="keyword">await</span> agent.DeleteThreadAsync(thread.Id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>註: 用 Assistant 的好處是，它會幫我們維持 State，所以不用像之前要把之前的對話紀錄再送回去給 OpenAI，但要記得建立後要將它刪除或是記錄 ThreadId 下來。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2023/11/29/openai-assistant-api/">OpenAI Assistants API 初體驗</a><br><a href="https://devblogs.microsoft.com/semantic-kernel/assistants-the-future-of-semantic-kernel/">OpenAI Assistants: the future of Semantic Kernel</a></p><blockquote><p>一串錢打不齊腳後跟: 禮輕情義重，雖然小小的金錢，解不了對方的困難，但助人的精神可嘉。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://rainmakerho.github.io/2023/11/29/openai-assistant-ap</summary>
      
    
    
    
    
    <category term="SK" scheme="https://rainmakerho.github.io/tags/SK/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="Assistant" scheme="https://rainmakerho.github.io/tags/Assistant/"/>
    
    <category term="AgentBuilder" scheme="https://rainmakerho.github.io/tags/AgentBuilder/"/>
    
    <category term="AOAI" scheme="https://rainmakerho.github.io/tags/AOAI/"/>
    
  </entry>
  
  <entry>
    <title>需要在程式中透過 ConfigurationBuilder.AddJsonFile 把 appsettings.json 加入嗎?</title>
    <link href="https://rainmakerho.github.io/2024/03/26/configurationbuilder-addjsonfile-appsettings/"/>
    <id>https://rainmakerho.github.io/2024/03/26/configurationbuilder-addjsonfile-appsettings/</id>
    <published>2024-03-26T08:26:39.000Z</published>
    <updated>2024-03-26T09:07:20.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近透過<a href="https://marketplace.visualstudio.com/items?itemName=BotBuilder.botbuilderv4">Bot Framework v4 SDK Templates for Visual Studio</a>來建立 Bot 時，<br>在<code>Program.cs</code>及<code>Startup.cs</code>都有透過<code>ConfigurationBuilder</code>把<code>appsettings.json</code>加進它的 Sources 之中<br><code>Program.cs</code>的程式是在<code>CreateHostBuilder</code>，如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            webBuilder.ConfigureAppConfiguration((context, config) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                config.AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>,</span><br><span class="line">                    optional:<span class="literal">true</span>,</span><br><span class="line">                    reloadOnChange:<span class="literal">true</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// Other Codes....</span></span><br><span class="line">            webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><code>Startup.cs</code>是在 <code>ConfigureServices</code> Method 之中，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">.AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>)</span><br><span class="line">.AddEnvironmentVariables()</span><br><span class="line">.Build();</span><br><span class="line">services.AddSingleton(configuration);</span><br><span class="line"><span class="comment">// Other Codes....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p>所以在<code>program.cs</code>加上中斷點來看一下，<code>appsettings.json</code>是否已存在<code>ConfigurationBuilder</code>的 Sources 之中，</p><img src="/2024/03/26/configurationbuilder-addjsonfile-appsettings/01.png" class="" title="config.AddJsonFile"><p>可以發現，透過<code>config.AddJsonFile(&quot;appsettings.json&quot;</code>後<code>ConfigurationBuilder</code>的 Sources 又多了一個<code>appsettings.json</code>。<br>所以，在<code>Program.cs</code>及<code>Startup.cs</code>的<code>AddJsonFile</code>把<code>appsettings.json</code>加進去的程式碼是可以不用寫的。<br>除非，在環境變數中有設定值，你要透過<code>appsettings.json</code>把它蓋過去。<br>預設的 Configuration 優先序請參考<a href="https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/">ASP.NET Core 的設定</a></p><p>那如果在<code>ConfigureServices</code>要用到<code>IConfiguration</code>怎麼辦呢?<br>就注入它後，拿來用就行了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _configuration = configuration;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=BotBuilder.botbuilderv4">Bot Framework v4 SDK Templates for Visual Studio</a><br><a href="https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/">ASP.NET Core 的設定</a></p><blockquote><p>一吊錢在門限上(裡外都是半吊): 留一半，用一半</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近透過&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=BotBu</summary>
      
    
    
    
    
    <category term="Bot Framework v4 SDK Templates for Visual Studio" scheme="https://rainmakerho.github.io/tags/Bot-Framework-v4-SDK-Templates-for-Visual-Studio/"/>
    
    <category term="ConfigureAppConfiguration" scheme="https://rainmakerho.github.io/tags/ConfigureAppConfiguration/"/>
    
    <category term="ConfigurationBuilder" scheme="https://rainmakerho.github.io/tags/ConfigurationBuilder/"/>
    
    <category term="AddJsonFile" scheme="https://rainmakerho.github.io/tags/AddJsonFile/"/>
    
  </entry>
  
  <entry>
    <title>(ODBC SQL Server Driver)SQL Server 不存在或拒絕存取(無效的連線字串屬性)</title>
    <link href="https://rainmakerho.github.io/2024/03/25/odbc-sqlserver-driver-dbnetlib-sql-server-does-not-exist/"/>
    <id>https://rainmakerho.github.io/2024/03/25/odbc-sqlserver-driver-dbnetlib-sql-server-does-not-exist/</id>
    <published>2024-03-25T05:05:15.000Z</published>
    <updated>2024-03-26T01:04:15.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近朋友一個系統環境 DB 是 SQL Server 2008 R2 (<code>192.168.211.213</code>)，AP Server 改使用 Windows 2022。<br>分別裝了 2 台 AP Server (<code>192.168.211.204</code> 及 <code>192.168.211.205</code>)，卻發現其中有一台(<code>192.168.211.204</code>)連線時會發生 <code>SQL Server does not exist or access denied</code> 的錯誤，另一台則是正常的。</p><blockquote><p>ERROR [08001] [Microsoft][ODBC SQL Server Driver][DBNETLIB]SQL Server 不存在或拒絕存取。<br>ERROR [01000] [Microsoft][ODBC SQL Server Driver][DBNETLIB]ConnectionOpen (Connect()).<br>ERROR [01S00] [Microsoft][ODBC SQL Server Driver]無效的連線字串屬性</p></blockquote><h3 id="調查及解決"><a href="#調查及解決" class="headerlink" title="調查及解決"></a>調查及解決</h3><p>它的連線字串為，<br><code>driver=&#123;SQL Server&#125;;Server=192.168.211.213;port=62667;Database=RMDB;uid=rm;pwd=rmpwd</code><br>使用 <code>OdbcConnection</code>，程式如下，<br>設定檔內容，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;DB2_HOSTNAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.211.213&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;DB2_PORT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;62667&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;DB2_DB&quot;</span> <span class="attr">value</span>=<span class="string">&quot;RMDB&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;DB2_UID&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;DB2_PWD&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rmpwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OdbcConnection conn = <span class="keyword">new</span> OdbcConnection();</span><br><span class="line">strConnString = <span class="string">&quot;driver=&#123;SQL Server&#125;;Server=[DB2_HOSTNAME設定值];port=[DB2_PORT設定值];Database=[DB2_DB設定值];uid=[DB2_UID設定值];pwd=[DB2_PWD設定值]&quot;</span>;</span><br><span class="line">conn.ConnectionString = strConnString;</span><br><span class="line">conn.Open();</span><br></pre></td></tr></table></figure><p>因為 ODBC 除了有 <code>SQL Server</code> 這個 Driver ，還有 <code>ODBC Driver 17 for SQL Server</code> ，<br>所以就將連線字串改成，<br><code>driver=&#123;ODBC Driver 17 for SQL Server&#125;;Server=192.168.211.213;port=62667;Database=RMDB;uid=rm;pwd=rmpwd</code></p><p>結果就發生 <code>具名管理提供者: 無法開啟 SQL Server 連線</code> 的錯誤，如下，</p><blockquote><p>ERROR [08001] [Microsoft][ODBC Driver 17 for SQL Server]具名管理提供者: 無法開啟 SQL Server 連線 [5]<br>ERROR [01S00] [Microsoft][ODBC Driver 17 for SQL Server]無效的連線字串屬性</p></blockquote><p>奇怪，怎麼不是走 <code>TCP/IP</code> ，而是走 <code>Named Pipes</code> 呢?<br>透過<a href="https://www.microsoft.com/en-us/download/details.aspx?id=4865">Microsoft Network Monitor 3.4</a>在 DB Server 錄到的封包，<br><code>192.168.211.204</code> &#x3D;&gt; <code>192.168.211.213</code></p><img src="/2024/03/25/odbc-sqlserver-driver-dbnetlib-sql-server-does-not-exist/01.png" class="" title="204-&gt;213"><p><code>192.168.211.205</code> &#x3D;&gt; <code>192.168.211.213</code></p><img src="/2024/03/25/odbc-sqlserver-driver-dbnetlib-sql-server-does-not-exist/02.png" class="" title="205-&gt;213"><p>可以發現，用同樣的連線字串，AP(204)連 DB 是走<code>1433</code> Port, 而 AP(205)卻是走正確的<code>62667</code><br>仔細看一下連線字串好像怪怪的，參考<a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.data.sqlclient.sqlconnection.open?view=netframework-4.8">SqlConnection.Open 方法</a>的說明，</p><blockquote><p>如果您嘗試連線到 SQL Server 的實例，並使用 TCP&#x2F;IP 以外的通訊協定時，指定 1433 以外的埠號碼，此方法就會 Open 失敗。 若要指定 1433 以外的埠號碼，請在連接字串中包含 「server&#x3D;machinename,port number」，並使用 TCP&#x2F;IP 通訊協定</p></blockquote><p>目前的連線字串是<br><code>driver=&#123;SQL Server&#125;;Server=192.168.211.213;port=62667;Database=RMDB;uid=rm;pwd=rmpwd</code>，<br>應該是要改成<br><code>driver=&#123;SQL Server&#125;;Server=192.168.211.213,62667;Database=RMDB;uid=rm;pwd=rmpwd</code>，<br>才是正確的。</p><p>所以將設定內容中的<code>&lt;add key=&quot;DB2_HOSTNAME&quot; value=&quot;192.168.211.213&quot;&gt;</code><br>改成<code>&lt;add key=&quot;DB2_HOSTNAME&quot; value=&quot;192.168.211.213,62667&quot;&gt;</code> AP-204 就可以正常連線了。</p><p>但為什麼 AP-205 連線字串的 HOST 並沒有加<code>,port number</code>，卻可以連線成功呢?<br>於是想到 <strong>SQL Server 組態管理員</strong> 可以設定 Client 的通訊協定及別名，<br>但是 AP 打開來，裡面的確有設定<code>192.168.211.213</code>別名，同時設定它走 62667 Port。<br>卻只有<code>32位元</code>的 Client 設定，並沒有<code>64位元</code>的 Client 設定</p><img src="/2024/03/25/odbc-sqlserver-driver-dbnetlib-sql-server-does-not-exist/03.png" class="" title="SQL Server 組態管理員"><p>但因為程式是 X64 的，所以直接看機碼比較快，<br><code>64位元</code>的機碼如下，<br><code>電腦\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSSQLServer\Client\ConnectTo</code></p><p><code>32位元</code>的機碼如下，<br><code>電腦\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\MSSQLServer\Client\ConnectTo</code></p><p>結果一看 AP-205 有一個<code>192.168.211.213</code>別名，並設定走 TCP 62667 Port。<br>而 AP-204 別名卻是<code>192.168.211.213,62667</code>，並設定走 TCP 62667 Port。</p><img src="/2024/03/25/odbc-sqlserver-driver-dbnetlib-sql-server-does-not-exist/04.png" class="" title="Alias"><p>原來是別名設定錯誤，難怪 AP-204 會用 TCP 1433 去連。<br>請朋友將機碼的名稱從<code>192.168.211.213,62667</code> 改成 <code>192.168.211.213</code> 就沒問題了。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>以上雖然只是幾步，但查花了幾天的時間才找出這些問題。<br>如果有詳細去看錯誤訊息<code>無效的連線字串屬性</code>，應該可以及早發現是連線字串的問題。</p><p>如果可以早點到機碼檢查 SQL Client 別名，應該也可以早點確認是<strong>SQL Server 組態管理員</strong>設定別名的問題。<br>原來<strong>SQL Server 組態管理員</strong>的<strong>SQL Native Client 11.0 組態</strong>會影響到<strong>ODBC</strong>的 SQL 連線。</p><p>為什麼那個連線字串為什麼 Port 寫在連線字串的屬性中(<code>port=62667</code>)呢?<br>從設定中的名稱就可以發現原本使用的 DB 應該是<strong>IBM DB2</strong>，後來才改成<strong>SQL Server</strong>的。<br>因為 IBM DB2 的 ODBC 連線字串就是<br><code>Driver=&#123;IBM DB2 ODBC DRIVER&#125;;Database=myDataBase;Hostname=myServerAddress;Port=1234;Protocol=TCPIP;Uid=myUsername;Pwd=myPassword;</code></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=4865">Microsoft Network Monitor 3.4</a><br><a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.data.sqlclient.sqlconnection.open?view=netframework-4.8">SqlConnection.Open 方法</a></p><blockquote><p>一床被，蓋不出兩樣人: 有其父必有其子，是好是壞，差不了多少。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近朋友一個系統環境 DB 是 SQL Server 2008 R2 (&lt;code&gt;192.168.211.213&lt;/code&gt;)，AP S</summary>
      
    
    
    
    
    <category term="ODBC" scheme="https://rainmakerho.github.io/tags/ODBC/"/>
    
    <category term="8001" scheme="https://rainmakerho.github.io/tags/8001/"/>
    
    <category term="DBNETLIB" scheme="https://rainmakerho.github.io/tags/DBNETLIB/"/>
    
    <category term="ODBC SQL Server Driver" scheme="https://rainmakerho.github.io/tags/ODBC-SQL-Server-Driver/"/>
    
    <category term="SQL Server does not exist or access denied" scheme="https://rainmakerho.github.io/tags/SQL-Server-does-not-exist-or-access-denied/"/>
    
    <category term="OdbcConnection" scheme="https://rainmakerho.github.io/tags/OdbcConnection/"/>
    
  </entry>
  
  <entry>
    <title>Docker 環境無法連到外部IP(getaddrinfo Temporary failure in name resolution, NET::LDAP::Error)</title>
    <link href="https://rainmakerho.github.io/2024/03/21/docker-error-getaddrinfo-Temporary-failure-in-name-resolution/"/>
    <id>https://rainmakerho.github.io/2024/03/21/docker-error-getaddrinfo-Temporary-failure-in-name-resolution/</id>
    <published>2024-03-21T00:44:46.000Z</published>
    <updated>2024-03-21T01:03:01.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>Gitlab 的 Docker 環境中要透過 Webhook 連到外部的 IP，會出現以下的錯誤訊息，</p><blockquote><p>“exception.class”:”NET::LDAP::Error”,<br>“exception.message”:”getaddrinfo: Temporary failure in name resolution”<br>“exception.backtrace”:[“lib&#x2F;gitlab&#x2F;auth&#x2F;ldap&#x2F;adapter.rb:13:in <code>open</code>, …]</p></blockquote><h3 id="問題原因"><a href="#問題原因" class="headerlink" title="問題原因"></a>問題原因</h3><p>看起來在 Docker 中連線被 Block 掉，而 Docker 的 Host VM 是可以正常直接連線到外面的。<br>猜想會是其他的問題嗎?<br>於是想到因為公司的所有 VM 都要裝防毒軟體，<br>請同事先將<strong>ESET 防毒</strong>移除看看。<br>結果一移除後，Docker 的網路就通了。</p><p>有可能是<strong>ESET 防毒</strong>在防火牆的設定問題，<br>就請 MIS 重新安裝並設定後，就 OK 了哦~</p><blockquote><p>一本三字經，讀迂腐了: 不知變通的意思。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;Gitlab 的 Docker 環境中要透過 Webhook 連到外部的 IP，會出現以下的錯誤訊息，&lt;/p&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    
    <category term="LDAP" scheme="https://rainmakerho.github.io/tags/LDAP/"/>
    
    <category term="Docker" scheme="https://rainmakerho.github.io/tags/Docker/"/>
    
    <category term="getaddrinfo" scheme="https://rainmakerho.github.io/tags/getaddrinfo/"/>
    
    <category term="Temporary failure in name resolution" scheme="https://rainmakerho.github.io/tags/Temporary-failure-in-name-resolution/"/>
    
    <category term="ESET" scheme="https://rainmakerho.github.io/tags/ESET/"/>
    
  </entry>
  
  <entry>
    <title>Creating an authentication from appsettings in ASP.NET Core</title>
    <link href="https://rainmakerho.github.io/2024/03/19/dev-local-custom-authentication/"/>
    <id>https://rainmakerho.github.io/2024/03/19/dev-local-custom-authentication/</id>
    <published>2024-03-19T03:18:34.000Z</published>
    <updated>2024-03-19T05:30:21.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近開發的系統，因為要認證要走 SAML SSO ，而且系統又是前後端分離(react, asp.net core)。<br>所以在個人環境開發時，測試程式時，都需要導到 SSO Server 後，再導回來才能進行測試。<br>來來回回的，蠻花時間的，那有沒有辦法不需要每次都去找 SSO 驗證，才能進行測試呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>一開始參考<a href="https://joonasw.net/view/creating-auth-scheme-in-aspnet-core-2">Creating an authentication scheme in ASP.NET Core 2.0</a>這個方式，<br>將使用者的相關<code>Claims</code>記錄到<code>appsettings.json</code>之中，後端有檢查到設定值，就依<code>Claims</code>進行登入。<br>但在測試過程中發現，這種方式在啟用這種驗證時，其他的驗證方式無法同時並用(會導致其他驗證方式失效)。<br>所以就參考 <a href="https://github.com/cotur/abp-api-key-authorization/blob/main/src/Cotur.Abp.ApiKeyAuthorization.AspNetCore/ApiKeys/ApiKeyAuthorizationMiddleware.cs">ApiKeyAuthorizationMiddleware.cs</a> 使用 Middleware 的方式，<br>就可以跟原本的驗證方式並用(不會影響到原本的登入驗證)。以下就來進行實作，</p><h5 id="1-在-appsettings-json-設定要驗證的相關資料"><a href="#1-在-appsettings-json-設定要驗證的相關資料" class="headerlink" title="1.在 appsettings.json 設定要驗證的相關資料"></a>1.在 appsettings.json 設定要驗證的相關資料</h5><p>Session 名稱為 <code>Dev.Local</code>，可設定是否<code>Enable</code>(預設為 true)，也可以改變<code>AuthenticationType</code>(預設為<code>Dev.Local</code>)，如下，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Dev.Local&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Claims&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bbf6ea7e-c072-4e74-b359-4c51b8eb5442&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;NameIdentifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bbf6ea7e-c072-4e74-b359-4c51b8eb5442&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rainmaker@rmtech.com.tw&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preferred_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rainmaker@rmtech.com.tw&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rainmaker@rmtech.com.tw&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Enable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment">//  ,</span></span><br><span class="line">        <span class="comment">//&quot;AuthenticationType&quot;: &quot;Dev.Local&quot;</span></span><br><span class="line">        <span class="comment">//&quot;AuthenticationType&quot;: &quot;Identity.Application&quot;</span></span><br><span class="line">        <span class="comment">//&quot;AuthenticationType&quot;: &quot;whateveryouwant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="2-依-appsettings-json-產生-ClaimsPrincipal"><a href="#2-依-appsettings-json-產生-ClaimsPrincipal" class="headerlink" title="2.依 appsettings.json 產生 ClaimsPrincipal"></a>2.依 appsettings.json 產生 ClaimsPrincipal</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DevAuthenticationDefaults</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> AuthenticationScheme = <span class="string">&quot;Dev.Local&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> ClaimsName = <span class="string">&quot;Claims&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> EnableName = <span class="string">&quot;Enable&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> AuthenticationTypeName = <span class="string">&quot;AuthenticationType&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DevAuthenticationExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClaimsPrincipal <span class="title">GetDevPrincipleOrNull</span>(<span class="params"><span class="keyword">this</span> IConfigurationSection devLocalConfig</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!devLocalConfig.Exists()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> isEnable = Convert.ToBoolean(devLocalConfig.GetSection(DevAuthenticationDefaults.EnableName)?.Value ?? <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> claimsData = devLocalConfig.GetSection(DevAuthenticationDefaults.ClaimsName)?.GetChildren().ToDictionary(x =&gt; x.Key, x =&gt; x.Value);</span><br><span class="line">        <span class="keyword">if</span>(claimsData.Count==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> claims = <span class="keyword">new</span> List&lt;Claim&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> claimsData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> claimType = GetClaimTypeByName(claim.Key);</span><br><span class="line">            claims.Add(<span class="keyword">new</span> Claim(claimType, claim.Value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> authenticationType = devLocalConfig.GetSection(DevAuthenticationDefaults.AuthenticationTypeName)?.Value ?? DevAuthOption.Scheme;</span><br><span class="line">        <span class="keyword">var</span> claimsIdentity = <span class="keyword">new</span> ClaimsIdentity(claims, authenticationType);</span><br><span class="line">        <span class="keyword">var</span> claimsPrincipal = <span class="keyword">new</span> ClaimsPrincipal(claimsIdentity);</span><br><span class="line">        <span class="keyword">return</span> claimsPrincipal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetClaimTypeByName</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> claimType = <span class="keyword">typeof</span>(ClaimTypes).GetField(name)?.GetValue(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">string</span>)(claimType ?? name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-建立-middleware-來設定-User"><a href="#3-建立-middleware-來設定-User" class="headerlink" title="3.建立 middleware 來設定 User"></a>3.建立 middleware 來設定 User</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DevLocalAuthMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DevLocalAuthMiddleware</span>(<span class="params">RequestDelegate next, IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _next = next;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(context.User.Identity.IsAuthenticated)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next(context);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> devLocalConfig = _configuration.GetSection(DevAuthOption.Scheme);</span><br><span class="line">        <span class="keyword">var</span> principal = devLocalConfig.GetDevPrincipleOrNull();</span><br><span class="line">        <span class="keyword">if</span> (principal == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _next(context);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        context.User = principal;</span><br><span class="line">        <span class="keyword">await</span> _next(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-在-app-UseAuthorization-前加入使用-DevLocalAuthMiddleware-這個-middleware"><a href="#4-在-app-UseAuthorization-前加入使用-DevLocalAuthMiddleware-這個-middleware" class="headerlink" title="4.在 app.UseAuthorization(); 前加入使用 DevLocalAuthMiddleware 這個 middleware"></a>4.在 <code>app.UseAuthorization();</code> 前加入使用 DevLocalAuthMiddleware 這個 middleware</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">app.UseMiddleware&lt;DevLocalAuthMiddleware&gt;();</span><br><span class="line"></span><br><span class="line">app.UseAuthorization();</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="ASP-NET-Core-Razor-Page-測試"><a href="#ASP-NET-Core-Razor-Page-測試" class="headerlink" title="ASP.NET Core Razor Page 測試"></a>ASP.NET Core Razor Page 測試</h4><p>在<code>appsettings.json</code>加入需要的內容，並在<code>program.cs</code> 加入<code>app.UseMiddleware&lt;DevLocalAuthMiddleware&gt;();</code>，<br>可以在<code>Index.cshtml.cs</code>中發現<code>User.Identity</code>已是登入狀態。</p><img src="/2024/03/19/dev-local-custom-authentication/01.png" class="" title="User.Identity"><p>但頁面卻沒有顯示登入者的資訊，<br>那是因為預設它會判斷<code>ClaimsIdentity</code>中的<code>AuthenticationType</code>的值要為<code>Identity.Application</code>才會認為有登入。<br>所以可以在<code>appsettings.json</code>中設定<code>AuthenticationType</code>值為<code>Identity.Application</code>，如下，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Dev.Local&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Claims&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bbf6ea7e-c072-4e74-b359-4c51b8eb5442&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;NameIdentifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bbf6ea7e-c072-4e74-b359-4c51b8eb5442&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rainmaker@rmtech.com.tw&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preferred_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rainmaker@rmtech.com.tw&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rainmaker@rmtech.com.tw&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Enable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;AuthenticationType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Identity.Application&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再跑一次程式，UI 就會是登入狀態了。</p><img src="/2024/03/19/dev-local-custom-authentication/02.png" class="" title="Identity.Application"><p>相關程式碼請參考: <a href="https://github.com/rainmakerho/DevLocalAuthentication">DevLocalAuthentication</a><br>如果想要直接使用，也可以直接安裝 <a href="https://www.nuget.org/packages/DevLocalAuthentication">DevLocalAuthentication Nuget 套件</a></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://joonasw.net/view/creating-auth-scheme-in-aspnet-core-2">Creating an authentication scheme in ASP.NET Core 2.0</a><br><a href="https://github.com/rainmakerho/DevLocalAuthentication">DevLocalAuthentication 程式碼</a><br><a href="https://github.com/cotur/abp-api-key-authorization/blob/main/src/Cotur.Abp.ApiKeyAuthorization.AspNetCore/ApiKeys/ApiKeyAuthorizationMiddleware.cs">ApiKeyAuthorizationMiddleware.cs</a></p><blockquote><p>一本、二店、三和氣: 做生意第一要資本;第二地點要適合，門面要修飾;第三要對人和氣，是生意興隆之道。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近開發的系統，因為要認證要走 SAML SSO ，而且系統又是前後端分離(react, asp.net core)。&lt;br&gt;所以在個人環境</summary>
      
    
    
    
    
    <category term="ASP.NET" scheme="https://rainmakerho.github.io/tags/ASP-NET/"/>
    
    <category term="Authentication" scheme="https://rainmakerho.github.io/tags/Authentication/"/>
    
    <category term="appsettings.json" scheme="https://rainmakerho.github.io/tags/appsettings-json/"/>
    
    <category term="Middleware" scheme="https://rainmakerho.github.io/tags/Middleware/"/>
    
    <category term="ClaimsPrincipal" scheme="https://rainmakerho.github.io/tags/ClaimsPrincipal/"/>
    
    <category term="Identity.Application" scheme="https://rainmakerho.github.io/tags/Identity-Application/"/>
    
    <category term="ClaimsIdentity" scheme="https://rainmakerho.github.io/tags/ClaimsIdentity/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Https 使用 ASP.NET Core HTTPS development certificate</title>
    <link href="https://rainmakerho.github.io/2024/03/08/node-https-use-dotnet-dev-certs/"/>
    <id>https://rainmakerho.github.io/2024/03/08/node-https-use-dotnet-dev-certs/</id>
    <published>2024-03-08T09:27:24.000Z</published>
    <updated>2024-03-19T03:15:53.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>同事在開發環境中，使用 ASP.NET Core 開發，走 HTTPS 所以會使用 ASP.NET Core 的自我簽署憑證。<br>使用 React 開發前端 UI，使用 OIDC 跑起來，也需要 TLS 憑證，於是同事又透過 chocolatey 安裝 mkcert 來建立憑證。<br>即然 ASP.NET Core 已經有 TLS 憑證了，在本機跑起來也沒有問題，<br>那 Node.js 是否能用那個憑證呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>要讓 Node.js 使用 ASP.NET Core 的自我簽署憑證，就要先找到含金鑰憑證在那裡。<br>一般會是在 <code>C:\Users\&#123;user帳號&#125;\.aspnet</code> 裡面，可以找看看有沒有<strong>pfx</strong>的檔案。<br>如果沒找到就重新再建立一個(新的憑證要放到憑證-本機電腦-受信任的根憑證授權單位之中)，<br>可以選擇需要的是 <code>pfx</code> or <code>PEM</code> 檔，並要記得密碼。</p><p>確定 dotnet web 程式跑在 Browser 上沒問題，又有需要的 pfx or pem<br>，就可以在 Node.js 程式中設定要使用的 TLS 憑證，如下，<br>以下我使用 pfx 檔案，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="attr">pfx</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./你的憑證檔.pfx&quot;</span>),</span><br><span class="line">    <span class="attr">passphrase</span>: <span class="string">&quot;你的密碼&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = https</span><br><span class="line">    .<span class="title function_">createServer</span>(options, <span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;index.html&quot;</span>, <span class="keyword">function</span> (<span class="params">error, data</span>) &#123;</span><br><span class="line">            response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span> &#125;);</span><br><span class="line">            response.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">listen</span>(<span class="number">12345</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server running&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>從 Browser 中，可以發現憑證是使用<strong>ASP.NET Core 的自我簽署憑證</strong>，如下，</p><img src="/2024/03/08/node-https-use-dotnet-dev-certs/01.png" class="" title="ASP.NET Core 的自我簽署憑證"><ul><li>註: 當 ASP.NET Core 的自我簽署憑證已在本機電腦-受信任的根憑證授權單位之中，本機 IIS 也可以直接選到它來使用哦。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/zh-tw/dotnet/core/tools/dotnet-dev-certs">dotnet dev-certs</a><br><a href="https://learn.microsoft.com/zh-tw/dotnet/core/additional-tools/self-signed-certificates-guide">使用 .NET CLI 產生自我簽署憑證</a><br><a href="https://rainmakerho.github.io/2022/03/22/visual-studio-adding-certificate-to-trusted-root-failed/">Microsoft Visual Studio 無法將憑證新增至受信任的根憑證存放區 - 無法信任憑證</a></p><blockquote><p>一手掩盡天下耳目: 因做錯了事，希望能瞞騙天下的人，是一種自欺欺人的行為。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;同事在開發環境中，使用 ASP.NET Core 開發，走 HTTPS 所以會使用 ASP.NET Core 的自我簽署憑證。&lt;br&gt;使用 </summary>
      
    
    
    
    
    <category term="Node.js" scheme="https://rainmakerho.github.io/tags/Node-js/"/>
    
    <category term="Https" scheme="https://rainmakerho.github.io/tags/Https/"/>
    
    <category term="dotnet" scheme="https://rainmakerho.github.io/tags/dotnet/"/>
    
    <category term="dev-certs" scheme="https://rainmakerho.github.io/tags/dev-certs/"/>
    
  </entry>
  
  <entry>
    <title>MissingFieldException Microsoft.ML.MLContext.OneDalDispatchingEnabled</title>
    <link href="https://rainmakerho.github.io/2024/03/08/ml-missing-field-exception-OneDalDispatchingEnabled/"/>
    <id>https://rainmakerho.github.io/2024/03/08/ml-missing-field-exception-OneDalDispatchingEnabled/</id>
    <published>2024-03-08T01:36:04.000Z</published>
    <updated>2024-03-19T03:14:01.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近把 ML.NET 從 1.7 升到 3.0.1 結果在跑 <code>EstimatorChain.Fit</code> Method 時，<br>出現了 <strong>MissingFieldException</strong> ‘Microsoft.ML.MLContext.OneDalDispatchingEnabled’ 的錯誤</p><blockquote><p>System.MissingFieldException<br>HResult&#x3D;0x80131511<br>Message&#x3D;找不到欄位: ‘Microsoft.ML.MLContext.OneDalDispatchingEnabled’。<br>Source&#x3D;Microsoft.ML.Mkl.Components<br>StackTrace:<br>於 Microsoft.ML.Trainers.OlsTrainer.TrainCore(IChannel ch, Factory cursorFactory, Int32 featureCount)<br>於 Microsoft.ML.Trainers.OlsTrainer.TrainModelCore(TrainContext context)<br>於 Microsoft.ML.Trainers.TrainerEstimatorBase<code>2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)  於 Microsoft.ML.Data.EstimatorChain</code>1.Fit(IDataView input)</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>查看 <a href="https://github.com/dotnet/machinelearning/blob/main/src/Microsoft.ML.Data/MLContext.cs">MLContext.cs</a> 程式碼中會載入<code>Microsoft.ML.OneDal</code>這個組件，所以就直接噴那個 Exception。</p><p>所以…就在專案中，將<code>Microsoft.ML.OneDal</code>套件加進來就可以了哦~</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://devblogs.microsoft.com/dotnet/accelerate-ml-net-training-with-intel-onedal/">Accelerate ML.NET training with Intel oneDAL</a></p><blockquote><p>一正避三邪: 一個人的行為正直，就不怕一切的邪氣，因為邪不勝正。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近把 ML.NET 從 1.7 升到 3.0.1 結果在跑 &lt;code&gt;EstimatorChain.Fit&lt;/code&gt; Method </summary>
      
    
    
    
    
    <category term="ML.NET" scheme="https://rainmakerho.github.io/tags/ML-NET/"/>
    
    <category term="Microsoft.ML" scheme="https://rainmakerho.github.io/tags/Microsoft-ML/"/>
    
    <category term="OneDalDispatchingEnabled" scheme="https://rainmakerho.github.io/tags/OneDalDispatchingEnabled/"/>
    
    <category term="MissingFieldException" scheme="https://rainmakerho.github.io/tags/MissingFieldException/"/>
    
  </entry>
  
  <entry>
    <title>ABP DbMigrationService.MigrateAsync 做那些事?</title>
    <link href="https://rainmakerho.github.io/2024/03/05/abp-migrateasync/"/>
    <id>https://rainmakerho.github.io/2024/03/05/abp-migrateasync/</id>
    <published>2024-03-05T02:52:25.000Z</published>
    <updated>2024-03-05T05:05:09.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>當透過 ABP CLI 建立專案後，會透過執行方案中的 <code>DbMigrator</code> 來建立資料庫及資料表。<br>那執行 <code>DbMigrator.EXE</code> 會做那些事呢?</p><h3 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h3><p><code>DbMigrator.EXE</code> 會執行 Domain 專案中的 <code>DbMigrationService.MigrateAsync</code>，<br>它會做以下幾件事，</p><p>1.呼叫 <code>AddInitialMigrationIfNotExist</code> 檢查初始的 DB Migration 是否有建立出來<br>　　 1.1.判斷是否有 <code>EntityFrameworkCoreProject</code> 目錄<br>　　 1.2.如果 <code>EntityFrameworkCoreProject</code> 目錄存在，判斷是否有 <code>Migrations</code> 子目錄，如果沒有，就執行 <code>abp create-migration-and-run-migrator</code> 建立初始的 Migration(通常不會發生，因為方案一建立好後，會一併建立初始 Migration)</p><p>2.如果有執行建立初始 Migration(<code>AddInitialMigrationIfNotExist()</code>回傳值為<code>true</code>)，就離開 <code>MigrateAsync</code> Method</p><p>3.執行 host(Tenant 為 null) 的 DB Migration(<code>MigrateDatabaseSchemaAsync</code>)，相當於執行 EF 的 database update(<code>dotnet ef database update</code>)</p><p>4.建立 host(Tenant 為 null) 的 Seed Data(<code>SeedDataAsync</code>)，會掃方案中有實作<code>IDataSeedContributor</code>類別，然後執行它的<code>SeedAsync</code></p><p>在 DomainModule 的 <code>ConfigureService</code> 加入設定 <code>AbpDataSeedOptions</code> 程式碼，<br>可以從 <code>options.Contributors</code> 查看有多少的 DataSeedContributor 要執行，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configure&lt;AbpDataSeedOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dataSeedContributors = options.Contributors;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5.檢查是否有其他的 Tenant ，並設定跑在別的 DB 上面，有就重覆執行 DB Migration 及 Seed Data</p><h4 id="Q-可以讓系統自動執行-DbMigrationService-MigrateAsync-嗎"><a href="#Q-可以讓系統自動執行-DbMigrationService-MigrateAsync-嗎" class="headerlink" title="Q.可以讓系統自動執行 DbMigrationService.MigrateAsync 嗎?"></a>Q.可以讓系統自動執行 DbMigrationService.MigrateAsync 嗎?</h4><p>可以在<code>Program.cs</code>中的<code>await app.InitializeApplicationAsync();</code>後，<code>await app.RunAsync();</code>前，<br>加入執行 <code>DbMigrationService.MigrateAsync</code> 就可以了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">static</span> Task&lt;<span class="built_in">int</span>&gt; <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> app.InitializeApplicationAsync();</span><br><span class="line">        <span class="comment">//auto migration at runtime</span></span><br><span class="line">        <span class="keyword">await</span> app.Services</span><br><span class="line">            .GetRequiredService&lt;BookStoreDbMigrationService&gt;()</span><br><span class="line">            .MigrateAsync();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> app.RunAsync();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2023/03/08/abp-dataseedcontributor-duplicate/">ABP 系統建立的 DataSeedContributor 會跑 2 次 SeedAsync，導致發生 DB duplicate key 的錯誤?</a><br><a href="https://learn.microsoft.com/zh-tw/ef/core/managing-schemas/migrations/applying?tabs=dotnet-core-cli#apply-migrations-at-runtime">EF 在執行階段套用移轉</a></p><blockquote><p>一行服一行，煙膏怕紅糖 : 萬物相克，一物克一物。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;當透過 ABP CLI 建立專案後，會透過執行方案中的 &lt;code&gt;DbMigrator&lt;/code&gt; 來建立資料庫及資料表。&lt;br&gt;那執行</summary>
      
    
    
    
    
    <category term="ABP" scheme="https://rainmakerho.github.io/tags/ABP/"/>
    
    <category term="MigrateAsync" scheme="https://rainmakerho.github.io/tags/MigrateAsync/"/>
    
    <category term="DbMigrationService" scheme="https://rainmakerho.github.io/tags/DbMigrationService/"/>
    
    <category term="apply-migrations-at-runtime" scheme="https://rainmakerho.github.io/tags/apply-migrations-at-runtime/"/>
    
  </entry>
  
  <entry>
    <title>Molecular Weight Calculator(計算化學運算式的分子量)</title>
    <link href="https://rainmakerho.github.io/2024/03/01/molecular-weight-calculator/"/>
    <id>https://rainmakerho.github.io/2024/03/01/molecular-weight-calculator/</id>
    <published>2024-03-01T07:11:39.000Z</published>
    <updated>2024-03-04T01:56:48.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近有個需求要將化學運算式字串算出它的分子量是多少，例如，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CaCO3 =&gt; 100.0869</span><br><span class="line">CO2 =&gt; 44.0095</span><br><span class="line">CO2 / CaCO3 =&gt; 0.4397</span><br><span class="line">2 * CO2/C2H2 =&gt; 3.380499038</span><br><span class="line">C2H2 +2.5 * O2 =&gt; 106.03428</span><br></pre></td></tr></table></figure><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>為什麼 <strong>CaCO3</strong> 的分子量是 100.0869 呢?<br>可以從<a href="https://www.calculatorsoup.com/calculators/chemistry/molecular-weight.php">Molecular Weight Calculator</a>發現，<br>它是<code>Calcium(40.078)</code> + <code>Carbon(12.0107)</code> + <code>Oxygen(15.9994)*3</code>，<br>所以總共分子量是 <code>40.078 + 12.0107 + 47.9982</code> &#x3D; <code>100.0869</code></p><p>處理拆分成四步</p><ol><li>找出運算式中的變數(CO2, CaCO3 …)</li><li>計算出這些變數的值(加總)</li><li>指定將運算式中變數的值</li><li>計算出運算式的結果</li></ol><p>1.找出運算式中的變數，可透過<a href="https://github.com/ncalc/ncalc">ncalc</a>的<code>Expression.Compile</code>來幫忙，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ec = Expression.Compile(expression, <span class="literal">false</span>);</span><br><span class="line">ParameterExtractionVisitor visitor = <span class="keyword">new</span> ParameterExtractionVisitor();</span><br><span class="line">ec.Accept(visitor);</span><br><span class="line"><span class="keyword">var</span> extractedParameters = visitor.Parameters;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ParameterExtractionVisitor</span> : <span class="title">LogicalExpressionVisitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> HashSet&lt;<span class="built_in">string</span>&gt; Parameters = <span class="keyword">new</span> HashSet&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">NCalc.Domain.Identifier function</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Parameter - add to list</span></span><br><span class="line">        Parameters.Add(function.Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">NCalc.Domain.UnaryExpression expression</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        expression.Expression.Accept(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">NCalc.Domain.BinaryExpression expression</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Visit left and right</span></span><br><span class="line">        expression.LeftExpression.Accept(<span class="keyword">this</span>);</span><br><span class="line">        expression.RightExpression.Accept(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">NCalc.Domain.TernaryExpression expression</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Visit left, right and middle</span></span><br><span class="line">        expression.LeftExpression.Accept(<span class="keyword">this</span>);</span><br><span class="line">        expression.RightExpression.Accept(<span class="keyword">this</span>);</span><br><span class="line">        expression.MiddleExpression.Accept(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">LogicalExpression expression</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ValueExpression expression</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">NCalc.Domain.Function function</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> expression <span class="keyword">in</span> function.Expressions)</span><br><span class="line">        &#123;</span><br><span class="line">            expression.Accept(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.計算出這些變數的值(加總)，可以透過正則表達式匹配元素及其數量，並計算出分子量總和</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">CalcMolecularFormulaMass</span>(<span class="params"><span class="built_in">string</span> formula</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用正則表達式匹配元素及其數量</span></span><br><span class="line">    <span class="built_in">string</span> pattern = <span class="string">@&quot;([A-Z][a-z]*)(\d*)&quot;</span>;</span><br><span class="line">    MatchCollection matches = Regex.Matches(formula, pattern);</span><br><span class="line">    <span class="built_in">double</span> totalFormulaWeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matches)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> element = match.Groups[<span class="number">1</span>].Value;</span><br><span class="line">        <span class="built_in">int</span> count = match.Groups[<span class="number">2</span>].Value == <span class="string">&quot;&quot;</span> ? <span class="number">1</span> : <span class="built_in">int</span>.Parse(match.Groups[<span class="number">2</span>].Value);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> atomicWeight = _MolecularWeights[element];</span><br><span class="line">            <span class="keyword">var</span> formulaWeight = atomicWeight * count;</span><br><span class="line">            totalFormulaWeight += formulaWeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(KeyNotFoundException)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KeyNotFoundException(<span class="string">$&quot;&#x27;<span class="subst">&#123;element&#125;</span>&#x27; was not present in the Periodic Table&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalFormulaWeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後建立元素分子量對應表，讓<code>CalcMolecularFormulaMass</code>可以取到每個元素的分子量，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IReadOnlyDictionary&lt;<span class="built_in">string</span>, <span class="built_in">double</span>&gt; _MolecularWeights</span><br><span class="line">    = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">double</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &#123;<span class="string">&quot;H&quot;</span>, <span class="number">1.0080</span>&#125;, <span class="comment">//Hydrogen</span></span><br><span class="line">            &#123;<span class="string">&quot;He&quot;</span>, <span class="number">4.0026</span>&#125;, <span class="comment">//Helium</span></span><br><span class="line">            &#123;<span class="string">&quot;Li&quot;</span>, <span class="number">6.94</span>&#125;, <span class="comment">//Lithium</span></span><br><span class="line">            &#123;<span class="string">&quot;Be&quot;</span>, <span class="number">9.0122</span>&#125;, <span class="comment">//Beryllium</span></span><br><span class="line">            &#123;<span class="string">&quot;B&quot;</span>, <span class="number">10.81</span>&#125;, <span class="comment">//Boron</span></span><br><span class="line">            &#123;<span class="string">&quot;C&quot;</span>, <span class="number">12.011</span>&#125;, <span class="comment">//Carbon</span></span><br><span class="line">            &#123;<span class="string">&quot;N&quot;</span>, <span class="number">14.007</span>&#125;, <span class="comment">//Nitrogen</span></span><br><span class="line">            &#123;<span class="string">&quot;O&quot;</span>, <span class="number">15.999</span>&#125;, <span class="comment">//Oxygen</span></span><br><span class="line">            &#123;<span class="string">&quot;F&quot;</span>, <span class="number">18.998</span>&#125;, <span class="comment">//Fluorine</span></span><br><span class="line">            &#123;<span class="string">&quot;Ne&quot;</span>, <span class="number">20.180</span>&#125;, <span class="comment">//Neon</span></span><br><span class="line">            &#123;<span class="string">&quot;Na&quot;</span>, <span class="number">22.990</span>&#125;, <span class="comment">//Sodium</span></span><br><span class="line">            &#123;<span class="string">&quot;Mg&quot;</span>, <span class="number">24.305</span>&#125;, <span class="comment">//Magnesium</span></span><br><span class="line">            &#123;<span class="string">&quot;Al&quot;</span>, <span class="number">26.982</span>&#125;, <span class="comment">//Aluminum</span></span><br><span class="line">            &#123;<span class="string">&quot;Si&quot;</span>, <span class="number">28.0855</span>&#125;, <span class="comment">//Silicon</span></span><br><span class="line">            &#123;<span class="string">&quot;P&quot;</span>, <span class="number">30.974</span>&#125;, <span class="comment">//Phosphorus</span></span><br><span class="line">            &#123;<span class="string">&quot;S&quot;</span>, <span class="number">32.06</span>&#125;, <span class="comment">//Sulfur</span></span><br><span class="line">            &#123;<span class="string">&quot;Cl&quot;</span>, <span class="number">35.45</span>&#125;, <span class="comment">//Chlorine</span></span><br><span class="line">            &#123;<span class="string">&quot;Ar&quot;</span>, <span class="number">39.95</span>&#125;, <span class="comment">//Argon</span></span><br><span class="line">            &#123;<span class="string">&quot;K&quot;</span>, <span class="number">39.098</span>&#125;, <span class="comment">//Potassium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ca&quot;</span>, <span class="number">40.078</span>&#125;, <span class="comment">//Calcium</span></span><br><span class="line">            &#123;<span class="string">&quot;Sc&quot;</span>, <span class="number">44.956</span>&#125;, <span class="comment">//Scandium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ti&quot;</span>, <span class="number">47.867</span>&#125;, <span class="comment">//Titanium</span></span><br><span class="line">            &#123;<span class="string">&quot;V&quot;</span>, <span class="number">50.942</span>&#125;, <span class="comment">//Vanadium</span></span><br><span class="line">            &#123;<span class="string">&quot;Cr&quot;</span>, <span class="number">51.996</span>&#125;, <span class="comment">//Chromium</span></span><br><span class="line">            &#123;<span class="string">&quot;Mn&quot;</span>, <span class="number">54.938</span>&#125;, <span class="comment">//Manganese</span></span><br><span class="line">            &#123;<span class="string">&quot;Fe&quot;</span>, <span class="number">55.845</span>&#125;, <span class="comment">//Iron</span></span><br><span class="line">            &#123;<span class="string">&quot;Co&quot;</span>, <span class="number">58.933</span>&#125;, <span class="comment">//Cobalt</span></span><br><span class="line">            &#123;<span class="string">&quot;Ni&quot;</span>, <span class="number">58.693</span>&#125;, <span class="comment">//Nickel</span></span><br><span class="line">            &#123;<span class="string">&quot;Cu&quot;</span>, <span class="number">63.546</span>&#125;, <span class="comment">//Copper</span></span><br><span class="line">            &#123;<span class="string">&quot;Zn&quot;</span>, <span class="number">65.38</span>&#125;, <span class="comment">//Zinc</span></span><br><span class="line">            &#123;<span class="string">&quot;Ga&quot;</span>, <span class="number">69.723</span>&#125;, <span class="comment">//Gallium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ge&quot;</span>, <span class="number">72.630</span>&#125;, <span class="comment">//Germanium</span></span><br><span class="line">            &#123;<span class="string">&quot;As&quot;</span>, <span class="number">74.922</span>&#125;, <span class="comment">//Arsenic</span></span><br><span class="line">            &#123;<span class="string">&quot;Se&quot;</span>, <span class="number">78.971</span>&#125;, <span class="comment">//Selenium</span></span><br><span class="line">            &#123;<span class="string">&quot;Br&quot;</span>, <span class="number">79.904</span>&#125;, <span class="comment">//Bromine</span></span><br><span class="line">            &#123;<span class="string">&quot;Kr&quot;</span>, <span class="number">83.798</span>&#125;, <span class="comment">//Krypton</span></span><br><span class="line">            &#123;<span class="string">&quot;Rb&quot;</span>, <span class="number">85.468</span>&#125;, <span class="comment">//Rubidium</span></span><br><span class="line">            &#123;<span class="string">&quot;Sr&quot;</span>, <span class="number">87.62</span>&#125;, <span class="comment">//Strontium</span></span><br><span class="line">            &#123;<span class="string">&quot;Y&quot;</span>, <span class="number">88.906</span>&#125;, <span class="comment">//Yttrium</span></span><br><span class="line">            &#123;<span class="string">&quot;Zr&quot;</span>, <span class="number">91.224</span>&#125;, <span class="comment">//Zirconium</span></span><br><span class="line">            &#123;<span class="string">&quot;Nb&quot;</span>, <span class="number">92.906</span>&#125;, <span class="comment">//Niobium</span></span><br><span class="line">            &#123;<span class="string">&quot;Mo&quot;</span>, <span class="number">95.95</span>&#125;, <span class="comment">//Molybdenum</span></span><br><span class="line">            &#123;<span class="string">&quot;Tc&quot;</span>, <span class="number">97</span>&#125;, <span class="comment">//Technetium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ru&quot;</span>, <span class="number">101.07</span>&#125;, <span class="comment">//Ruthenium</span></span><br><span class="line">            &#123;<span class="string">&quot;Rh&quot;</span>, <span class="number">102.91</span>&#125;, <span class="comment">//Rhodium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pd&quot;</span>, <span class="number">106.42</span>&#125;, <span class="comment">//Palladium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ag&quot;</span>, <span class="number">107.87</span>&#125;, <span class="comment">//Silver</span></span><br><span class="line">            &#123;<span class="string">&quot;Cd&quot;</span>, <span class="number">112.41</span>&#125;, <span class="comment">//Cadmium</span></span><br><span class="line">            &#123;<span class="string">&quot;In&quot;</span>, <span class="number">114.82</span>&#125;, <span class="comment">//Indium</span></span><br><span class="line">            &#123;<span class="string">&quot;Sn&quot;</span>, <span class="number">118.710</span>&#125;, <span class="comment">//Tin</span></span><br><span class="line">            &#123;<span class="string">&quot;Sb&quot;</span>, <span class="number">121.760</span>&#125;, <span class="comment">//Antimony</span></span><br><span class="line">            &#123;<span class="string">&quot;Te&quot;</span>, <span class="number">127.60</span>&#125;, <span class="comment">//Tellurium</span></span><br><span class="line">            &#123;<span class="string">&quot;I&quot;</span>, <span class="number">126.90</span>&#125;, <span class="comment">//Iodine</span></span><br><span class="line">            &#123;<span class="string">&quot;Xe&quot;</span>, <span class="number">131.29</span>&#125;, <span class="comment">//Xenon</span></span><br><span class="line">            &#123;<span class="string">&quot;Cs&quot;</span>, <span class="number">132.91</span>&#125;, <span class="comment">//Caesium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ba&quot;</span>, <span class="number">137.33</span>&#125;, <span class="comment">//Barium</span></span><br><span class="line">            &#123;<span class="string">&quot;La&quot;</span>, <span class="number">138.91</span>&#125;, <span class="comment">//Lanthanum</span></span><br><span class="line">            &#123;<span class="string">&quot;Ce&quot;</span>, <span class="number">140.12</span>&#125;, <span class="comment">//Cerium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pr&quot;</span>, <span class="number">140.91</span>&#125;, <span class="comment">//Praseodymium</span></span><br><span class="line">            &#123;<span class="string">&quot;Nd&quot;</span>, <span class="number">144.24</span>&#125;, <span class="comment">//Neodymium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pm&quot;</span>, <span class="number">145</span>&#125;, <span class="comment">//Promethium</span></span><br><span class="line">            &#123;<span class="string">&quot;Sm&quot;</span>, <span class="number">150.36</span>&#125;, <span class="comment">//Samarium</span></span><br><span class="line">            &#123;<span class="string">&quot;Eu&quot;</span>, <span class="number">151.96</span>&#125;, <span class="comment">//Europium</span></span><br><span class="line">            &#123;<span class="string">&quot;Gd&quot;</span>, <span class="number">157.25</span>&#125;, <span class="comment">//Gadolinium</span></span><br><span class="line">            &#123;<span class="string">&quot;Tb&quot;</span>, <span class="number">158.93</span>&#125;, <span class="comment">//Terbium</span></span><br><span class="line">            &#123;<span class="string">&quot;Dy&quot;</span>, <span class="number">162.50</span>&#125;, <span class="comment">//Dysprosium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ho&quot;</span>, <span class="number">164.93</span>&#125;, <span class="comment">//Holmium</span></span><br><span class="line">            &#123;<span class="string">&quot;Er&quot;</span>, <span class="number">167.26</span>&#125;, <span class="comment">//Erbium</span></span><br><span class="line">            &#123;<span class="string">&quot;Tm&quot;</span>, <span class="number">168.93</span>&#125;, <span class="comment">//Thulium</span></span><br><span class="line">            &#123;<span class="string">&quot;Yb&quot;</span>, <span class="number">173.05</span>&#125;, <span class="comment">//Ytterbium</span></span><br><span class="line">            &#123;<span class="string">&quot;Lu&quot;</span>, <span class="number">174.97</span>&#125;, <span class="comment">//Lutetium</span></span><br><span class="line">            &#123;<span class="string">&quot;Hf&quot;</span>, <span class="number">178.49</span>&#125;, <span class="comment">//Hafnium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ta&quot;</span>, <span class="number">180.95</span>&#125;, <span class="comment">//Tantalum</span></span><br><span class="line">            &#123;<span class="string">&quot;W&quot;</span>, <span class="number">183.84</span>&#125;, <span class="comment">//Tungsten</span></span><br><span class="line">            &#123;<span class="string">&quot;Re&quot;</span>, <span class="number">186.21</span>&#125;, <span class="comment">//Rhenium</span></span><br><span class="line">            &#123;<span class="string">&quot;Os&quot;</span>, <span class="number">190.23</span>&#125;, <span class="comment">//Osmium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ir&quot;</span>, <span class="number">192.22</span>&#125;, <span class="comment">//Iridium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pt&quot;</span>, <span class="number">195.08</span>&#125;, <span class="comment">//Platinum</span></span><br><span class="line">            &#123;<span class="string">&quot;Au&quot;</span>, <span class="number">196.97</span>&#125;, <span class="comment">//Gold</span></span><br><span class="line">            &#123;<span class="string">&quot;Hg&quot;</span>, <span class="number">200.59</span>&#125;, <span class="comment">//Mercury</span></span><br><span class="line">            &#123;<span class="string">&quot;Tl&quot;</span>, <span class="number">204.38</span>&#125;, <span class="comment">//Thallium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pb&quot;</span>, <span class="number">207.2</span>&#125;, <span class="comment">//Lead</span></span><br><span class="line">            &#123;<span class="string">&quot;Bi&quot;</span>, <span class="number">208.98</span>&#125;, <span class="comment">//Bismuth</span></span><br><span class="line">            &#123;<span class="string">&quot;Po&quot;</span>, <span class="number">209</span>&#125;, <span class="comment">//Polonium</span></span><br><span class="line">            &#123;<span class="string">&quot;At&quot;</span>, <span class="number">210</span>&#125;, <span class="comment">//Astatine</span></span><br><span class="line">            &#123;<span class="string">&quot;Rn&quot;</span>, <span class="number">222</span>&#125;, <span class="comment">//Radon</span></span><br><span class="line">            &#123;<span class="string">&quot;Fr&quot;</span>, <span class="number">223</span>&#125;, <span class="comment">//Francium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ra&quot;</span>, <span class="number">226</span>&#125;, <span class="comment">//Radium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ac&quot;</span>, <span class="number">227</span>&#125;, <span class="comment">//Actinium</span></span><br><span class="line">            &#123;<span class="string">&quot;Th&quot;</span>, <span class="number">232.04</span>&#125;, <span class="comment">//Thorium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pa&quot;</span>, <span class="number">231.04</span>&#125;, <span class="comment">//Protactinium</span></span><br><span class="line">            &#123;<span class="string">&quot;U&quot;</span>, <span class="number">238.03</span>&#125;, <span class="comment">//Uranium</span></span><br><span class="line">            &#123;<span class="string">&quot;Np&quot;</span>, <span class="number">237</span>&#125;, <span class="comment">//Neptunium</span></span><br><span class="line">            &#123;<span class="string">&quot;Pu&quot;</span>, <span class="number">244</span>&#125;, <span class="comment">//Plutonium</span></span><br><span class="line">            &#123;<span class="string">&quot;Am&quot;</span>, <span class="number">243</span>&#125;, <span class="comment">//Americium</span></span><br><span class="line">            &#123;<span class="string">&quot;Cm&quot;</span>, <span class="number">247</span>&#125;, <span class="comment">//Curium</span></span><br><span class="line">            &#123;<span class="string">&quot;Bk&quot;</span>, <span class="number">247</span>&#125;, <span class="comment">//Berkelium</span></span><br><span class="line">            &#123;<span class="string">&quot;Cf&quot;</span>, <span class="number">251</span>&#125;, <span class="comment">//Californium</span></span><br><span class="line">            &#123;<span class="string">&quot;Es&quot;</span>, <span class="number">252</span>&#125;, <span class="comment">//Einsteinium</span></span><br><span class="line">            &#123;<span class="string">&quot;Fm&quot;</span>, <span class="number">257</span>&#125;, <span class="comment">//Fermium</span></span><br><span class="line">            &#123;<span class="string">&quot;Md&quot;</span>, <span class="number">258</span>&#125;, <span class="comment">//Mendelevium</span></span><br><span class="line">            &#123;<span class="string">&quot;No&quot;</span>, <span class="number">259</span>&#125;, <span class="comment">//Nobelium</span></span><br><span class="line">            &#123;<span class="string">&quot;Lr&quot;</span>, <span class="number">262</span>&#125;, <span class="comment">//Lawrencium</span></span><br><span class="line">            &#123;<span class="string">&quot;Rf&quot;</span>, <span class="number">267</span>&#125;, <span class="comment">//Rutherfordium</span></span><br><span class="line">            &#123;<span class="string">&quot;Db&quot;</span>, <span class="number">268</span>&#125;, <span class="comment">//Dubnium</span></span><br><span class="line">            &#123;<span class="string">&quot;Sg&quot;</span>, <span class="number">269</span>&#125;, <span class="comment">//Seaborgium</span></span><br><span class="line">            &#123;<span class="string">&quot;Bh&quot;</span>, <span class="number">270</span>&#125;, <span class="comment">//Bohrium</span></span><br><span class="line">            &#123;<span class="string">&quot;Hs&quot;</span>, <span class="number">269</span>&#125;, <span class="comment">//Hassium</span></span><br><span class="line">            &#123;<span class="string">&quot;Mt&quot;</span>, <span class="number">277</span>&#125;, <span class="comment">//Meitnerium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ds&quot;</span>, <span class="number">281</span>&#125;, <span class="comment">//Darmstadtium</span></span><br><span class="line">            &#123;<span class="string">&quot;Rg&quot;</span>, <span class="number">282</span>&#125;, <span class="comment">//Roentgenium</span></span><br><span class="line">            &#123;<span class="string">&quot;Cn&quot;</span>, <span class="number">285</span>&#125;, <span class="comment">//Copernicium</span></span><br><span class="line">            &#123;<span class="string">&quot;Nh&quot;</span>, <span class="number">286</span>&#125;, <span class="comment">//Nihonium</span></span><br><span class="line">            &#123;<span class="string">&quot;Fl&quot;</span>, <span class="number">290</span>&#125;, <span class="comment">//Flerovium</span></span><br><span class="line">            &#123;<span class="string">&quot;Mc&quot;</span>, <span class="number">290</span>&#125;, <span class="comment">//Moscovium</span></span><br><span class="line">            &#123;<span class="string">&quot;Lv&quot;</span>, <span class="number">293</span>&#125;, <span class="comment">//Livermorium</span></span><br><span class="line">            &#123;<span class="string">&quot;Ts&quot;</span>, <span class="number">294</span>&#125;, <span class="comment">//Tennessine</span></span><br><span class="line">            &#123;<span class="string">&quot;Og&quot;</span>, <span class="number">294</span>&#125;, <span class="comment">//Oganesson</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>3.指定將運算式中變數的值及 4.計算出運算式的結果，可以再透過<a href="https://github.com/ncalc/ncalc">ncalc</a>的<code>Expression</code>來幫忙，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> Expression(ec);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> param <span class="keyword">in</span> extractedParameters)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> paramValue = CalcMolecularFormulaMass(param);</span><br><span class="line">    e.Parameters[param] = paramValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = e.Evaluate();</span><br></pre></td></tr></table></figure><p>以上的內容筆者已放到 Nuget 之中，可以安裝<strong>MolecularWeightCalculator</strong>套件，直接使用即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> molecularMath = <span class="keyword">new</span> MolecularMath();</span><br><span class="line"><span class="built_in">string</span> exp1 = <span class="string">&quot;CO2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> exp1Result = molecularMath.ComputeMass(exp1);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;exp1&#125;</span>=&gt;<span class="subst">&#123;exp1Result&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//CO2=&gt;44.009</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> exp2 = <span class="string">&quot;CaCO3&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> exp2Result = molecularMath.ComputeMass(exp2);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;exp2&#125;</span>=&gt;<span class="subst">&#123;exp2Result&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//CaCO3=&gt;100.086</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> exp3 = <span class="string">&quot;CO2 / CaCO3&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> exp3Result = molecularMath.ComputeMass(exp3);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;exp3&#125;</span>=&gt;<span class="subst">&#123;exp3Result&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//CO2 / CaCO3=&gt;0.43971184781088263</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> exp4 = <span class="string">&quot;C2H2 +2.5 * O2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> exp4Result = molecularMath.ComputeMass(exp4);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;exp4&#125;</span>=&gt;<span class="subst">&#123;exp4Result&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//C2H2 +2.5 * O2=&gt;106.033</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> exp5 = <span class="string">&quot;2*CO2/C2H2&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> exp5Result = molecularMath.ComputeMass(exp5);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;exp5&#125;</span>=&gt;<span class="subst">&#123;exp5Result&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//2*CO2/C2H2=&gt;3.3803671556955224</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> exp6 = <span class="string">&quot;1*2*3*4&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> exp6Result = molecularMath.ComputeMass(exp6);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;exp6&#125;</span>=&gt;<span class="subst">&#123;exp6Result&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//1*2*3*4=&gt;24</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> exp7 = <span class="string">&quot;CaCO3 * A2 + B3&quot;</span>;</span><br><span class="line"><span class="comment">//var exp7Result = molecularMath.ComputeMass(exp7);</span></span><br><span class="line"><span class="comment">//Console.WriteLine($&quot;&#123;exp7&#125;=&gt;&#123;exp7Result&#125;&quot;);</span></span><br><span class="line"><span class="comment">//KeyNotFoundException: &#x27;A&#x27; was not present in the Periodic Table</span></span><br></pre></td></tr></table></figure><p>程式碼放請參考<a href="https://github.com/rainmakerho/MolecularWeightCalculator">MolecularWeightCalculator Source</a></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/rainmakerho/MolecularWeightCalculator">MolecularWeightCalculator Source</a><br><a href="https://www.calculatorsoup.com/calculators/chemistry/molecular-weight.php">Molecular Weight Calculator</a><br><a href="https://github.com/ncalc/ncalc">ncalc</a><br><a href="https://iupac.org/wp-content/uploads/2022/05/IUPAC_Periodic_Table_150-04May22.jpg">IUPAC_Periodic_Table_150-04May22.jpg</a></p><blockquote><p>一尺青天，蓋一尺土: 每個人都有自己的天地，每個人都有自己的生活方式</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近有個需求要將化學運算式字串算出它的分子量是多少，例如，&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="molecular" scheme="https://rainmakerho.github.io/tags/molecular/"/>
    
    <category term="chemical" scheme="https://rainmakerho.github.io/tags/chemical/"/>
    
    <category term="formulas" scheme="https://rainmakerho.github.io/tags/formulas/"/>
    
  </entry>
  
  <entry>
    <title>Checkmarx Unsafe Reflection</title>
    <link href="https://rainmakerho.github.io/2024/03/01/checkmarx-unsafe-reflection-2/"/>
    <id>https://rainmakerho.github.io/2024/03/01/checkmarx-unsafe-reflection-2/</id>
    <published>2024-03-01T06:44:18.000Z</published>
    <updated>2024-03-01T07:06:50.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前篇 <a href="https://rainmakerho.github.io/2023/02/17/checkmarx-unsafe-reflection/">Checkmarx Unsafe_Reflection</a> 是依 <strong>if + 白名單 + Contains</strong> 的方式來處理，<br>但 Checkmarx 更版後，就沒辦法成功了，怎麼辦呢?</p><ul><li>環境: Checkmarx 版本：V 9.5.5.1007 HF14</li><li>類別：Unsafe Reflection</li><li>嚴重程度：高風險</li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Checkmarx 最新的 Rule 如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">CxList inputs = Find_Inputs();</span><br><span class="line">CxList comCreations = Find_ObjectCreations().FindByTypes(<span class="keyword">new</span> String[]&#123;</span><br><span class="line">    <span class="string">&quot;CodeSnippetExpression&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeEntryPointMethod&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeTypeReference&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeTypeReference&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeObjectCreateExpression&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeMethodInvokeExpression&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeTypeReferenceExpression&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeMethodReturnStatement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CodeMemberMethod&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">CxList unknownList = All.NewCxList();</span><br><span class="line">unknownList.Add(</span><br><span class="line">    Find_UnknownReference(),</span><br><span class="line">    Find_Param(),</span><br><span class="line">    Find_TypeRef());</span><br><span class="line"></span><br><span class="line">CxList auxInput = All.NewCxList();</span><br><span class="line">auxInput.Add(</span><br><span class="line">    inputs,</span><br><span class="line">    unknownList.FindAllReferences(inputs.GetAssignee()));</span><br><span class="line"></span><br><span class="line">CxList methods = Find_Methods();</span><br><span class="line"></span><br><span class="line">CxList relevantMethods = methods.FindByMemberAccesses(<span class="keyword">new</span> <span class="built_in">string</span> [] &#123;<span class="string">&quot;Type.GetType&quot;</span>, <span class="string">&quot;Type.GetMethod&quot;</span>, <span class="string">&quot;Type.InvokeMember&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Module.GetType&quot;</span>, <span class="string">&quot;Module.GetMethod&quot;</span>, <span class="string">&quot;Assembly.Load&quot;</span>, <span class="string">&quot;Assembly.LoadFile&quot;</span>, <span class="string">&quot;Assembly.LoadFrom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Assembly.LoadModule&quot;</span>, <span class="string">&quot;Assembly.LoadWithPartialName&quot;</span>, <span class="string">&quot;Assembly.ReflectionOnlyLoad&quot;</span>, <span class="string">&quot;Assembly.ReflectionOnlyLoadFrom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Assembly.UnsafeLoadFrom&quot;</span>, <span class="string">&quot;Assembly.GetType&quot;</span>, <span class="string">&quot;TypeInfo.GetMethod&quot;</span>,</span><br><span class="line">    <span class="string">&quot;TypeInfo.InvokeMember&quot;</span>, <span class="string">&quot;TypeDelegator.InvokeMember&quot;</span>&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">CxList relevantSinks = unknownList.GetParameters(relevantMethods, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">CxList containsMethods = methods.FindByMemberAccess(<span class="string">&quot;*.Contains&quot;</span>).GetByAncs(Find_Ifs());</span><br><span class="line">CxList influenceIfparams = auxInput.GetParameters(containsMethods.FindByParameters(auxInput), <span class="number">0</span>);</span><br><span class="line">CxList allReferencesOfifParams = auxInput.FindAllReferences(influenceIfparams);</span><br><span class="line"></span><br><span class="line">CxList notInfluencedChecks = relevantSinks - relevantSinks.FindByParameters(allReferencesOfifParams);</span><br><span class="line">notInfluencedChecks.Add(All.FindAllReferences(notInfluencedChecks.GetAssignee()));</span><br><span class="line"></span><br><span class="line">CxList notInfluencedComCreations = comCreations - comCreations.FindByParameters(allReferencesOfifParams);</span><br><span class="line">CxList objsC = notInfluencedComCreations.FindByParameters(All.GetParameters(notInfluencedComCreations) * auxInput);</span><br><span class="line"></span><br><span class="line">CxList sinks = All.NewCxList();</span><br><span class="line">sinks.Add(notInfluencedChecks, objsC);</span><br><span class="line"></span><br><span class="line">CxList sanitizers = Find_Integers();</span><br><span class="line"></span><br><span class="line">result = inputs.InfluencingOnAndNotSanitized(sinks, sanitizers).ReduceFlow(CxList.ReduceFlowType.ReduceBigFlow);</span><br></pre></td></tr></table></figure><p>在上面程式中，可以發現，<strong>if + 白名單 + Contains</strong>還是存在的，<br>而另一個確定的做法是轉成 <strong>Int</strong> (如果轉 int 可以，那 GUID 也應該可以才對)。<br>有問題的程式類似如下，是一個 WebService 程式，<br>主要是依 reportId 來取得報表範本，並產生報表。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">ReportServiceInData</span>(<span class="params"><span class="built_in">string</span> reportId, <span class="built_in">string</span> user, DataSet data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    IReportGenerator rpt;</span><br><span class="line">    rpt = factory.CreateReportGenerator(reportId, user);</span><br><span class="line">    result = rpt.ExportReport(data);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CreateReportGenerator 就透過 Assembly.LoadFile 來載入 DLL</span></span><br></pre></td></tr></table></figure><p>因為有轉 int 的 rule 在，所以可以檢查一下 reportId 是不是有固定的命名規則，<br>有的話，就先將它轉成 int 後，再組回來，就可以解掉問題。<br>例如 reportId 為 R001, R002, R003 …<br>所以就可以將 reportId 去掉 R ，轉成 int ，再組回去就行了，<br>傳給<code>factory.CreateReportGenerator</code> 就是轉過 <code>int</code> 的 <code>newRptId</code> 如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">ReportServiceInData</span>(<span class="params"><span class="built_in">string</span> reportId, <span class="built_in">string</span> user, DataSet data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> rptId = Convert.ToInt32(reportId.Replace(<span class="string">&quot;R&quot;</span>, <span class="built_in">string</span>.Empty));</span><br><span class="line">    <span class="keyword">var</span> newRptId = <span class="string">$&quot;R<span class="subst">&#123;rptId:##<span class="number">000</span>&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> Factory();</span><br><span class="line">    IReportGenerator rpt;</span><br><span class="line">    rpt = factory.CreateReportGenerator(newRptId, user);</span><br><span class="line">    result = rpt.ExportReport(data);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當然，以上僅在規則中調整，最好當然將 <code>Assembly.LoadFile</code> 改掉。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2023/02/17/checkmarx-unsafe-reflection/">Checkmarx Unsafe_Reflection</a></p><blockquote><p>一文錢買個糖人(吃了沒玩的，玩了沒吃的):喻人對某一件事，處於取捨兩難之間，一時無法抉擇的意思</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前篇 &lt;a href=&quot;https://rainmakerho.github.io/2023/02/17/checkmarx-unsafe</summary>
      
    
    
    
    
    <category term="Checkmarx" scheme="https://rainmakerho.github.io/tags/Checkmarx/"/>
    
    <category term="Unsafe Reflection" scheme="https://rainmakerho.github.io/tags/Unsafe-Reflection/"/>
    
    <category term="Assembly.LoadFile" scheme="https://rainmakerho.github.io/tags/Assembly-LoadFile/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio 2019 - Typescript 發生 找不到模組/類型 ... 沒有屬性 錯誤</title>
    <link href="https://rainmakerho.github.io/2024/02/23/visual-studio-2019-typescript-build-cannot-find-module/"/>
    <id>https://rainmakerho.github.io/2024/02/23/visual-studio-2019-typescript-build-cannot-find-module/</id>
    <published>2024-02-23T03:52:27.000Z</published>
    <updated>2024-03-01T06:23:02.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>同事開啟一個包含 Typescript 檔案的 Web 專案，結果出現一堆 <code>TS2411</code>, <code>TS2339</code>, <code>TS2536</code> 及 <code>TS2792</code> 的錯誤，如下圖，</p><img src="/2024/02/23/visual-studio-2019-typescript-build-cannot-find-module/01.png" class="" title="Error"><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因為專案中沒有 tsconfig.json 設定，<br>而且也只有該同事有環境有問題。<br>後來同事說，調整專案屬性中<code>TypeScript</code>中的<code>模組系統</code>。<br>將原本的<code>無</code>改成<code>CommonJS</code>就可以了。<br>有類似問題的朋友，也可以試著調整看看哦~</p><img src="/2024/02/23/visual-studio-2019-typescript-build-cannot-find-module/02.png" class="" title="模組系統"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">TypeScriptModuleKind</span>&gt;</span>commonjs<span class="tag">&lt;/<span class="name">TypeScriptModuleKind</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://stackoverflow.com/questions/39957100/visual-studio-2015-typescript-buildcannot-find-module">Visual Studio 2015 - Typescript “Build:Cannot find module…”</a></p><blockquote><p>一兩元寶灰，出四兩錫: 喻人花樣百出，變化多端的意思</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;同事開啟一個包含 Typescript 檔案的 Web 專案，結果出現一堆 &lt;code&gt;TS2411&lt;/code&gt;, &lt;code&gt;TS233</summary>
      
    
    
    
    
    <category term="Visual Studio" scheme="https://rainmakerho.github.io/tags/Visual-Studio/"/>
    
    <category term="Cannot find module" scheme="https://rainmakerho.github.io/tags/Cannot-find-module/"/>
    
    <category term="Typescript" scheme="https://rainmakerho.github.io/tags/Typescript/"/>
    
    <category term="TS2411" scheme="https://rainmakerho.github.io/tags/TS2411/"/>
    
    <category term="TS2339" scheme="https://rainmakerho.github.io/tags/TS2339/"/>
    
    <category term="TS2536" scheme="https://rainmakerho.github.io/tags/TS2536/"/>
    
    <category term="TS2792" scheme="https://rainmakerho.github.io/tags/TS2792/"/>
    
  </entry>
  
  <entry>
    <title>C# 為什麼 Console App 不需要 using System 就可以直接用 Console.WriteLine?</title>
    <link href="https://rainmakerho.github.io/2024/02/15/implicitly-imported-namespaces-csharp/"/>
    <id>https://rainmakerho.github.io/2024/02/15/implicitly-imported-namespaces-csharp/</id>
    <published>2024-02-15T05:27:37.000Z</published>
    <updated>2024-02-16T00:50:21.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="疑問"><a href="#疑問" class="headerlink" title="疑問"></a>疑問</h3><p>不知道有沒有發現新增 Console 應用程式後，<br>沒有任何的 <code>using</code>，程式中就可以直接使用 <code>Console.WriteLine(&quot;Hello, World!&quot;);</code>?</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>那是因為 .NET 6(含以後版本)使用 C# 10 的<strong>global namespace imports</strong>，<br>會把常用的一些 namespace 自動 import 進來哦~<br>會加那些 namespace 呢?<br>可以從專案屬性中看到，如下，</p><img src="/2024/02/15/implicitly-imported-namespaces-csharp/02.png" class="" title="專案屬性"><p>專案內容中有設定<code>ImplicitUsings</code>(隱含全域 Using)，預設是為<code>enable</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImplicitUsings</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">ImplicitUsings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或是在建置專案後，可以查看 <strong>obj&#x2F;Debug</strong> 目錄中的 <code>&#123;專案名稱&#125;.GlobalUsings.g.cs</code> 內容，</p><img src="/2024/02/15/implicitly-imported-namespaces-csharp/01.png" class="" title="GlobalUsings.g.cs"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;auto-generated/&gt;</span></span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System;</span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System.Collections.Generic;</span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System.IO;</span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System.Linq;</span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System.Net.Http;</span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System.Threading;</span><br><span class="line"><span class="keyword">global</span> <span class="keyword">using</span> <span class="keyword">global</span>::System.Threading.Tasks;</span><br></pre></td></tr></table></figure><p>如果要加其他的 Global Using ，可以在<code>csproj</code>檔案中加入，如下，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Using</span> <span class="attr">Include</span>=<span class="string">&quot;System.Text.Json&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Using</span> <span class="attr">Include</span>=<span class="string">&quot;System.Text.Json.Serialization&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/zh-tw/dotnet/core/tutorials/top-level-templates">C# 主控台應用程式範本會產生最上層語句</a><br><a href="https://xamlabs.com/2023/08/03/simplifying-namespace-imports-in-c-with-global-using-directives/">Simplifying Namespace Imports in C# with Global Using Directives</a><br><a href="https://endjin.com/blog/2021/09/dotnet-csharp-10-implicit-global-using-directives">C# 10.0 implicit global using directives</a></p><blockquote><p>一百句，五十雙: 喻人說來說去都是這一套，沒有新意，一點建議性都沒有</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;疑問&quot;&gt;&lt;a href=&quot;#疑問&quot; class=&quot;headerlink&quot; title=&quot;疑問&quot;&gt;&lt;/a&gt;疑問&lt;/h3&gt;&lt;p&gt;不知道有沒有發現新增 Console 應用程式後，&lt;br&gt;沒有任何的 &lt;code&gt;using&lt;/code&gt;，程式中就可以直接使用 &lt;code</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Console" scheme="https://rainmakerho.github.io/tags/Console/"/>
    
    <category term="Implicitly imported namespaces" scheme="https://rainmakerho.github.io/tags/Implicitly-imported-namespaces/"/>
    
    <category term=".NET 6" scheme="https://rainmakerho.github.io/tags/NET-6/"/>
    
    <category term="隱含全域 Using" scheme="https://rainmakerho.github.io/tags/%E9%9A%B1%E5%90%AB%E5%85%A8%E5%9F%9F-Using/"/>
    
  </entry>
  
  <entry>
    <title>Edge開發者工具中的網路沒辦法顯示任何的要求訊息</title>
    <link href="https://rainmakerho.github.io/2024/02/07/edge-network-empty/"/>
    <id>https://rainmakerho.github.io/2024/02/07/edge-network-empty/</id>
    <published>2024-02-07T04:04:11.000Z</published>
    <updated>2024-02-15T00:41:54.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近開啟 Edge 的開發者工具中的網路來錄網頁的要求行為時，<br>下方的區塊都是空空的，似乎不知道被那裡過濾掉，要怎麼辦呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>不知那個設定把要求都過濾掉，那就只好<strong>還原</strong>它。</p><p>在 <strong>開發者工具</strong> 右邊，按下 <code>...</code> ，選擇 <code>設定</code> ，</p><img src="/2024/02/07/edge-network-empty/01.png" class="" title="DevTools-設定"><p>在<code>同步</code>最下方有一個<code>還原成預設值，並重新整理</code>，<br>按下它，就可以了哦。</p><img src="/2024/02/07/edge-network-empty/02.png" class="" title="還原成預設值"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://blog.csdn.net/u013427969/article/details/113135474">edge 等浏览器打开开发者工具（F12）之后在 NetWork 看不到请求头等信息</a></p><blockquote><p>一天一個現在:「現在」只有一個，若把這個「現在」放過，第二個「現在」就不會再出現</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近開啟 Edge 的開發者工具中的網路來錄網頁的要求行為時，&lt;br&gt;下方的區塊都是空空的，似乎不知道被那裡過濾掉，要怎麼辦呢?&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Edge" scheme="https://rainmakerho.github.io/tags/Edge/"/>
    
    <category term="Empty" scheme="https://rainmakerho.github.io/tags/Empty/"/>
    
    <category term="DevTools" scheme="https://rainmakerho.github.io/tags/DevTools/"/>
    
    <category term="Network" scheme="https://rainmakerho.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>改變 Windows 10 網卡的 MAC Address(實體位址)</title>
    <link href="https://rainmakerho.github.io/2024/02/07/change-mac-address-in-windows10/"/>
    <id>https://rainmakerho.github.io/2024/02/07/change-mac-address-in-windows10/</id>
    <published>2024-02-07T03:00:17.000Z</published>
    <updated>2024-02-15T00:46:00.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在 Windows 中如何改變網卡的 MAC Address(實體位址) 呢?</p><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>可以參考 <a href="https://www.shareus.com/windows/how-to-change-my-mac-address-in-windows-10-mac-address-spoofing.html">How to Change My MAC Address in Windows 10 - MAC Address Spoofing</a> 做法，找到網卡-&gt;設定-&gt;進階 有 <code>Network Address</code> 可以設定的網卡，<br>設定它的值後，再到命令視窗輸入 <code>ipconfig /all</code> 就可以發現 mac address 被改成剛才的設定值。</p><img src="/2024/02/07/change-mac-address-in-windows10/01.png" class="" title="change mac address"><p>可以到機碼中，<code>NetworkAddress</code> 的值也被加進去哦~</p><blockquote><p>最穩定的改變方式是從 <code>電腦管理</code>-&gt;<code>裝置管理員</code>-&gt;<code>網路介面卡</code>-&gt;選網卡-&gt;按右鍵-&gt;進階 Tab-&gt;內容裡面的<code>Network Address</code></p></blockquote><ul><li>有些設定值是不會改變的，例如 <code>0123456789AB</code></li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.shareus.com/windows/how-to-change-my-mac-address-in-windows-10-mac-address-spoofing.html">How to Change My MAC Address in Windows 10 - MAC Address Spoofing</a></p><blockquote><p>一百隻麻雀炒成一碟菜(都是嘴): 比喻很多人聚集在一起，興高彩烈地說個不停或只憑一張嘴的意思</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;在 Windows 中如何改變網卡的 MAC Address(實體位址) 呢?&lt;/p&gt;
&lt;h3 id=&quot;做法&quot;&gt;&lt;a href=&quot;#做法&quot; </summary>
      
    
    
    
    
    <category term="windows" scheme="https://rainmakerho.github.io/tags/windows/"/>
    
    <category term="ipconfig" scheme="https://rainmakerho.github.io/tags/ipconfig/"/>
    
    <category term="mac address" scheme="https://rainmakerho.github.io/tags/mac-address/"/>
    
    <category term="實體位址" scheme="https://rainmakerho.github.io/tags/%E5%AF%A6%E9%AB%94%E4%BD%8D%E5%9D%80/"/>
    
    <category term="Spoofing" scheme="https://rainmakerho.github.io/tags/Spoofing/"/>
    
    <category term="NetworkAddress" scheme="https://rainmakerho.github.io/tags/NetworkAddress/"/>
    
  </entry>
  
</feed>
