<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亂馬客</title>
  <icon>https://www.gravatar.com/avatar/cd3aed042ccd7a5a5d9956b0bc07dc81</icon>
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="https://rainmakerho.github.io/atom.xml" rel="self"/>
  
  <link href="https://rainmakerho.github.io/"/>
  <updated>2025-08-11T02:41:37.613Z</updated>
  <id>https://rainmakerho.github.io/</id>
  
  <author>
    <name>亂馬客</name>
    <email>rainmaker_ho@gss.com.tw</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPT-4.1 與 GPT-5 API 價格比較：成本差異與使用情境解析</title>
    <link href="https://rainmakerho.github.io/2025/08/11/gpt4-1-vs-gpt5-api-pricing-comparison/"/>
    <id>https://rainmakerho.github.io/2025/08/11/gpt4-1-vs-gpt5-api-pricing-comparison/</id>
    <published>2025-08-11T02:37:22.000Z</published>
    <updated>2025-08-11T02:41:37.613Z</updated>
    
    <content type="html"><![CDATA[<p>隨著 OpenAI 推出 GPT-5，開發者在選擇模型時除了性能外，價格也是關鍵考量因素。本文將針對 <strong>GPT-4.1</strong> 與 <strong>GPT-5</strong> 的 API 計價方式，進行詳細對照與分析，幫助你在不同應用場景下作出最佳選擇。</p><hr><h2 id="1-價格對照表（每百萬-tokens-x2F-美元）"><a href="#1-價格對照表（每百萬-tokens-x2F-美元）" class="headerlink" title="1. 價格對照表（每百萬 tokens&#x2F;美元）"></a>1. 價格對照表（每百萬 tokens&#x2F;美元）</h2><table><thead><tr><th>模型</th><th>Input（輸入）</th><th>Cached Input（快取輸入）</th><th>Output（輸出）</th></tr></thead><tbody><tr><td><strong>GPT-4.1</strong></td><td>$2.00</td><td>$0.50</td><td>$8.00</td></tr><tr><td><strong>GPT-5</strong></td><td>$1.25</td><td>$0.125</td><td>$10.00</td></tr></tbody></table><blockquote><p>註：Cached Input 是指重複使用的輸入 tokens，計價更低，適合多輪對話或相似請求。</p></blockquote><hr><h2 id="2-價格差異分析"><a href="#2-價格差異分析" class="headerlink" title="2. 價格差異分析"></a>2. 價格差異分析</h2><h3 id="2-1-輸入成本"><a href="#2-1-輸入成本" class="headerlink" title="2.1 輸入成本"></a>2.1 輸入成本</h3><ul><li>GPT-5 輸入價格 <strong>比 GPT-4.1 便宜 37.5%（$1.25 vs $2.00）</strong>。</li><li>Cached Input 成本更大幅下降到 GPT-4.1 的 <strong>1&#x2F;4</strong>（$0.125 vs $0.50）。</li></ul><h3 id="2-2-輸出成本"><a href="#2-2-輸出成本" class="headerlink" title="2.2 輸出成本"></a>2.2 輸出成本</h3><ul><li>GPT-5 輸出價格 <strong>比 GPT-4.1 高 25%（$10.00 vs $8.00）</strong>。</li><li>在長輸出的情境下，GPT-4.1 可能更具成本優勢。</li></ul><hr><h2 id="3-使用情境建議"><a href="#3-使用情境建議" class="headerlink" title="3. 使用情境建議"></a>3. 使用情境建議</h2><table><thead><tr><th>使用情境</th><th>建議選擇</th><th>理由</th></tr></thead><tbody><tr><td><strong>長 prompt + 短輸出</strong></td><td>GPT-5</td><td>輸入便宜，總成本低</td></tr><tr><td><strong>短 prompt + 長輸出</strong></td><td>GPT-4.1</td><td>輸出便宜，適合生成大量文字</td></tr><tr><td><strong>多輪對話、快取重用多</strong></td><td>GPT-5</td><td>Cached Input 成本極低</td></tr></tbody></table><hr><h2 id="4-結論"><a href="#4-結論" class="headerlink" title="4. 結論"></a>4. 結論</h2><ul><li>如果你的應用場景 <strong>輸入量大、輸出量小</strong>，GPT-5 的成本優勢明顯。</li><li>如果你的應用場景 <strong>輸出文字長</strong>，GPT-4.1 可能更划算。</li><li>建議根據實際 token 使用比例，計算預估費用再決定模型選擇。</li></ul><hr><p><strong>延伸閱讀：</strong></p><ul><li><a href="https://platform.openai.com/docs/models/gpt-4.1">OpenAI GPT-4.1 官方文件</a></li><li><a href="https://platform.openai.com/docs/models/gpt-5">OpenAI GPT-5 官方文件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;隨著 OpenAI 推出 GPT-5，開發者在選擇模型時除了性能外，價格也是關鍵考量因素。本文將針對 &lt;strong&gt;GPT-4.1&lt;/strong&gt; 與 &lt;strong&gt;GPT-5&lt;/strong&gt; 的 API 計價方式，進行詳細對照與分析，幫助你在不同應用場景下作出最佳</summary>
      
    
    
    
    
    <category term="OpenAI" scheme="https://rainmakerho.github.io/tags/OpenAI/"/>
    
    <category term="GPT-4.1" scheme="https://rainmakerho.github.io/tags/GPT-4-1/"/>
    
    <category term="GPT-5" scheme="https://rainmakerho.github.io/tags/GPT-5/"/>
    
    <category term="API pricing" scheme="https://rainmakerho.github.io/tags/API-pricing/"/>
    
    <category term="token cost" scheme="https://rainmakerho.github.io/tags/token-cost/"/>
    
    <category term="AI model comparison" scheme="https://rainmakerho.github.io/tags/AI-model-comparison/"/>
    
    <category term="GPT-4.1 price" scheme="https://rainmakerho.github.io/tags/GPT-4-1-price/"/>
    
    <category term="GPT-5 price" scheme="https://rainmakerho.github.io/tags/GPT-5-price/"/>
    
    <category term="cached input" scheme="https://rainmakerho.github.io/tags/cached-input/"/>
    
    <category term="input token cost" scheme="https://rainmakerho.github.io/tags/input-token-cost/"/>
    
    <category term="output token cost" scheme="https://rainmakerho.github.io/tags/output-token-cost/"/>
    
    <category term="GPT-4.1 vs GPT-5" scheme="https://rainmakerho.github.io/tags/GPT-4-1-vs-GPT-5/"/>
    
    <category term="AI cost optimization" scheme="https://rainmakerho.github.io/tags/AI-cost-optimization/"/>
    
    <category term="GPT API" scheme="https://rainmakerho.github.io/tags/GPT-API/"/>
    
    <category term="AI pricing guide" scheme="https://rainmakerho.github.io/tags/AI-pricing-guide/"/>
    
  </entry>
  
  <entry>
    <title>C# 用 Enum + Dictionary 實作 狀態機：以會員狀態轉換為例</title>
    <link href="https://rainmakerho.github.io/2025/08/06/csharp-state-machine-enum-dictionary/"/>
    <id>https://rainmakerho.github.io/2025/08/06/csharp-state-machine-enum-dictionary/</id>
    <published>2025-08-06T09:30:35.000Z</published>
    <updated>2025-08-06T09:43:52.450Z</updated>
    
    <content type="html"><![CDATA[<p>在軟體開發中，有限狀態機（Finite State Machine, FSM） 是處理狀態之間有明確規則的轉換時非常常用的設計。例如，會員從「入會」可以轉為「暫停」或「退會」，「退會」又可以重新「入會」等。若直接用 if-else 判斷，不僅難以維護，日後擴充更易出錯。本文將介紹如何利用 C# 的 Enum 搭配 Dictionary，簡潔又彈性地實作狀態轉換邏輯。</p><h3 id="實作練習"><a href="#實作練習" class="headerlink" title="實作練習"></a>實作練習</h3><h5 id="1-用-Enum-定義所有狀態"><a href="#1-用-Enum-定義所有狀態" class="headerlink" title="1.用 Enum 定義所有狀態"></a>1.用 Enum 定義所有狀態</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> MemberStatus</span><br><span class="line">&#123;</span><br><span class="line">    入會,</span><br><span class="line">    暫停,</span><br><span class="line">    退會</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-用-Dictionary-定義合法狀態轉換"><a href="#2-用-Dictionary-定義合法狀態轉換" class="headerlink" title="2.用 Dictionary 定義合法狀態轉換"></a>2.用 Dictionary 定義合法狀態轉換</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MemberStatusExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Dictionary&lt;MemberStatus, List&lt;MemberStatus&gt;&gt; AllowedTransitions = <span class="keyword">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MemberStatus.入會</span>] = [MemberStatus.暫停, MemberStatus.退會],</span><br><span class="line">        [<span class="meta">MemberStatus.暫停</span>] = [MemberStatus.入會, MemberStatus.退會],</span><br><span class="line">        [<span class="meta">MemberStatus.退會</span>] = [MemberStatus.入會]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CanTransitionTo</span>(<span class="params"><span class="keyword">this</span> MemberStatus current, MemberStatus target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> AllowedTransitions.TryGetValue(current, <span class="keyword">out</span> <span class="keyword">var</span> nexts) &amp;&amp; nexts.Contains(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = MemberStatus.入會;</span><br><span class="line"><span class="keyword">var</span> target = MemberStatus.退會;</span><br><span class="line"><span class="keyword">if</span> (current.CanTransitionTo(target))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;允許轉換&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;不允許轉換&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>這種設計方式具有以下優點：</p><ul><li>可讀性高：狀態與轉換規則集中管理，一目瞭然。</li><li>易於擴充：日後如需新增狀態，只需修改 Enum 與 Dictionary 即可。</li><li>易於維護：轉換規則變更時，不需翻找大量 if-else，只需調整字典內容。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在軟體開發中，有限狀態機（Finite State Machine, FSM） 是處理狀態之間有明確規則的轉換時非常常用的設計。例如，會員從「入會」可以轉為「暫停」或「退會」，「退會」又可以重新「入會」等。若直接用 if-else 判斷，不僅難以維護，日後擴充更易出錯。本文</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Dictionary" scheme="https://rainmakerho.github.io/tags/Dictionary/"/>
    
    <category term="Finite State Machine" scheme="https://rainmakerho.github.io/tags/Finite-State-Machine/"/>
    
    <category term="Enum" scheme="https://rainmakerho.github.io/tags/Enum/"/>
    
    <category term="狀態轉換" scheme="https://rainmakerho.github.io/tags/%E7%8B%80%E6%85%8B%E8%BD%89%E6%8F%9B/"/>
    
    <category term="會員管理" scheme="https://rainmakerho.github.io/tags/%E6%9C%83%E5%93%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>GPT 給 Image Base64 字串花費的 Token數比給 Url 還來得多很多?</title>
    <link href="https://rainmakerho.github.io/2025/07/31/gpt-image-token-calculation-url-vs-base64/"/>
    <id>https://rainmakerho.github.io/2025/07/31/gpt-image-token-calculation-url-vs-base64/</id>
    <published>2025-07-31T08:12:08.000Z</published>
    <updated>2025-08-01T02:45:09.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>有人說使用 gpt-4o, gpt-4.1 這種多模態 LLM，呼叫 ChatCompletion API 給 Image 時，<br>如果給 Image 的 Base64 內容，所花的 Token 數會比給 Image URL 來得多很多 (´− ｀) ﾝｰ (¬_¬)<br>是因為 Image 的 Base64 字串長度比 Image URL 的字串內容多很多。</p><p>所以，如果要給圖檔時，要想儘辦法讓 OpenAI API 可以讀取到圖檔，<br>也就是要允許圖檔可以讓 internet 連到 !!!</p><blockquote><p>Image 的 Base64 內容，所花的 Token 數會比給 Image URL 來得多很多，這是真的嗎?</p></blockquote><p>以下我們就來驗證看看，</p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>使用 Semantic Kernel C#，使用 <code>ImageContent</code> 分別給 url 及 file bytes (base64)，程式如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">IKernelBuilder builder = Kernel.CreateBuilder();</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> apikey = <span class="string">&quot;sk-請給 openai apikey&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> model = <span class="string">&quot;gpt-4.1-mini&quot;</span>;</span><br><span class="line"></span><br><span class="line">builder.AddOpenAIChatCompletion(model, apikey);</span><br><span class="line">Kernel kernel = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chatCompletionService = kernel.GetRequiredService&lt;IChatCompletionService&gt;();</span><br><span class="line"></span><br><span class="line">ChatHistory chatHistory = <span class="keyword">new</span>();</span><br><span class="line"><span class="built_in">string</span> textContent = <span class="string">&quot;請將摘要這張圖片中的文字。\r\n&quot;</span>;</span><br><span class="line"><span class="built_in">bool</span> isUseUri = <span class="literal">true</span>; <span class="comment">//or false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isUseUri)</span><br><span class="line">&#123;</span><br><span class="line">    chatHistory.Add(</span><br><span class="line">        <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            Role = AuthorRole.User,</span><br><span class="line">            Items = [</span><br><span class="line">                <span class="keyword">new</span> TextContent(textContent),</span><br><span class="line">            <span class="keyword">new</span> ImageContent(<span class="keyword">new</span> Uri(<span class="string">$&quot;<span class="subst">&#123;對外的ImageUrl&#125;</span>&quot;</span>))</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] imageBytes = File.ReadAllBytes(<span class="string">&quot;path/to/your/image.png&quot;</span>);</span><br><span class="line">    chatHistory.Add(</span><br><span class="line">        <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            Role = AuthorRole.User,</span><br><span class="line">            Items = [</span><br><span class="line">               <span class="keyword">new</span> TextContent(textContent),</span><br><span class="line">                <span class="keyword">new</span> ImageContent(imageBytes, <span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reply = <span class="keyword">await</span> chatCompletionService.GetChatMessageContentAsync(chatHistory);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">Console.WriteLine(reply.Content);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">Helper.OutputInnerContent(reply.InnerContent <span class="keyword">as</span> OpenAI.Chat.ChatCompletion);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutputInnerContent</span>(<span class="params">OpenAI.Chat.ChatCompletion innerContent</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Message role: <span class="subst">&#123;innerContent.Role&#125;</span>&quot;</span>); <span class="comment">// Available as a property of ChatMessageContent</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Message content: <span class="subst">&#123;innerContent.Content[<span class="number">0</span>].Text&#125;</span>&quot;</span>); <span class="comment">// Available as a property of ChatMessageContent</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Model: <span class="subst">&#123;innerContent.Model&#125;</span>&quot;</span>); <span class="comment">// Model doesn&#x27;t change per chunk, so we can get it from the first chunk only</span></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Created At: <span class="subst">&#123;innerContent.CreatedAt&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Finish reason: <span class="subst">&#123;innerContent.FinishReason&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Input tokens usage: <span class="subst">&#123;innerContent.Usage.InputTokenCount&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Output tokens usage: <span class="subst">&#123;innerContent.Usage.OutputTokenCount&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Total tokens usage: <span class="subst">&#123;innerContent.Usage.TotalTokenCount&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Refusal: <span class="subst">&#123;innerContent.Refusal&#125;</span> &quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Id: <span class="subst">&#123;innerContent.Id&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;System fingerprint: <span class="subst">&#123;innerContent.SystemFingerprint&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (innerContent.ContentTokenLogProbabilities.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Content token log probabilities:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> contentTokenLogProbability <span class="keyword">in</span> innerContent.ContentTokenLogProbabilities)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Token: <span class="subst">&#123;contentTokenLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Log probability: <span class="subst">&#123;contentTokenLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;   Top log probabilities for this token:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> topLogProbability <span class="keyword">in</span> contentTokenLogProbability.TopLogProbabilities)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Token: <span class="subst">&#123;topLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Log probability: <span class="subst">&#123;topLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;   =======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (innerContent.RefusalTokenLogProbabilities.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Refusal token log probabilities:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> refusalTokenLogProbability <span class="keyword">in</span> innerContent.RefusalTokenLogProbabilities)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Token: <span class="subst">&#123;refusalTokenLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Log probability: <span class="subst">&#123;refusalTokenLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;   Refusal top log probabilities for this token:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> topLogProbability <span class="keyword">in</span> refusalTokenLogProbability.TopLogProbabilities)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Token: <span class="subst">&#123;topLogProbability.Token&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;   Log probability: <span class="subst">&#123;topLogProbability.LogProbability&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;   =======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>註: <code>new ImageContent(imageBytes, &quot;image/png&quot;)</code>中的 <code>imageBytes</code>會被轉成 Base64 字串(<a href="https://github.com/openai/openai-dotnet/blob/main/src/Utility/DataEncodingHelpers.cs#L37">DataEncodingHelpers.cs</a>)，如下程式，</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreateDataUri</span>(<span class="params">BinaryData bytes, <span class="built_in">string</span> bytesMediaType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> base64Bytes = Convert.ToBase64String(bytes.ToArray());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;data:<span class="subst">&#123;bytesMediaType&#125;</span>;base64,<span class="subst">&#123;base64Bytes&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程式 Log 出來的輸入 Token 是 2,456 個，如下圖:</p><img src="/2025/07/31/gpt-image-token-calculation-url-vs-base64/02.png" class="" title="AP Log"><p>從 OpenAI 的 Log 來看，2 次的 Input Token 都是 2,456 個，跟我們程式 Log 出來的結果相同，如下圖:</p><img src="/2025/07/31/gpt-image-token-calculation-url-vs-base64/01.png" class="" title="OpenAI Log"><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>使用多模態 LLM，給 Image 的 Url 或是給 Base64 字串，所花費的 Input Token 數是<strong>一樣的</strong>!<br>差別就在於 Post API 時的 Payload 大小而已。<br>如果是企業內的圖檔，建議使用 Base64 的方式，也不會有圖檔要對外的問題。</p><p>最後，再強調一次，</p><blockquote><p>使用多模態 LLM，給 Image 的 Url 或是給 Base64 字串，所花費的 Input Token 數是<strong>一樣的</strong> (&gt;人&lt;)</p></blockquote><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/semantic-kernel/concepts/ai-services/chat-completion/multi-modal-chat-completion?pivots=programming-language-csharp">Multi-modal chat completion</a><br><a href="https://github.com/openai/openai-dotnet/blob/main/src/Utility/DataEncodingHelpers.cs#L37">DataEncodingHelpers.cs - CreateDataUri</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;有人說使用 gpt-4o, gpt-4.1 這種多模態 LLM，呼叫 ChatCompletion API 給 Image 時，&lt;br&gt;如果</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="Base64" scheme="https://rainmakerho.github.io/tags/Base64/"/>
    
    <category term="Semantic Kernel" scheme="https://rainmakerho.github.io/tags/Semantic-Kernel/"/>
    
    <category term="URL" scheme="https://rainmakerho.github.io/tags/URL/"/>
    
    <category term="Image" scheme="https://rainmakerho.github.io/tags/Image/"/>
    
    <category term="GPT" scheme="https://rainmakerho.github.io/tags/GPT/"/>
    
    <category term="token 計費" scheme="https://rainmakerho.github.io/tags/token-%E8%A8%88%E8%B2%BB/"/>
    
    <category term="API token usage" scheme="https://rainmakerho.github.io/tags/API-token-usage/"/>
    
    <category term="ChatCompletion" scheme="https://rainmakerho.github.io/tags/ChatCompletion/"/>
    
  </entry>
  
  <entry>
    <title>當 Google Maps Static API Polyline 點數過多：錯誤原因與最佳解法</title>
    <link href="https://rainmakerho.github.io/2025/07/31/google-map-polyline-too-many-points-staticmap-error-solution/"/>
    <id>https://rainmakerho.github.io/2025/07/31/google-map-polyline-too-many-points-staticmap-error-solution/</id>
    <published>2025-07-31T01:55:51.000Z</published>
    <updated>2025-08-07T02:45:05.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最近使用 C# 透過<a href="https://developers.google.cn/maps/documentation/routes/reference/rest/v2/TopLevel/computeRoutes?hl=zh-tw">Google Map Routes API 的 Compute Routes</a> 來規劃起、迄的路徑，取得<strong>polyline</strong>(整體路線的折線)，再利用<a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a>來產生含有起、迄路徑的圖。<br>但是如果起、迄路徑中的折線太多，例如使用<strong>開車</strong>的方式，從<strong>上海</strong>到<strong>深圳</strong>，它的折線就有<strong>8 千多個</strong>，這就會導致使用<a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a>它的<strong>URL</strong>長度會爆長而導致發生以下的錯誤，</p><blockquote><p>Your client has issued a malformed or illegal request. That’s all we know.</p></blockquote><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p><a href="https://developers.google.com/maps/documentation/maps-static/start?hl=zh-tw#url-size-restriction">Maps Static API 網址長度上限為 16384 個字元</a>，所以我們要做的就是要<strong>減少</strong>折線的數量。</p><h5 id="安裝-Nuget-套件"><a href="#安裝-Nuget-套件" class="headerlink" title="安裝 Nuget 套件"></a>安裝 Nuget 套件</h5><p><a href="https://www.nuget.org/packages/nettopologysuite/">NetTopologySuite</a>:減少 經緯度的點數<br><a href="https://www.nuget.org/packages/Polyliner.Net">Polyliner.Net</a>:Encode 經緯度 成 polyline, 將 polyline Decode 成 經緯度</p><h5 id="處理步驟-及-程式碼"><a href="#處理步驟-及-程式碼" class="headerlink" title="處理步驟 及 程式碼"></a>處理步驟 及 程式碼</h5><p>1.將<strong>polyline</strong> Decode 取得經緯度</p><p>2.利用線段簡化演算法，減少 經緯度 的數量(要減少到多少，可以自定一個<code>SimplifyToTargetPoints</code> Method 來處理它)</p><p>3.重新將經緯度 Encode 成 <strong>polyline</strong></p><p>程式碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NetTopologySuite.Geometries;</span><br><span class="line"><span class="keyword">using</span> PolylinerNet;</span><br><span class="line"><span class="keyword">using</span> NetTopologySuite.Simplify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> encodedPoyline = <span class="string">&quot;Compute Routes 取回的 encodedPolyline&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> polyliner = <span class="keyword">new</span> Polyliner();</span><br><span class="line"><span class="comment">// 1.將 polyline Decode 取得經緯度</span></span><br><span class="line">List&lt;PolylinePoint&gt; polylinePointList = polyliner.Decode(encodedPoyline);</span><br><span class="line"><span class="keyword">var</span> coordinates = polylinePointList</span><br><span class="line">    .Select(p =&gt; <span class="keyword">new</span> Coordinate(p.Longitude, p.Latitude))</span><br><span class="line">    .ToArray();</span><br><span class="line"><span class="comment">// 2.利用線段簡化演算法，減少 經緯度 的數量</span></span><br><span class="line"><span class="keyword">var</span> geometryFactory = <span class="keyword">new</span> GeometryFactory();</span><br><span class="line"><span class="keyword">var</span> line = geometryFactory.CreateLineString(coordinates);</span><br><span class="line"><span class="comment">// 減少 經緯度 的數量到 300 以內，請依需求進行調整</span></span><br><span class="line"><span class="keyword">var</span> simplifiedLine = SimplifyToTargetPoints(line, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">var</span> simplifiedPoints = simplifiedLine.Coordinates</span><br><span class="line">    .Select(c =&gt; <span class="keyword">new</span> PolylinePoint(c.Y, c.X))</span><br><span class="line">    .ToList();</span><br><span class="line"><span class="comment">// 3.新將經緯度 Encode 成 polyline</span></span><br><span class="line"><span class="keyword">var</span> encodedSimplifiedPolyline = polyliner.Encode(simplifiedPoints);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 減少 經緯度 的數量到 targetPoints 以內</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LineString <span class="title">SimplifyToTargetPoints</span>(<span class="params">LineString line, <span class="built_in">int</span> targetPoints, <span class="built_in">double</span> minTolerance = <span class="number">1e-6</span>, <span class="built_in">double</span> maxTolerance = <span class="number">1.0</span>, <span class="built_in">int</span> maxIterations = <span class="number">20</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (line.NumPoints &lt;= targetPoints)</span><br><span class="line">        <span class="keyword">return</span> line; <span class="comment">// 原本就很少</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> low = minTolerance;</span><br><span class="line">    <span class="built_in">double</span> high = maxTolerance;</span><br><span class="line">    LineString result = line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; maxIterations; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> simplified = DouglasPeuckerSimplifier.Simplify(line, mid) <span class="keyword">as</span> LineString;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (simplified.NumPoints &gt; targetPoints)</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid; <span class="comment">// 容忍度不夠大，點太多，繼續增加</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result = simplified; <span class="comment">// 有達到條件，記下這個結果</span></span><br><span class="line">            high = mid;          <span class="comment">// 嘗試更小的 tolerance</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Math.Abs(high - low) &lt; <span class="number">1e-8</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後再將 encodedSimplifiedPolyline 組成 <a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a> 的 URL，即可正常產生地圖。如下圖:</p><img src="/2025/07/31/google-map-polyline-too-many-points-staticmap-error-solution/01.png" class="" title="Google Map"><ul><li>註: 以 800 x 600 的圖，使用 300 以內的圖來看是還 OK, 大家也可以試看看其他的數量，例如 100, 200 …，在 <a href="https://developers.google.com/maps/documentation/routes/polylinedecoder">Polyline decoder utility</a>試看看效果</li></ul><h5 id="路徑簡化原理說明"><a href="#路徑簡化原理說明" class="headerlink" title="路徑簡化原理說明"></a>路徑簡化原理說明</h5><p>通常使用 <a href="https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm">Ramer–Douglas–Peucker algorithm</a>，如 wikipedia 圖所示:<br><img src="https://upload.wikimedia.org/wikipedia/commons/3/30/Douglas-Peucker_animated.gif"></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developers.google.cn/maps/documentation/routes/reference/rest/v2/TopLevel/computeRoutes?hl=zh-tw">Google Map Routes API 的 Compute Routes</a><br><a href="https://developers.google.com/maps/documentation/maps-static/overview?hl=zh-tw">Google Maps Static API</a><br><a href="https://developers.google.com/maps/documentation/maps-static/start?hl=zh-tw#url-size-restriction">Maps Static API 網址長度上限為 16384 個字元</a><br><a href="https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm">Ramer–Douglas–Peucker algorithm</a><br><a href="https://developers.google.com/maps/documentation/routes/polylinedecoder">Polyline decoder utility</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;最近使用 C# 透過&lt;a href=&quot;https://developers.google.cn/maps/documentation/rou</summary>
      
    
    
    
    
    <category term="C#" scheme="https://rainmakerho.github.io/tags/C/"/>
    
    <category term="URL" scheme="https://rainmakerho.github.io/tags/URL/"/>
    
    <category term="Polyline" scheme="https://rainmakerho.github.io/tags/Polyline/"/>
    
    <category term="Google Maps API" scheme="https://rainmakerho.github.io/tags/Google-Maps-API/"/>
    
    <category term="Maps Static" scheme="https://rainmakerho.github.io/tags/Maps-Static/"/>
    
    <category term="點數過多" scheme="https://rainmakerho.github.io/tags/%E9%BB%9E%E6%95%B8%E9%81%8E%E5%A4%9A/"/>
    
    <category term="NetTopologySuite" scheme="https://rainmakerho.github.io/tags/NetTopologySuite/"/>
    
    <category term="簡化路徑" scheme="https://rainmakerho.github.io/tags/%E7%B0%A1%E5%8C%96%E8%B7%AF%E5%BE%91/"/>
    
    <category term="Your client has issued a malformed or illegal request" scheme="https://rainmakerho.github.io/tags/Your-client-has-issued-a-malformed-or-illegal-request/"/>
    
    <category term="DouglasPeuckerSimplifier" scheme="https://rainmakerho.github.io/tags/DouglasPeuckerSimplifier/"/>
    
  </entry>
  
  <entry>
    <title>IIS Application Pool 檔案目錄權限解析：為什麼不用加帳號也能運作？</title>
    <link href="https://rainmakerho.github.io/2025/07/29/iis-application-pool-identity-directory-permissions/"/>
    <id>https://rainmakerho.github.io/2025/07/29/iis-application-pool-identity-directory-permissions/</id>
    <published>2025-07-29T03:31:56.000Z</published>
    <updated>2025-07-29T06:41:42.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在將 ASP.NET Core 網站部署到 IIS 的過程中，許多人都遇過這個疑問：</p><p>1.部署網站目錄時，是否一定要手動加上 <code>IIS AppPool\YourAppPool</code> 帳號的權限？</p><p>2.為什麼很多時候沒加也能正常執行？</p><p>這篇文章將徹底解析 IIS Application Pool Identity 的目錄權限運作原理，分享實際測試、設定流程，以及安全性最佳實踐，幫助你徹底搞懂這個主題！</p><h3 id="IIS-Application-Pool-Identity"><a href="#IIS-Application-Pool-Identity" class="headerlink" title="IIS Application Pool Identity"></a>IIS Application Pool Identity</h3><p>IIS 預設會使用 Application Pool Identity（<code>IIS AppPool\YourAppPool</code>）來執行網站程序。它有以下特點：</p><ul><li>只要目錄權限有 <code>BUILTIN\Users</code> 或 <code>NT AUTHORITY\Authenticated Users</code>，IIS AppPool Identity 預設就能正常存取。</li><li>如果這些群組被移除，就必須**明確加入 <code>IIS AppPool\YourAppPool</code>**，否則會遇到 500 錯誤。</li></ul><p>這樣的設計，雖然方便，但不符合「最小權限原則」（Least Privilege Principle）。<br>建議為生產環境<strong>明確只授權給實際需要的 AppPool Identity，移除其他不必要的群組帳號</strong>。</p><h3 id="ASP-NET-Core-網站在-IIS-部署與最小權限設定"><a href="#ASP-NET-Core-網站在-IIS-部署與最小權限設定" class="headerlink" title="ASP.NET Core 網站在 IIS 部署與最小權限設定"></a>ASP.NET Core 網站在 IIS 部署與最小權限設定</h3><p>以下是一套完整、符合最佳實踐的 IIS 目錄權限設定步驟：</p><p>1.在部署的 Server 上安裝 ASP.NET Core Hosting Bundle 後，執行 <code>iisreset</code></p><p>2.在 IIS 中建立一個新的<strong>應用程式集區</strong>(假設名稱為<code>webdemo</code>)，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/01.png" class="" title="new application_pool"><p>3.在 IIS 中建立一個新的<strong>應用程式</strong>(假設名稱為<code>webdemo</code>)，並將應用程式集區指定到上面建立的集區，設定檔案所在目錄</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/02.png" class="" title="new application"><p>4.在 IIS 站台，點擊<code>webdemo</code>，設定<strong>HTTP 回應標頭</strong>(移除不必要的標頭，加入 Security 的一些標頭)，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/06.png" class="" title="http headers"><p>5.在檔案總管中，點選部署目錄-&gt;內容-&gt;安全性-&gt;SYSTEM 的權限(P)-&gt;點擊「進階」Button-&gt;點擊「停用繼承(I)」 Button 後，按下「確定」，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/04.png" class="" title="SYSTEM"><p>6.在檔案總管中，點選部署目錄-&gt;內容-&gt;安全性-&gt;群組或使用者名稱(G)-&gt;點擊「編輯」Button-&gt;移除<strong>Authenticated Users</strong> 及 <strong>Users</strong> 群組帳號，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/03.png" class="" title="remove users"><p>7.在檔案總管中，點選部署目錄-&gt;內容-&gt;安全性-&gt;群組或使用者名稱(G)-&gt;點擊「編輯」Button-&gt;加入 <strong>IIS AppPool\webdemo</strong> 帳號(允許<code>讀取與執行</code>, <code>列出資料夾內容</code> 及 <code>讀取</code> 權限)，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/05.png" class="" title="add appPool"><br/><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/07.png" class="" title="set appPool permissions"><p>8.針對特定子目錄（如 uploads、logs）加「寫入」或「寫入 + 修改」(有要刪除檔案) 權限，如下圖:</p><img src="/2025/07/29/iis-application-pool-identity-directory-permissions/08.png" class="" title="set uploads permissions"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/zh-tw/iis/manage/configuring-security/application-pool-identities">應用程式集區身分識別</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在將 ASP.NET Core 網站部署到 IIS 的過程中，許多人都遇過這個疑問：&lt;/p&gt;
&lt;p&gt;1.部署網站目錄時，是否一定要手動加上 </summary>
      
    
    
    
    
    <category term="IIS" scheme="https://rainmakerho.github.io/tags/IIS/"/>
    
    <category term="Application Pool" scheme="https://rainmakerho.github.io/tags/Application-Pool/"/>
    
    <category term="ASP.NET Core" scheme="https://rainmakerho.github.io/tags/ASP-NET-Core/"/>
    
    <category term="權限" scheme="https://rainmakerho.github.io/tags/%E6%AC%8A%E9%99%90/"/>
    
    <category term="目錄權限" scheme="https://rainmakerho.github.io/tags/%E7%9B%AE%E9%8C%84%E6%AC%8A%E9%99%90/"/>
    
    <category term="AppPool Identity" scheme="https://rainmakerho.github.io/tags/AppPool-Identity/"/>
    
    <category term="虛擬帳號" scheme="https://rainmakerho.github.io/tags/%E8%99%9B%E6%93%AC%E5%B8%B3%E8%99%9F/"/>
    
    <category term="Windows Server" scheme="https://rainmakerho.github.io/tags/Windows-Server/"/>
    
    <category term="網站部署" scheme="https://rainmakerho.github.io/tags/%E7%B6%B2%E7%AB%99%E9%83%A8%E7%BD%B2/"/>
    
    <category term="安全性" scheme="https://rainmakerho.github.io/tags/%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    
    <category term="最佳實踐" scheme="https://rainmakerho.github.io/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>低成本高效率！用 Dify + Azure AI 快速處理手寫發票，準確率超高</title>
    <link href="https://rainmakerho.github.io/2025/07/25/dify-handwritten-invoice/"/>
    <id>https://rainmakerho.github.io/2025/07/25/dify-handwritten-invoice/</id>
    <published>2025-07-25T06:18:35.000Z</published>
    <updated>2025-08-07T02:33:00.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>手寫發票的資料輸入是營業稅申報流程中最費時的一環，傳統人工輸入容易出錯又耗時。<br>本文將介紹，如何透過 Dify API 結合 Azure AI，把這段流程完全自動化，大幅減少人工作業時間與錯誤風險。</p><p>延續我在 <a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a> 的實作經驗，<br>在 Dify 中只要加入 LLM 節點，使用 gpt-4.1-mini 模型來辨識<strong>高鐵票</strong>，又快又準確。<br>但是當我將<strong>高鐵票</strong>改成<strong>手寫發票</strong>時，有些手寫的數字就有可能會辨識錯誤，例如<code>9</code>，有可能會被辨識成<code>7</code>，<br>這時候要怎麼辦呢?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>GPT 雖然強大，但在辨識手寫內容上仍有一定限制。<br>此時我們可以改用<a href="https://learn.microsoft.com/zh-tw/azure/ai-services/content-understanding/">Azure AI Content Understanding</a>先進行辨識，再將結果交給 LLM 處理成我們需要的 JSON 格式。以下是完整流程：</p><p>1.在 Dify 中安裝 <a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a> 插件<br>在 Dify 中，點擊<strong>外掛</strong>，點擊<strong>安裝插件</strong>，選擇<strong>Github 的</strong>，貼上<a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a>的 url，選擇<strong>版本</strong>及<strong>套餐</strong>，再按<strong>下一個</strong>即可，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/03.png" class="" title="dify-plugin-azure-ai-document-intelligence"><p>2.建立 Azure AI Content Understanding<br>建立好 Azure AI Foundry project 後，請點選<strong>My assets</strong>中的<strong>Models + endpoints</strong>，切到<strong>Service endpoints</strong> Tab，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/01.png" class="" title="Azure AI Foundry project"><p>3.設定 <a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a> 插件的授權<br>複製 Azure AI Content Understanding 的 endpoint 及 Primary Key, 設定到 <a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a> 插件的授權，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/02.png" class="" title="endpoint 及 Primary Key"><br/><img src="/2025/07/25/dify-handwritten-invoice/04.png" class="" title="set plugin lic"><p>4.設定流程<br>在 Dify 中，先使用<a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a>插件，再將它的輸入結果給下個 LLM 節點來整理我們要的資訊，最後再輸出 LLM 整理後的結果，如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/05.png" class="" title="Dify"><p>插件的 Text 設定給 LLM 節點 的 上下文參數，LLM 節點的 Prompt 如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">你是發票文字辨識專家，請從下列 OCR 文字中抽取統一發票資訊，並以 JSON 格式輸出以下欄位：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;INVOICE_NO&quot;: &quot;發票號碼，格式為開頭2碼英文字母加上8碼數字，例如 MT27721864&quot;,</span><br><span class="line">  &quot;BUYER_UNIFORM_NO&quot;: &quot;買方統一編號，通常出現在「買受人」或「統一編號」欄位後方&quot;,</span><br><span class="line">  &quot;DATE&quot;: &quot;發票日期，格式為中華民國年月日，例如 114年6月11日&quot;,</span><br><span class="line">  &quot;SUBTOTAL&quot;: &quot;銷售額小計（應稅金額），為未稅金額&quot;,</span><br><span class="line">  &quot;TAX&quot;: &quot;營業稅金額&quot;,</span><br><span class="line">  &quot;SELLER_UNIFORM_NO&quot;: &quot;賣方統一編號，通常出現在統一發票專用章附近&quot;,</span><br><span class="line">  &quot;TOTAL&quot;: &quot;總計金額，含稅&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">請注意：</span><br><span class="line">- 所有金額與統編請輸出為半形數字</span><br><span class="line">- 日期請保留中華民國格式（例如 114年6月11日）</span><br><span class="line">- 若欄位無法明確辨識，請填入空字串 &quot;&quot;</span><br><span class="line">- 僅輸出純 JSON，請勿加入說明文字</span><br><span class="line"></span><br><span class="line">以下是 OCR 辨識後的文字內容：</span><br><span class="line">&#123;&#123;上下文內容&#125;&#125;</span><br></pre></td></tr></table></figure><p>完成後，拿<a href="https://digit.make9.tw/startup/entrepreneur/%E4%B8%89%E8%81%AF%E5%BC%8F%E7%99%BC%E7%A5%A8%E6%80%8E%E9%BA%BC%E9%96%8B%EF%BC%9F%E8%A4%87%E5%AF%AB%E7%B4%99%E7%94%A8%E6%B3%95%EF%BC%9F/">三聯式發票怎麼開？複寫紙用法？手把手開給你看！</a>的圖片來解析，結果如下圖:</p><img src="/2025/07/25/dify-handwritten-invoice/06.png" class="" title="結果"><p>辨識結果準確，處理時間約 6.5 秒，且推論成本低，可滿足企業對效能與成本控管的需求，具備導入價值。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>如果是非手寫圖片，例如車票、名片等等可以用 gpt-4.1-mini 大部份都可以精準地辨識出來。<br>但遇到手寫圖片時，僅靠 GPT 模型的能力可能會有所限制，此時可透過 <a href="https://learn.microsoft.com/zh-tw/azure/ai-services/content-understanding/">Azure AI Content Understanding</a> 先進行辨識，再交由 LLM 結構化輸出資訊。</p><p>手寫發票的資料輸入是營業稅申報流程中最費時的一環，<br>本文介紹的解法，透過 Dify API 結合 Azure AI，即可將這段流程自動化，大幅減少人工作業時間與錯誤風險。</p><p>綜合來看，只要結合 <strong>Azure AI Content Understanding 插件</strong> 與 <strong>LLM 節點</strong>，就能有效完成手寫發票的文字辨識與結構化輸出，成為自動化營業稅資料建檔的強大工具。<br>而整個設定過程在 Dify 中不到 1 分鐘即可完成。</p><h3 id="加入處理-三聯式發票"><a href="#加入處理-三聯式發票" class="headerlink" title="加入處理 三聯式發票"></a>加入處理 三聯式發票</h3><p>如果要加入處理<strong>三聯式發票</strong>可以在 Prompt 中加入 補充說明 如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">補充說明：</span><br><span class="line">- 三聯式發票中，發票號碼格式相同，常出現在頂部，如「VN 02283153」</span><br><span class="line">- 賣方統編（SELLER_UNIFORM_NO）常見於公司資訊欄位，例如「統編:64145404」</span><br><span class="line">- 買方統編（BUYER_UNIFORM_NO）可能以「實費人統編」或類似詞出現</span><br><span class="line">- 日期格式可從「民國年/月/日」或「100-07-22」推導為「中華民國100年7月22日」</span><br><span class="line">- 小計（SUBTOTAL）與稅額（TAX）通常在「銷售額」、「營業稅」等標示後出現</span><br><span class="line">- 總計金額（TOTAL）可能為「發票稅計」、「合計」、「應收金額」或付款方式金額（如「現金470元」）</span><br></pre></td></tr></table></figure><p>這樣 三聯式發票 也可以很快的辨識出來，使用<a href="https://news.ltn.com.tw/news/focus/paper/527444">打了統編 可報帳抵稅&#x2F;&#x2F; 捶心肝…發票中千萬 不能領</a>的圖片來測試，如下:</p><img src="/2025/07/25/dify-handwritten-invoice/07.png" class="" title="三聯式發票"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a><br><a href="https://digit.make9.tw/startup/entrepreneur/%E4%B8%89%E8%81%AF%E5%BC%8F%E7%99%BC%E7%A5%A8%E6%80%8E%E9%BA%BC%E9%96%8B%EF%BC%9F%E8%A4%87%E5%AF%AB%E7%B4%99%E7%94%A8%E6%B3%95%EF%BC%9F/">三聯式發票怎麼開？複寫紙用法？手把手開給你看！</a><br><a href="https://learn.microsoft.com/zh-tw/azure/ai-services/content-understanding/">Azure AI Content Understanding</a><br><a href="https://github.com/fujita-h/dify-plugin-azure-ai-document-intelligence">dify-plugin-azure-ai-document-intelligence</a><br><a href="https://news.ltn.com.tw/news/focus/paper/527444">打了統編 可報帳抵稅&#x2F;&#x2F; 捶心肝…發票中千萬 不能領</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;手寫發票的資料輸入是營業稅申報流程中最費時的一環，傳統人工輸入容易出錯又耗時。&lt;br&gt;本文將介紹，如何透過 Dify API 結合 Azur</summary>
      
    
    
    
    
    <category term="發票" scheme="https://rainmakerho.github.io/tags/%E7%99%BC%E7%A5%A8/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="手寫發票" scheme="https://rainmakerho.github.io/tags/%E6%89%8B%E5%AF%AB%E7%99%BC%E7%A5%A8/"/>
    
    <category term="Azure AI" scheme="https://rainmakerho.github.io/tags/Azure-AI/"/>
    
    <category term="文件自動化" scheme="https://rainmakerho.github.io/tags/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8B%95%E5%8C%96/"/>
    
    <category term="GPT-4" scheme="https://rainmakerho.github.io/tags/GPT-4/"/>
    
    <category term="營業稅申報" scheme="https://rainmakerho.github.io/tags/%E7%87%9F%E6%A5%AD%E7%A8%85%E7%94%B3%E5%A0%B1/"/>
    
  </entry>
  
  <entry>
    <title>使用 JavaScript 整批匯出 Dify Workflows</title>
    <link href="https://rainmakerho.github.io/2025/07/01/dify-batch-export-dsl/"/>
    <id>https://rainmakerho.github.io/2025/07/01/dify-batch-export-dsl/</id>
    <published>2025-07-01T02:20:40.000Z</published>
    <updated>2025-07-01T02:53:14.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>Dify 可以在 Browser 上手動將 Workflow 匯出成 yml 檔案。<br>那麼，有辦法整批匯出嗎?</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>上網查了一下，找到了<a href="https://blog.toolman.xyz/article/309/">Batch Import and Export of Dify Workflows Using JavaScript</a>這個方式最容易。<br>直接在 Browser 的 Console 模擬手動的方式來匯出，程式如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;console_token&#x27;</span>); <span class="comment">// 從 Local Storage 取得 Token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 從目前瀏覽器的網址中動態取得網域和 tagIDs</span></span><br><span class="line"><span class="keyword">const</span> origin = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>; <span class="comment">// 取得目前頁面的網域 (如 http://localhost)</span></span><br><span class="line"><span class="keyword">const</span> urlParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 發送第一個 API 請求取得 myList</span></span><br><span class="line"><span class="keyword">const</span> apiUrl = <span class="string">`<span class="subst">$&#123;origin&#125;</span>/console/api/apps?page=1&amp;limit=100&amp;name=&amp;is_created_by_me=false`</span>;</span><br><span class="line"><span class="title function_">fetch</span>(apiUrl, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>, <span class="comment">// 包含 Token</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>(); <span class="comment">// 自動解析 JSON 為 JavaScript 物件</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> myList = data[<span class="string">&quot;data&quot;</span>]; <span class="comment">// 假設資料結構是 &#123; &quot;data&quot;: [...] &#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功取得資料:&#x27;</span>, myList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍歷 myList 並發送請求</span></span><br><span class="line">        myList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> id = item[<span class="string">&quot;id&quot;</span>]; <span class="comment">// 取得每個項目的 ID</span></span><br><span class="line">            <span class="keyword">const</span> name = item[<span class="string">&quot;name&quot;</span>]; <span class="comment">// 檔案名稱改為 item[&quot;name&quot;]</span></span><br><span class="line">            <span class="keyword">const</span> exportUrl = <span class="string">`<span class="subst">$&#123;origin&#125;</span>/console/api/apps/<span class="subst">$&#123;id&#125;</span>/export?include_secret=false`</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 發送請求到 export URL</span></span><br><span class="line">            <span class="title function_">fetch</span>(exportUrl, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Export request failed for ID <span class="subst">$&#123;id&#125;</span>: <span class="subst">$&#123;response.statusText&#125;</span>`</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">exportData</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Export 成功 - ID: <span class="subst">$&#123;id&#125;</span>`</span>, exportData);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 僅取出 exportData[&quot;data&quot;]</span></span><br><span class="line">                    <span class="keyword">const</span> dataToSave = exportData[<span class="string">&quot;data&quot;</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 將 JSON 物件轉成非雙引號格式的文字，去掉最外層的引號</span></span><br><span class="line">                    <span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(dataToSave, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">                        .<span class="title function_">replace</span>(<span class="regexp">/\\n/g</span>, <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 替換 \n 為實際換行符</span></span><br><span class="line">                        .<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>); <span class="comment">// 去掉最外層的雙引號</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 將資料儲存到本地檔案</span></span><br><span class="line">                    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([jsonString], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/x-yaml&#x27;</span> &#125;);</span><br><span class="line">                    <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>.yml`</span>; <span class="comment">// 使用 .yaml 作為檔案名稱</span></span><br><span class="line">                    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                    link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">                    link.<span class="property">download</span> = fileName;</span><br><span class="line">                    link.<span class="title function_">click</span>();</span><br><span class="line">                    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>); <span class="comment">// 清理 URL 物件</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Export 失敗 - ID: <span class="subst">$&#123;id&#125;</span>`</span>, error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;發送 API 請求時發生錯誤:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>目前 Dify 1.5 版本中，並沒有 <code>tagIDs</code> 的參數，所以我將它從 url 中移除，並將<strong>limit</strong>設定為<strong>100</strong>，<br>所以目前每頁最多可以匯出 100 個workflow。<br>再加上<code>&amp;is_created_by_me=false</code>參數。</p><h5 id="整批匯出-Workflows"><a href="#整批匯出-Workflows" class="headerlink" title="整批匯出 Workflows"></a>整批匯出 Workflows</h5><p>開啟 Dify 網頁，登入後，按 F12 打開開發者工具，點到 主控台 ，然後將程式碼貼上去就可以了，如下圖所示:</p><img src="/2025/07/01/dify-batch-export-dsl/01.png" class="" title="console"><ul><li>註: 如果發生 401 的錯誤，請重新整理網頁後，再將 Javascript 貼上去執行一次就可以了。</li><li>註: 如果要匯出下一頁的資料，請修改 url 中 <strong>page</strong> 的值，將它改成 <strong>2</strong>。</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://blog.toolman.xyz/article/309/">Batch Import and Export of Dify Workflows Using JavaScript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;Dify 可以在 Browser 上手動將 Workflow 匯出成 yml 檔案。&lt;br&gt;那麼，有辦法整批匯出嗎?&lt;/p&gt;
&lt;h3 id=</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://rainmakerho.github.io/tags/Javascript/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="Batch Export" scheme="https://rainmakerho.github.io/tags/Batch-Export/"/>
    
    <category term="Workflow" scheme="https://rainmakerho.github.io/tags/Workflow/"/>
    
    <category term="DSL" scheme="https://rainmakerho.github.io/tags/DSL/"/>
    
    <category term="App" scheme="https://rainmakerho.github.io/tags/App/"/>
    
    <category term="yml" scheme="https://rainmakerho.github.io/tags/yml/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Roo-Code 和 Kilocode 中設定 Azure OpenAI（AOAI）</title>
    <link href="https://rainmakerho.github.io/2025/06/30/setup-azure-openai-roo-code-kilocode/"/>
    <id>https://rainmakerho.github.io/2025/06/30/setup-azure-openai-roo-code-kilocode/</id>
    <published>2025-06-30T09:50:08.000Z</published>
    <updated>2025-07-01T00:44:18.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>在 VSCode 中使用 Roo-Code 或 Kilocode 的 AI 助理時，<br>可以讓我們設定各種 LLM API Provider，<br>但裡面却没有提供 Azure OpenAI 的設定方式。<br>那麼，如果使用 Azure OpenAI ，要怎麼設定呢？</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>使用 Azure OpenAI 的 API Provider 設定如下：</p><ol><li>API Provider 請選擇 <strong>OpenAI Compatible</strong></li><li>Base URL 請填写 Azure OpenAI 的完整 URL，例如 <code>https://你的.openai.azure.com/openai/deployments/你的部署名稱/chat/completions?api-version=2025-01-01-preview</code></li><li>API Key 填入 AOAI 的 API Key</li><li>Model 請填入使用的模型名稱，例如 gpt-4.1</li><li>勾選<strong>Use Azure</strong></li></ol><p>如下圖所示:</p><img src="/2025/06/30/setup-azure-openai-roo-code-kilocode/01.png" class="" title="API Provider"><p>之後就可以開始使用 <a href="https://github.com/RooCodeInc/Roo-Code">Roo-Code</a> &#x2F; <a href="https://github.com/Kilo-Org/kilocode">Kilocode</a> AI 助手了。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/RooCodeInc/Roo-Code">Roo-Code</a><br><a href="https://github.com/Kilo-Org/kilocode">Kilocode</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;在 VSCode 中使用 Roo-Code 或 Kilocode 的 AI 助理時，&lt;br&gt;可以讓我們設定各種 LLM API Provid</summary>
      
    
    
    
    
    <category term="Azure" scheme="https://rainmakerho.github.io/tags/Azure/"/>
    
    <category term="VSCode" scheme="https://rainmakerho.github.io/tags/VSCode/"/>
    
    <category term="OpenAI" scheme="https://rainmakerho.github.io/tags/OpenAI/"/>
    
    <category term="AOAI" scheme="https://rainmakerho.github.io/tags/AOAI/"/>
    
    <category term="Roo-Code" scheme="https://rainmakerho.github.io/tags/Roo-Code/"/>
    
    <category term="Kilocode" scheme="https://rainmakerho.github.io/tags/Kilocode/"/>
    
    <category term="API Provider" scheme="https://rainmakerho.github.io/tags/API-Provider/"/>
    
  </entry>
  
  <entry>
    <title>用 Dify Agent 智能辨識高鐵票，分批上傳後再匯出 Excel</title>
    <link href="https://rainmakerho.github.io/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/"/>
    <id>https://rainmakerho.github.io/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/</id>
    <published>2025-06-27T02:29:29.000Z</published>
    <updated>2025-06-27T04:04:00.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a>一篇中，<br>我們在 Dify 建立<strong>聊天流</strong>來辨識高鐵票，一次對話處理一個，這種方式適合固定的作業流程，例如後續還要呼叫費用系統 API 等情境。</p><p>如果我有 20 幾圖，而 Dify <strong>聊天流</strong>最多只能一次上傳<strong>10</strong>張圖片，<br>那麼，可以多次上傳圖片進行辨識，最後再匯出 Excel 嗎？</p><p>像這種需要根據使用者要求執行對應任務的情境，可以改用 Dify 的 Agent + Tools 來實現，<br>以下就來實作這個多次上傳圖片進行辨識，最後再匯出 Excel 檔案的流程。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="建立-JSON-匯出-Excel-的工作流"><a href="#建立-JSON-匯出-Excel-的工作流" class="headerlink" title="建立 JSON 匯出 Excel 的工作流"></a>建立 JSON 匯出 Excel 的工作流</h4><p>1.在開始節點中加入 2 個字串型態的輸入字段，對應 Json2ExcelTool 的參數(json, filename)，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/01.png" class="" title="加入2個字串型態的輸入字段"><p>2.在 Json2ExcelTool 節點，將這 2 個輸入字段對應到 Json2ExcelTool 的輸入變量，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/02.png" class="" title="字段對應"><p>3.結束節點增加<code>result</code>輸出變量，值來自 Json2ExcelTool 節點的輸出變量 files，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/03.png" class="" title="輸出變量"><p>4.發佈為工具<br>按下「發佈」-&gt;「發佈更新」後，</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/04.png" class="" title="發佈更新"><p>再點「發佈為工具」，設定工具名稱及描述，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/05.png" class="" title="設定工具名稱及描述"><ul><li>註: 本來想直接使用 <a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a> ，但無法正確顯示檔案，因此改用工作流來實現。</li></ul><h4 id="建立-Agent"><a href="#建立-Agent" class="headerlink" title="建立 Agent"></a>建立 Agent</h4><p>1.建立 高鐵票 Agent<br>選擇 Agent ，並輸入名稱，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/06.png" class="" title="建立 Agent"><p>2.設定模型<br>這裡我們選擇<strong>GPT4.1-mini</strong></p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/07.png" class="" title="設定模型"><p>3.啟用<strong>視覺</strong>功能</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/08.png" class="" title="啟用視覺"><p>4.設定工具<br>加入前面建立的[JSON 匯出 Excel 的工作流]工具，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/09.png" class="" title="建立 Agent"><p>5.設定提示詞</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">你是一個專業的「高鐵票辨識小幫手」，負責從上傳的圖片中辨識所有出現的台灣高鐵票券，並支援票券資訊的累積、查詢與匯出。請依照以下指示執行：</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 功能說明</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**累積辨識結果**</span>  </span><br><span class="line">   每當使用者上傳新的高鐵票圖片並完成辨識後，請將本次辨識到的所有票券資訊（JSON 陣列）加入到現有的票券記錄清單中，並保留所有已上傳的票券資料，直到使用者明確要求清除或結束。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**查詢累積結果**</span>  </span><br><span class="line">   當使用者要求檢視或查詢時，請回傳所有已辨識票券的累積資訊（JSON 陣列）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**合併匯出 Excel**</span>  </span><br><span class="line">   當使用者要求「匯出 Excel」時，請將每次辨識所得的 JSON 陣列全部合併成一個完整陣列，然後將此陣列以「標準 JSON 陣列字串」傳遞給 JSON 轉 Excel 工具（json 欄位），產生 Excel 檔案，並在工具產生 Excel 檔案後，提供下載連結。</span><br><span class="line"><span class="bullet">   -</span> 請確保 json<span class="emphasis">_str 為標準 JSON 陣列格式，例如：</span></span><br><span class="line"><span class="emphasis">     [</span></span><br><span class="line"><span class="emphasis">     &#123;&quot;票面號碼&quot;:&quot;123&quot;,&quot;乘車日期&quot;:&quot;2024/07/01&quot;, ...&#125;,</span></span><br><span class="line"><span class="emphasis">     &#123;&quot;票面號碼&quot;:&quot;456&quot;,&quot;乘車日期&quot;:&quot;2024/07/02&quot;, ...&#125;</span></span><br><span class="line"><span class="emphasis">     ]</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 辨識規則</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 一張圖片可能包含多張高鐵票，請你針對每一張票獨立辨識、解析。</span></span><br><span class="line"><span class="emphasis">- 對於每張高鐵票，請抽取以下資訊（如有缺漏請以空值回傳）：</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">  - 票面號碼（如有）</span></span><br><span class="line"><span class="emphasis">  - 乘車日期</span></span><br><span class="line"><span class="emphasis">  - 乘車時間</span></span><br><span class="line"><span class="emphasis">  - 發車站</span></span><br><span class="line"><span class="emphasis">  - 抵達站</span></span><br><span class="line"><span class="emphasis">  - 車廂與座位（如有）</span></span><br><span class="line"><span class="emphasis">  - 票種（如標準車廂/商務車廂/自由座/敬老/孩童/早鳥等）</span></span><br><span class="line"><span class="emphasis">  - 價格</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- 請將所有辨識到的高鐵票資訊以陣列結構回傳（JSON 格式），每個物件對應一張票。</span></span><br><span class="line"><span class="emphasis">- 回傳內容請勿發表多餘評論，只需給出辨識到的票券結構化資訊。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 範例輸出格式</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">[</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">&quot;票面號碼&quot;: &quot;123456789&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車時間&quot;: &quot;13:20&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;發車站&quot;: &quot;台北&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;抵達站&quot;: &quot;左營&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;車廂&quot;: &quot;5&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;座位&quot;: &quot;12A&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;票種&quot;: &quot;標準車廂&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;價格&quot;: &quot;1490&quot;</span></span><br><span class="line"><span class="emphasis">&#125;,</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">&quot;票面號碼&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;乘車時間&quot;: &quot;13:20&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;發車站&quot;: &quot;台中&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;抵達站&quot;: &quot;台南&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;車廂&quot;: &quot;3&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;座位&quot;: &quot;8D&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;票種&quot;: &quot;自由座&quot;,</span></span><br><span class="line"><span class="emphasis">&quot;價格&quot;: &quot;790&quot;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">]</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">若無高鐵票：</span></span><br><span class="line"><span class="emphasis">[]</span></span><br></pre></td></tr></table></figure><h4 id="進行測試"><a href="#進行測試" class="headerlink" title="進行測試"></a>進行測試</h4><p>1.多次上傳圖片進行辨識，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/10.png" class="" title="多次上傳圖片"><p>2.將所有辨識結果匯出成 Excel，如下圖所示:</p><img src="/2025/06/27/dify-ai-hsr-ticket-ocr-batch-upload-export-excel/11.png" class="" title="多次上傳圖片"><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>透過 Dify Agent + Tools 的架構，我們可以輕鬆實現高鐵票多次上傳辨識、自動累積所有結果，並在需要時匯出 Excel。<br>這種設計大幅提升了大量票據影像處理的彈性與效率，不但解決了 Dify 內建聊天流一次只能處理有限張圖片的限制，也讓資料整合與後續應用（如報帳、統計）變得更加自動化。</p><p>本實作展示了如何利用 Dify 的工作流與自訂工具串接，讓 AI 具備「資料多批整合」、「結構化欄位抽取」、「彈性匯出」等高階能力。<br>對於有批次票據處理需求、或想要將 AI 導入實際行政場景的開發者與企業，這是一個低門檻且高度擴充的解決方案。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/">使用 Dify 自動辨識高鐵票</a><br><a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail</summary>
      
    
    
    
    
    <category term="Excel" scheme="https://rainmakerho.github.io/tags/Excel/"/>
    
    <category term="OCR" scheme="https://rainmakerho.github.io/tags/OCR/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="台灣高鐵票" scheme="https://rainmakerho.github.io/tags/%E5%8F%B0%E7%81%A3%E9%AB%98%E9%90%B5%E7%A5%A8/"/>
    
    <category term="AI 資料抽取" scheme="https://rainmakerho.github.io/tags/AI-%E8%B3%87%E6%96%99%E6%8A%BD%E5%8F%96/"/>
    
    <category term="智慧文件辨識" scheme="https://rainmakerho.github.io/tags/%E6%99%BA%E6%85%A7%E6%96%87%E4%BB%B6%E8%BE%A8%E8%AD%98/"/>
    
    <category term="票據數位化" scheme="https://rainmakerho.github.io/tags/%E7%A5%A8%E6%93%9A%E6%95%B8%E4%BD%8D%E5%8C%96/"/>
    
    <category term="文件自動辨識" scheme="https://rainmakerho.github.io/tags/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8B%95%E8%BE%A8%E8%AD%98/"/>
    
    <category term="高鐵票" scheme="https://rainmakerho.github.io/tags/%E9%AB%98%E9%90%B5%E7%A5%A8/"/>
    
    <category term="Agent" scheme="https://rainmakerho.github.io/tags/Agent/"/>
    
    <category term="Excel Plugin" scheme="https://rainmakerho.github.io/tags/Excel-Plugin/"/>
    
  </entry>
  
  <entry>
    <title>使用 Dify 自動辨識非手寫圖片票據超 Easy：以高鐵票為例</title>
    <link href="https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/"/>
    <id>https://rainmakerho.github.io/2025/06/23/dify-high-speed-rail-ticket-ocr/</id>
    <published>2025-06-23T00:02:02.000Z</published>
    <updated>2025-08-07T02:42:50.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>現在一些<strong>非手寫</strong>的車票、收據、名片等圖片，透過 Multimodal Large Language Models (MLLMs) 來擷取資料效果都還不錯。<br>以下將介紹使用 Dify 搭配 Azure OpenAI GPT-4.1-mini 來讓使用者上傳圖片，不管圖片中是一張還是多張高鐵票，不管是新式或是舊式的高鐵票都可以<strong>輕鬆且正確地擷取高鐵票資訊</strong>。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>1.建立<strong>聊天流</strong> App</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/01.png" class="" title="create app"><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/07.png" class="" title="default workflow"><p>預設的流程就是「開始」-&gt;「LLM」-&gt;「直接回覆」</p><p>2.設定<strong>LLM</strong><br>2.1.設定 LLM 節點的模型使用<strong>gpt-4.1-mini</strong></p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/02.png" class="" title="gpt-4.1-mini"><p>你會發現 gpt-4.1-mini 後方有 <strong>chat</strong> 與<strong>眼睛</strong>圖示，代表該模型支援文字及圖片輸入（有眼睛圖示即表示支援圖片辨識功能）</p><p>2.2.啟用<strong>視覺</strong>功能</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/03.png" class="" title="視覺"><p>預設會帶入<strong>sys.files</strong>，這樣即可將使用者上傳的圖片自動傳遞給模型辨識。</p><p>2.3.設定 System Prompt</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/04.png" class="" title="system-prompt"><p>內容如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">你是一個專業的「高鐵票辨識小幫手」，負責從上傳的圖片中辨識所有出現的台灣高鐵票券。請依照以下指示執行：</span><br><span class="line">一張圖片可能包含多張高鐵票，請你針對每一張票獨立辨識、解析。</span><br><span class="line">對於每張高鐵票，請抽取以下資訊（如有缺漏請以空值回傳）：</span><br><span class="line">票面號碼（如有）</span><br><span class="line">乘車日期</span><br><span class="line">乘車時間</span><br><span class="line">發車站</span><br><span class="line">抵達站</span><br><span class="line">車廂與座位（如有）</span><br><span class="line">票種（如標準車廂/商務車廂/自由座/敬老/孩童/早鳥等）</span><br><span class="line">價格</span><br><span class="line"></span><br><span class="line">請將所有辨識到的高鐵票資訊以陣列結構回傳（JSON 格式），每個物件對應一張票。</span><br><span class="line"></span><br><span class="line">回傳內容僅只需給出辨識到的票券結構化資訊，請勿多餘評論。</span><br><span class="line">【範例輸出格式】</span><br><span class="line">`</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;票面號碼&quot;: &quot;123456789&quot;,</span><br><span class="line">    &quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span><br><span class="line">    &quot;乘車時間&quot;: &quot;13:20&quot;,</span><br><span class="line">    &quot;發車站&quot;: &quot;台北&quot;,</span><br><span class="line">    &quot;抵達站&quot;: &quot;左營&quot;,</span><br><span class="line">    &quot;車廂&quot;: &quot;5&quot;,</span><br><span class="line">    &quot;座位&quot;: &quot;12A&quot;,</span><br><span class="line">    &quot;票種&quot;: &quot;標準車廂&quot;,</span><br><span class="line">    &quot;價格&quot;: &quot;1490&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;票面號碼&quot;: &quot;&quot;,</span><br><span class="line">    &quot;乘車日期&quot;: &quot;2024-07-01&quot;,</span><br><span class="line">    &quot;乘車時間&quot;: &quot;13:20&quot;,</span><br><span class="line">    &quot;發車站&quot;: &quot;台中&quot;,</span><br><span class="line">    &quot;抵達站&quot;: &quot;台南&quot;,</span><br><span class="line">    &quot;車廂&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;座位&quot;: &quot;8D&quot;,</span><br><span class="line">    &quot;票種&quot;: &quot;自由座&quot;,</span><br><span class="line">    &quot;價格&quot;: &quot;790&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">`</span><br><span class="line">若無高鐵票：</span><br><span class="line">`[]`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.進行測試<br>使用單張車票<a href="https://www.bnext.com.tw/article/61931/tw-high-speed-rail-and-travel-platform">高鐵攜手 KKday、KLOOK 推「國旅聯票」，搭行程就有 85 折高鐵票！一次看懂怎麼買</a>進行測試，結果如下圖：</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/05.png" class="" title="single"><p>使用<a href="https://news.ltn.com.tw/news/life/breakingnews/4890325">高鐵車票變大了！新版 QR Code 紙票今起 3 站先販售</a>新、舊車票進行測試，結果如下圖：</p><img src="/2025/06/23/dify-high-speed-rail-ticket-ocr/06.png" class="" title="new and old"><p>測試結果顯示，辨識正確率達 100%。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>使用 Dify 搭配 gpt-4.1-mini，可以在<strong>不到 3 分鐘</strong>內建立高鐵票自動辨識流程，大幅提升票據數位化的效率與準確率。<br>此流程不僅適用於台灣高鐵票，也能根據需求擴展至台鐵票、發票、收據等各類型票據，實現資料自動化歸檔與管理。</p><p>與傳統人工輸入或一般 OCR 工具相比，本方案更省時、省力，並能結合 API 或 Excel 外掛(<a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a>)，靈活整合到現有的報帳或行政系統中。<br>無論是技術人員還是業務、行政同仁，都能輕鬆上手並根據實際情境調整設定。</p><p>未來若能進一步與內部資料流、RPA 流程自動化結合，將有助於打造更智慧的辦公環境。</p><ul><li>提醒：極少數非標準票券或圖片模糊時，建議仍保留人工複核流程，以確保辨識品質。</li><li>在圖片辨識上面，目前使用 <strong>gpt-4.1-mini</strong> 比 <strong>gpt-4.1</strong> 還好</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/rainmakerho/excel-dify-plugin">excel-dify-plugin</a><br><a href="https://www.bnext.com.tw/article/61931/tw-high-speed-rail-and-travel-platform">高鐵攜手 KKday、KLOOK 推「國旅聯票」，搭行程就有 85 折高鐵票！一次看懂怎麼買</a><br><a href="https://news.ltn.com.tw/news/life/breakingnews/4890325">高鐵車票變大了！新版 QR Code 紙票今起 3 站先販售</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;現在一些&lt;strong&gt;非手寫&lt;/strong&gt;的車票、收據、名片等圖片，透過 Multimodal Large Language Mode</summary>
      
    
    
    
    
    <category term="OCR" scheme="https://rainmakerho.github.io/tags/OCR/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="高鐵票辨識" scheme="https://rainmakerho.github.io/tags/%E9%AB%98%E9%90%B5%E7%A5%A8%E8%BE%A8%E8%AD%98/"/>
    
    <category term="AI 票據處理" scheme="https://rainmakerho.github.io/tags/AI-%E7%A5%A8%E6%93%9A%E8%99%95%E7%90%86/"/>
    
    <category term="自動化票據掃描" scheme="https://rainmakerho.github.io/tags/%E8%87%AA%E5%8B%95%E5%8C%96%E7%A5%A8%E6%93%9A%E6%8E%83%E6%8F%8F/"/>
    
    <category term="無程式碼平台" scheme="https://rainmakerho.github.io/tags/%E7%84%A1%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="台灣高鐵票" scheme="https://rainmakerho.github.io/tags/%E5%8F%B0%E7%81%A3%E9%AB%98%E9%90%B5%E7%A5%A8/"/>
    
    <category term="AI 資料抽取" scheme="https://rainmakerho.github.io/tags/AI-%E8%B3%87%E6%96%99%E6%8A%BD%E5%8F%96/"/>
    
    <category term="智慧文件辨識" scheme="https://rainmakerho.github.io/tags/%E6%99%BA%E6%85%A7%E6%96%87%E4%BB%B6%E8%BE%A8%E8%AD%98/"/>
    
    <category term="票據數位化" scheme="https://rainmakerho.github.io/tags/%E7%A5%A8%E6%93%9A%E6%95%B8%E4%BD%8D%E5%8C%96/"/>
    
    <category term="文件自動辨識" scheme="https://rainmakerho.github.io/tags/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8B%95%E8%BE%A8%E8%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Dify 和 Python 來建立 Plugin，產生訊息及檔案</title>
    <link href="https://rainmakerho.github.io/2025/06/08/dify-python-plugin-tutorial/"/>
    <id>https://rainmakerho.github.io/2025/06/08/dify-python-plugin-tutorial/</id>
    <published>2025-06-08T03:10:36.000Z</published>
    <updated>2025-06-09T08:59:26.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://dify.ai/">Dify</a> 是非常受歡迎的 LLM 應用平台之一。<br>本篇將依照 Dify 官方文件「<a href="https://docs.dify.ai/plugin-dev-zh/0211-getting-started-dify-tool">Dify 插件开发：Hello World 指南</a>」內容，帶大家<strong>手把手寫出一個 Plugin</strong>，並實作讓 Plugin 產生 text、json 及 files 格式的回應！</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><h4 id="1-環境準備"><a href="#1-環境準備" class="headerlink" title="1.環境準備"></a>1.環境準備</h4><ul><li>需要 Python 3.12 或更高的版本，請執行 <code>python3 --version</code> 來檢查</li><li>到<a href="https://github.com/langgenius/dify-plugin-daemon/releases">dify-plugin-daemon</a> 依 OS 環境來下載 Dify Plugin CLI 執行檔<ul><li>macOS&#x2F;Linux 要設定允許執行權限 <code>chmod +x &#123;檔案名&#125;</code></li><li>把下載的執行檔，改名成 <strong>dify</strong></li></ul></li></ul><h4 id="2-建立-Plugin"><a href="#2-建立-Plugin" class="headerlink" title="2.建立 Plugin"></a>2.建立 Plugin</h4><p>(1).開啟命令視窗，執行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dify plugin init</span><br></pre></td></tr></table></figure><p>設定名稱為<strong>echo</strong></p><img src="/2025/06/08/dify-python-plugin-tutorial/01.png" class="" title="plugin init"><p>語言選擇<strong>python</strong><br>template 選擇<strong>tool</strong><br>權限的話，按<strong>Tab</strong>來啟用<strong>Tools</strong></p><img src="/2025/06/08/dify-python-plugin-tutorial/02.png" class="" title="Permissions"><p>Minimal Dify version 如果沒有特別需求，這裡可以直接按 Enter 跳過</p><p>這樣 Dify Plugin CLI 就會為我們建立一個 echo 目錄。接著，使用 VS Code 開啟 echo 目錄。</p><p>(2).建立 Python 虛擬環境<br>在 VS Code 中，開啟 Terminal (在 echo 目錄)，輸入 <code>python3 -m venv venv</code></p><p>(3).啟動虛擬環境</p><ul><li>macOS &#x2F; Linux:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><ul><li>Windows (cmd.exe):</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate.bat</span><br></pre></td></tr></table></figure><p>(4).安裝需要的套件<br>範本會將預設需要的套件寫在<strong>requirements.txt</strong>中，未來如果有需要其他套件，再自行加入。<br><code>pip install -r requirements.txt</code></p><p>(5).Plugin Tool 說明<br><code>echo.py</code>預設會直接回傳 JSON 訊息(使用<code>self.create_json_message</code>方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EchoTool</span>(<span class="title class_ inherited__">Tool</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_invoke</span>(<span class="params">self, tool_parameters: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:</span><br><span class="line">        <span class="keyword">yield</span> self.create_json_message(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><code>echo.yaml</code>定義這個工具的相關資訊，預設有一個<code>query</code>的必填參數</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">label:</span></span><br><span class="line">      <span class="attr">en_US:</span> <span class="string">Query</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">zh_Hans:</span> <span class="string">查询语句</span></span><br><span class="line">      <span class="attr">pt_BR:</span> <span class="string">Query</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">human_description:</span></span><br><span class="line">      <span class="attr">en_US:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">      <span class="attr">zh_Hans:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">      <span class="attr">pt_BR:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">    <span class="attr">llm_description:</span> <span class="string">echo</span> <span class="string">input</span></span><br><span class="line">    <span class="attr">form:</span> <span class="string">llm</span></span><br></pre></td></tr></table></figure><p>(6).設定 Debug 環境<br>(6.1).將檔案<code>.env.example</code>複制為<code>.env</code><br>(6.2).連到 Dify 系統，點選<strong>外掛</strong> (<code>https://yourdifyurl/plugins</code>)， 點擊<strong>蟲蟲</strong>圖示的按鈕<br>(6.3).將<strong>URL</strong>與<strong>Key</strong>的值貼到<code>.env</code>中的<strong>REMOTE_INSTALL_URL</strong>與<strong>REMOTE_INSTALL_KEY</strong>中</p><img src="/2025/06/08/dify-python-plugin-tutorial/03.png" class="" title="Copy Debug Plugin Info"><blockquote><p>註:如果 Dify URL 與 Plugin Debug URL 不同，可以調整<strong>EXPOSE_PLUGIN_DEBUGGING_HOST</strong>環境變數</p></blockquote><p>(7).Debug 安裝 Plugin<br><code>.env</code>設定完成後，在 Terminal 視窗中輸入<code>python -m main</code>按下 Enter，這時會出現以下的錯誤，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;venv/lib/python3.13/site-packages/dify_plugin/core/plugin_registration.py&quot;, line 106, in _load_plugin_configuration</span><br><span class="line">    self.configuration = PluginConfiguration(**file)</span><br><span class="line">                         ~~~~~~~~~~~~~~~~~~~^^^^^^^^</span><br><span class="line">  File &quot;venv/lib/python3.13/site-packages/pydantic/main.py&quot;, line 253, in __init__</span><br><span class="line">    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)</span><br><span class="line">pydantic_core._pydantic_core.ValidationError: 1 validation error for PluginConfiguration</span><br><span class="line">resource.permission.storage.size</span><br><span class="line">  Input should be greater than or equal to 1024 [type=greater_than_equal, input_value=0, input_type=int]</span><br><span class="line">    For further information visit https://errors.pydantic.dev/2.11/v/greater_than_equal</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要就是因為<strong>manifest.yaml</strong>中的<strong>storage</strong>它的<strong>size</strong>值為<strong>0</strong>所致，將<strong>size</strong>的值改成<strong>1024</strong>，再執行一次<code>python -m main</code>，如果出現以下訊息表示 Plugin 已經裝到 Dify Server 上了</p><blockquote><p>{“event”: “log”, “data”: {“level”: “INFO”, “message”: “Installed tool: echo”, “timestamp”: 1749434984.628976}}<br>INFO:dify_plugin.plugin:Installed tool: echo</p></blockquote><p>重整 Browser 頁面，可以發現 echo 已被安裝上去，下面有個<strong>DEBUGGING PLUGIN</strong>，如下圖:</p><img src="/2025/06/08/dify-python-plugin-tutorial/04.png" class="" title="DEBUGGING PLUGIN"><p>(8).Debug Plugin<br>到 Workflow 中，加入 echo plugin 這個 tool 並進行測試，如下圖:</p><img src="/2025/06/08/dify-python-plugin-tutorial/05.png" class="" title="Add Echo Tool"><p><code>query</code>參數給<code>abc</code>，會輸出以下的 json 內容，</p><img src="/2025/06/08/dify-python-plugin-tutorial/06.png" class="" title="Run Echo Tool"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;json&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>所以工具可以輸出 text, files &amp; json 的內容(目前工具僅回傳 json 欄位)。</p><p>到這裡已經完成從建立 Plugin 到部署到 Dify Server 的 Debug，如果 Debug 沒有問題的話就可以進行打包的工作。</p><p>(9).打包 Plugin<br>Control + C，結束 Debug，切到上層目錄，透過<code>dify plugin package</code>來打包 Plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">dify plugin package ./echo</span><br></pre></td></tr></table></figure><p>它會產生<strong>echo.difypkg</strong></p><p>(10).安裝外掛程式<br>連到 Dify 系統，點選<strong>外掛</strong>(<code>https://yourdifyurl/plugins</code>)，點擊<strong>安裝外掛程式</strong>圖示的 Button，選取<strong>本地包檔</strong>，然後選擇<strong>echo.difypkg</strong>來安裝 Plugin</p><img src="/2025/06/08/dify-python-plugin-tutorial/07.png" class="" title="Upload Plugin"><p>如果有<strong>PluginDaemonBadRequestError: plugin verification has been enabled, and the plugin you want to install has a bad signature</strong>的錯誤，解法請參考<a href="https://docs.dify.ai/plugin-dev-zh/0312-third-party-signature-verification">第三方签名验证</a></p><h4 id="3-讓-Plugin-支援多格式回傳（Text、JSON、File）"><a href="#3-讓-Plugin-支援多格式回傳（Text、JSON、File）" class="headerlink" title="3.讓 Plugin 支援多格式回傳（Text、JSON、File）"></a>3.讓 Plugin 支援多格式回傳（Text、JSON、File）</h4><p>學會基本 Plugin 實作後，我們可以擴展功能，讓 Plugin 能同時回傳 text、json、file 三種格式。<br>修改 <code>tools/echo.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Generator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dify_plugin <span class="keyword">import</span> Tool</span><br><span class="line"><span class="keyword">from</span> dify_plugin.entities.tool <span class="keyword">import</span> ToolInvokeMessage</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EchoTool</span>(<span class="title class_ inherited__">Tool</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_invoke</span>(<span class="params">self, tool_parameters: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; Generator[ToolInvokeMessage]:</span><br><span class="line">        query_str = tool_parameters[<span class="string">&#x27;query&#x27;</span>]</span><br><span class="line">        echo_str = <span class="string">f&quot;Echo: <span class="subst">&#123;query_str&#125;</span>&quot;</span></span><br><span class="line">        echo_barray = echo_str.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> self.create_json_message(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: echo_str</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">yield</span> self.create_text_message(echo_str)</span><br><span class="line">        <span class="keyword">yield</span> self.create_blob_message(</span><br><span class="line">                    blob=echo_barray,</span><br><span class="line">                    meta=&#123;</span><br><span class="line">                        <span class="string">&quot;mime_type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;echo.txt&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><ul><li><code>create_json_message</code> 回傳 json</li><li><code>create_text_message</code> 回傳文字</li><li><code>create_blob_message</code> 回傳檔案</li></ul><p>完成後，在 echo 目錄中的 Terminal 視窗中輸入<code>python -m main</code>來進行 Debug 安裝。<br>到 Dify 中建立<strong>聊天流</strong>(開始-&gt;echo-&gt;直接回覆)來進行測試，<br>將 sys.query 給 echo Tool 的 query</p><img src="/2025/06/08/dify-python-plugin-tutorial/08.png" class="" title="Flow - Echo"><p>直接回覆的回覆內容分別輸出 text, json 及 file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Text:</span><br><span class="line">&#123;&#123;#1749446615792.text#&#125;&#125;</span><br><span class="line">=================</span><br><span class="line">Json:</span><br><span class="line">&#123;&#123;#1749446615792.json#&#125;&#125;</span><br><span class="line">=================</span><br><span class="line">Files:</span><br><span class="line">&#123;&#123;#1749446615792.files#&#125;&#125;</span><br><span class="line">=================</span><br></pre></td></tr></table></figure><img src="/2025/06/08/dify-python-plugin-tutorial/09.png" class="" title="Flow - 直接回覆"><blockquote><p>json 及 files 請先 copy Text 出來後，將 text 改成 json or files ，例如 <code>&#123;&#123;#1749446615792.json#&#125;&#125;</code></p></blockquote><p>測試後在聊天流設定（開始 → echo → 直接回覆），可以看到三種格式的回覆：</p><img src="/2025/06/08/dify-python-plugin-tutorial/10.png" class="" title="Flow - 測試"><p>完成後，離開虛擬環境可執行 <code>deactivate</code>。</p><h4 id="4-進階應用：Excel-與-JSON-轉換-Plugin"><a href="#4-進階應用：Excel-與-JSON-轉換-Plugin" class="headerlink" title="4.進階應用：Excel 與 JSON 轉換 Plugin"></a>4.進階應用：Excel 與 JSON 轉換 Plugin</h4><p>有了前述多格式回傳的基礎，我們可以進一步設計更實用的 Plugin。<br>例如，想將 JSON 字串轉為 Excel 檔案，只需用 <strong>pandas</strong> 讀取 json 並轉出 Excel，即可回傳成 file 給 Dify 聊天流。</p><p>參考：<a href="https://github.com/qiangxinglin/excel-dify-plugin">Dify Json to Excel Plugin</a></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>本篇從開發環境準備、Plugin 建立、Debug 測試、打包安裝到如何擴展回傳內容（text、json、file），完整展示了如何用 Dify 與 Python 實作一個專屬 Plugin。對於想要讓自家 LLM 具備更多自訂功能的工程師來說，Dify Plugin 是一個高擴展性且門檻低的選擇。</p><p>你可以從簡單的 Echo Tool 開始練習，逐步延伸出如 Json&#x2F;Excel 轉換等更實用的插件。<br>只要配合官方的 Plugin CLI 與範本，無論是測試或實際上線都非常高效穩定。如果遇到簽章驗證等問題，也能參考文件快速排除。<br>未來如果有更多串接第三方 API、資料轉換或自動化需求，都能以 Plugin 方式靈活擴展 Dify 的應用！</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.dify.ai/plugin-dev-zh/0211-getting-started-dify-tool">Dify 插件开发：Hello World 指南</a><br><a href="https://github.com/qiangxinglin/excel-dify-plugin">Dify Json to Excel Plugin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://dify.ai/&quot;&gt;Dify&lt;/a&gt; 是非常受歡迎的 LLM 應用平台之一。&lt;br&gt;本篇將依照 Dify </summary>
      
    
    
    
    
    <category term="Excel" scheme="https://rainmakerho.github.io/tags/Excel/"/>
    
    <category term="File" scheme="https://rainmakerho.github.io/tags/File/"/>
    
    <category term="Json" scheme="https://rainmakerho.github.io/tags/Json/"/>
    
    <category term="Dify" scheme="https://rainmakerho.github.io/tags/Dify/"/>
    
    <category term="Plugin" scheme="https://rainmakerho.github.io/tags/Plugin/"/>
    
    <category term="開發教學" scheme="https://rainmakerho.github.io/tags/%E9%96%8B%E7%99%BC%E6%95%99%E5%AD%B8/"/>
    
    <category term="實作" scheme="https://rainmakerho.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Copilot 串接 Ollama：地端自託管 LLM，守護企業程式碼資安的 AI 補全解決方案</title>
    <link href="https://rainmakerho.github.io/2025/05/30/github-copilot-ollama-local-llm/"/>
    <id>https://rainmakerho.github.io/2025/05/30/github-copilot-ollama-local-llm/</id>
    <published>2025-05-30T13:43:32.000Z</published>
    <updated>2025-06-02T00:51:54.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>AI 編程助手（如 GitHub Copilot、ChatGPT）已成為現代開發團隊必備工具。<br>但對於企業來說，最擔心的就是原始碼外洩：資料送到雲端 AI 推理時，萬一被第三方取得，就可能造成商業機密或客戶資料風險。</p><p>傳統 Copilot 只能連接雲端 LLM，所以之前筆者找到 <a href="https://codegeex.cn/">CodeGeex</a>(北京智谱华章科技股份有限公司) 及 <a href="https://github.com/continuedev/continue">Continue</a> 的 IDE 插件，都有支援地端 LLM，但使用起來，筆者個人而言，還是 GitHub Copilot 比較順手一點。</p><p>但隨著 VSCode 到了 1.99 版增加<a href="https://code.visualstudio.com/updates/v1_99#_bring-your-own-key-byok-preview">Bring Your Own Key (BYOK) Preview</a>功能，現在<strong>Copilot 終於能連接本地地端 Ollama 的 LLM</strong>，讓企業可以完全掌控推理資料流，<strong>原始碼不離開本地／內網，兼顧效率與資安</strong>。</p><h3 id="Copilot-串接地端-Ollama-LLM"><a href="#Copilot-串接地端-Ollama-LLM" class="headerlink" title="Copilot 串接地端 Ollama LLM"></a>Copilot 串接地端 Ollama LLM</h3><h5 id="設定-Ollama"><a href="#設定-Ollama" class="headerlink" title="設定 Ollama"></a>設定 Ollama</h5><p>安裝好 <a href="https://ollama.com/download">Ollama</a> 後，開啟命令視窗，執行<code>ollama serve</code> 把服務跑起來，開啟網頁連到<code>http://localhost:11434/</code> 會顯示 <strong>Ollama is running</strong>。<br>再另開一個命令視窗，執行<code>ollama pull phi4-mini</code>，下載要使用的 Model（這裡以 phi4-mini 為例）。</p><h5 id="設定-GitHub-Copilot"><a href="#設定-GitHub-Copilot" class="headerlink" title="設定 GitHub Copilot"></a>設定 GitHub Copilot</h5><p>下載好模型後，打開 VSCode，於 GitHub Copilot 對話視窗最下方的模型切換選單中，點選**Manage Models…**，如下圖:</p><img src="/2025/05/30/github-copilot-ollama-local-llm/01.png" class="" title="Manage Models"><p>然後選擇<strong>Ollama</strong>，如下圖:</p><img src="/2025/05/30/github-copilot-ollama-local-llm/02.png" class="" title="選擇Ollama"><p>然後就會列出可以使用的 Model，如下圖:</p><img src="/2025/05/30/github-copilot-ollama-local-llm/03.png" class="" title="選擇Models"><p>接下來回到 GitHub Copilot 對話視窗，將模型切換為 phi4-mini 或 codellama，即可開始使用 AI 助手。此時 Copilot 補全將透過本地 LLM 運算，程式碼資料只會流向你自己的電腦／內網，不會外洩到外部雲端。如下圖：</p><img src="/2025/05/30/github-copilot-ollama-local-llm/04.png" class="" title="地端LLM"><h5 id="設定遠端-Ollama-LLM"><a href="#設定遠端-Ollama-LLM" class="headerlink" title="設定遠端 Ollama LLM"></a>設定遠端 Ollama LLM</h5><p>如果你有遠端 Ollama 服務(例如公司有統一的 GPU Server)，可以設定 GitHub Copilot 遠端 Ollama 的 URL，如下圖:<br>在設定中，輸入 <code>copilot</code> 在 <strong>GitHub Copilot Chat</strong> -&gt; <strong>Preview</strong> -&gt; <strong>Ollama Endpoint</strong></p><img src="/2025/05/30/github-copilot-ollama-local-llm/05.png" class="" title="遠端 Ollama 的 URL"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://code.visualstudio.com/updates/v1_99#_bring-your-own-key-byok-preview">VS Code Bring Your Own Key (BYOK) Preview</a><br><a href="https://ollama.com/">Ollama</a><br><a href="https://codegeex.cn/">CodeGeex</a>(北京智谱华章科技股份有限公司)<br><a href="https://github.com/continuedev/continue">Continue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;AI 編程助手（如 GitHub Copilot、ChatGPT）已成為現代開發團隊必備工具。&lt;br&gt;但對於企業來說，最擔心的就是原始碼外洩</summary>
      
    
    
    
    
    <category term="資安" scheme="https://rainmakerho.github.io/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="VSCode" scheme="https://rainmakerho.github.io/tags/VSCode/"/>
    
    <category term="LLM" scheme="https://rainmakerho.github.io/tags/LLM/"/>
    
    <category term="GitHub Copilot" scheme="https://rainmakerho.github.io/tags/GitHub-Copilot/"/>
    
    <category term="Ollama" scheme="https://rainmakerho.github.io/tags/Ollama/"/>
    
    <category term="AI" scheme="https://rainmakerho.github.io/tags/AI/"/>
    
    <category term="AI Code Completion" scheme="https://rainmakerho.github.io/tags/AI-Code-Completion/"/>
    
    <category term="地端" scheme="https://rainmakerho.github.io/tags/%E5%9C%B0%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>AI自動填表，一鍵搞定！最強Browser Extension全教學</title>
    <link href="https://rainmakerho.github.io/2025/05/29/ai-autofill-browser-extension/"/>
    <id>https://rainmakerho.github.io/2025/05/29/ai-autofill-browser-extension/</id>
    <published>2025-05-29T01:17:10.000Z</published>
    <updated>2025-05-29T07:54:42.051Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>延續<a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a>，我們已經在 SidePanel 中完成與 LLM 的對話功能，並且能成功取得網頁上的 BizForm 表單欄位資訊。本篇將進一步把這個能力應用到「自動填寫表單」的實戰上。你只需要輸入一個指令或貼上會議記錄，AI 就能幫你把資訊自動填入對應欄位，真正實現一鍵自動填表。<br>以下將以 KM 系統為例子，建立該網站的 2 項工具，一個取得表單欄位資訊，另一個則是將表單欄位資訊填入表單中。</p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>要取得網頁表單欄位的資訊及自動填入資料，要先解析網頁的 HTML，看看如何取得表單欄位資訊及透過 id 來指定它們的值。<br>你可以把這些 HTML 結構交給 ChatGPT，請它協助你產生對應的 JavaScript 來自動化擷取欄位資訊。這樣可以加快開發流程，先在瀏覽器 Console 測試 JS 程式碼是否正確抓到欄位，如下圖所示：</p><img src="/2025/05/29/ai-autofill-browser-extension/01.png" class="" title="Console"><p>而在填入表單欄位資訊時，則需要取得表單的 id，然後透過 id 來指定它們的值。<br>不過在 KM 系統中，部分欄位使用了 TinyMCE 這類富文本編輯器。TinyMCE 會將原本的 textarea 元件「包裝」成一個 iframe，這時就<strong>不能單純用 id 屬性直接設定值</strong>。如下圖所示，</p><img src="/2025/05/29/ai-autofill-browser-extension/02.png" class="" title="TinyMCE"><p>textarea 已經被 iframe 取代，所以我們必須改用 <a href="https://www.tiny.cloud/docs/tinymce/latest/apis/tinymce.editor/#setContent">TinyMCE 的 setContent API</a> 來操作內容。</p><h3 id="建立工具"><a href="#建立工具" class="headerlink" title="建立工具"></a>建立工具</h3><p>以下建立 KM 系統要使用的 2 項工具，一個取得表單欄位資訊，另一個則是將表單欄位資訊填入表單中。<br>在這裡主要是設定工具的描述及工具的參數類型，讓 LLM 知道這個工具是幹嘛用的，以及參數的類型(Tool Calling)。<br>而實際上的操作，則會傳送訊息讓 Content-Script 中的 Handler 去執行。</p><h5 id="定義工具描述"><a href="#定義工具描述" class="headerlink" title="定義工具描述"></a>定義工具描述</h5><p>這裡我們先定義三個工具，讓 LLM 清楚理解每種工具是幹嘛用的。</p><p>在<code>utils/types/message.ts</code>的<code>MESSAGE_TOOL_TYPES</code>加入取得欄位、設定欄位及設定 TinyMCE 欄位的描述。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MESSAGE_TOOL_TYPES</span> = &#123;</span><br><span class="line">  <span class="attr">PAGE_CONTENT</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;pageContent&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;取得整個網頁的純文字內容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">BIZ_EXTRACT_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;bizformExtractFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;擷取目前頁面中所有可輸入的欄位名稱與其值（如文字欄位、下拉選單、日期等）&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//新增以下3個工具描述</span></span><br><span class="line">  <span class="attr">KM_EXTRACT_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kmExtractFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;擷取目前頁面中所有可輸入的欄位id, 名稱與其值（如文字欄位、下拉選單、日期等）&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">KM_SET_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kmSetFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;依合適的填寫內容（回傳欄位 id 對應內容, 例如:ctl00_cp_fieldRepeater_ctl02_date_A: 2024/05/23）來填寫網頁表單欄位&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">TINYMCE_SET_VALUE</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tinymceSetValue&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;設定 TinyMCE 編輯器的內容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建立-KM-工具"><a href="#建立-KM-工具" class="headerlink" title="建立 KM 工具"></a>建立 KM 工具</h5><p>在<code>utils/tools</code>目錄中新增<code>kmTools.ts</code>，在裡面建立<strong>LangChain</strong>的 Tool，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tool &#125; <span class="keyword">from</span> <span class="string">&quot;@langchain/core/tools&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sendMessage &#125; <span class="keyword">from</span> <span class="string">&quot;../message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">MESSAGE_TOOL_TYPES</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> noOp = z.<span class="title function_">string</span>().<span class="title function_">optional</span>().<span class="title function_">describe</span>(<span class="string">&quot;No-op parameter.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmExtractFieldsTool = <span class="title function_">tool</span>(</span><br><span class="line">  <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> sendMessage&lt;<span class="built_in">string</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">description</span>,</span><br><span class="line">    <span class="attr">schema</span>: z.<span class="title function_">object</span>(&#123;</span><br><span class="line">      noOp,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setFieldsSchema = z.<span class="title function_">record</span>(z.<span class="title function_">string</span>(), z.<span class="title function_">any</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmSetFieldsTool = <span class="title function_">tool</span>(</span><br><span class="line">  <span class="keyword">async</span> (fields) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callReportSetFieldsTool fields&quot;</span>, fields);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> sendMessage&lt;<span class="built_in">string</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">payload</span>: fields,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">description</span>,</span><br><span class="line">    <span class="attr">schema</span>: setFieldsSchema,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在設定欄位的工具中，我們使用<code>z.record(z.string(), z.any())</code>來定義 schema，id 為字串，欄位值為 any，這樣就可以讓我們傳入任何類型的資料。</p><h5 id="設定-KM-工具可以在那些網站使用"><a href="#設定-KM-工具可以在那些網站使用" class="headerlink" title="設定 KM 工具可以在那些網站使用"></a>設定 KM 工具可以在那些網站使用</h5><p>在<code>utils/tools/index.ts</code>中，在<strong>toolRules</strong>中加入<code>kmExtractFieldsTool</code>及<code>kmSetFieldsTool</code>，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; matchPattern &#125; <span class="keyword">from</span> <span class="string">&quot;browser-extension-url-match&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; pageContentTool &#125; <span class="keyword">from</span> <span class="string">&quot;./pageContentTool&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bizformExtractFieldsTool &#125; <span class="keyword">from</span> <span class="string">&quot;./bizformExtractFieldsTool&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; kmExtractFieldsTool, kmSetFieldsTool &#125; <span class="keyword">from</span> <span class="string">&quot;./kmTools&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tools = [pageContentTool];</span><br><span class="line"><span class="keyword">export</span> &#123; tools &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toolRules = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [pageContentTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;https://bizform.vitalyun.com/*&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [bizformExtractFieldsTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//設定 KM 系統可以用的工具</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;https://gsskm.gss.com.tw/*&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [kmExtractFieldsTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;https://gsskm.gss.com.tw/*&quot;</span>],</span><br><span class="line">    <span class="attr">tools</span>: [kmSetFieldsTool],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getToolsByUrl</span>(<span class="params">url: <span class="built_in">string</span></span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> matchedTools = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> rule <span class="keyword">of</span> toolRules) &#123;</span><br><span class="line">    <span class="keyword">const</span> matcher = <span class="title function_">matchPattern</span>(rule.<span class="property">matches</span>);</span><br><span class="line">    <span class="keyword">if</span> (matcher.<span class="property">valid</span> &amp;&amp; matcher.<span class="title function_">match</span>(url)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;match&quot;</span>, rule.<span class="property">matches</span>);</span><br><span class="line">      rule.<span class="property">tools</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">tool</span>) =&gt;</span> matchedTools.<span class="title function_">add</span>(tool));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(matchedTools);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為 KM 系統的網址是 <code>https://gsskm.gss.com.tw/*</code>，所以這裡我們設定 matches 的值為 <code>https://gsskm.gss.com.tw/*</code>。</p><h3 id="建立工具對應的-Handler"><a href="#建立工具對應的-Handler" class="headerlink" title="建立工具對應的 Handler"></a>建立工具對應的 Handler</h3><h5 id="新增-Handler"><a href="#新增-Handler" class="headerlink" title="新增 Handler"></a>新增 Handler</h5><p>在<code>utils/handlers</code>目錄中新增<code>kmHandlers.ts</code>，在裡面實作要針對網頁的讀取檔位資訊及設定欄位值的 Handler，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  messageRequest,</span><br><span class="line">  messageResponse,</span><br><span class="line">  <span class="variable constant_">MESSAGE_TOOL_TYPES</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmExtractFieldsHandler = (</span><br><span class="line">  <span class="attr">message</span>: messageRequest</span><br><span class="line">): <span class="function"><span class="params">messageResponse</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fields = <span class="title function_">collectFormFields</span>();</span><br><span class="line">  <span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(fields);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">result</span>: jsonString,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">FormFieldInfo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">tag</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 擷取網頁 tr 結構下所有 th(.attrDisplayName)+td(input/select/textarea) 欄位資訊</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">collectFormFields</span>(<span class="params"></span>): <span class="title class_">FormFieldInfo</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fieldList</span>: <span class="title class_">FormFieldInfo</span>[] = [];</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;tr&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">tr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> titleElem = tr.<span class="title function_">querySelector</span>(<span class="string">&quot;.attrDisplayName&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!titleElem) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> title = titleElem.<span class="property">textContent</span>?.<span class="title function_">trim</span>() || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只擷取 td 裡不是 hidden 的 input、select、textarea</span></span><br><span class="line">    <span class="keyword">const</span> inputs = tr.<span class="title function_">querySelectorAll</span>(</span><br><span class="line">      <span class="string">&quot;td input:not([type=hidden]), td select, td textarea&quot;</span></span><br><span class="line">    );</span><br><span class="line">    inputs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">      fieldList.<span class="title function_">push</span>(&#123;</span><br><span class="line">        title,</span><br><span class="line">        <span class="attr">tag</span>: input.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>(),</span><br><span class="line">        <span class="attr">type</span>: (input <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">type</span> || <span class="string">&quot;&quot;</span>, <span class="comment">// select/textarea 沒 type 屬性</span></span><br><span class="line">        <span class="attr">name</span>: input.<span class="title function_">getAttribute</span>(<span class="string">&quot;name&quot;</span>) || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">id</span>: input.<span class="property">id</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: (input <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span> | <span class="title class_">HTMLTextAreaElement</span>).<span class="property">value</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fieldList);</span><br><span class="line">  <span class="keyword">return</span> fieldList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> kmSetFieldsHandler = (</span><br><span class="line">  <span class="attr">message</span>: messageRequest</span><br><span class="line">): <span class="function"><span class="params">messageResponse</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;表單填寫完成, 請檢查網頁內容。&quot;</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> payload = message.<span class="property">payload</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> payload === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        payload = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(payload);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">result</span>: <span class="string">&quot;fields 內容不是正確的 JSON 格式。&quot;</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!payload || <span class="keyword">typeof</span> payload !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">result</span>: <span class="string">&quot;fields 格式錯誤。&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fields = payload <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting fields:&quot;</span>, fields);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">entries</span>(fields).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[id, val]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line">      <span class="keyword">if</span> (!elem) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (elem <span class="keyword">instanceof</span> <span class="title class_">HTMLInputElement</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elem.<span class="property">type</span> === <span class="string">&quot;checkbox&quot;</span> || elem.<span class="property">type</span> === <span class="string">&quot;radio&quot;</span>) &#123;</span><br><span class="line">          elem.<span class="property">checked</span> = <span class="title class_">Boolean</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          elem.<span class="property">value</span> = val ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem <span class="keyword">instanceof</span> <span class="title class_">HTMLSelectElement</span>) &#123;</span><br><span class="line">        elem.<span class="property">value</span> = val ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem <span class="keyword">instanceof</span> <span class="title class_">HTMLTextAreaElement</span>) &#123;</span><br><span class="line">        elem.<span class="property">value</span> = val ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        elem.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&quot;input&quot;</span>, &#123; <span class="attr">bubbles</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">TINYMCE_SET_VALUE</span>.<span class="property">name</span>,</span><br><span class="line">              <span class="attr">id</span>: id,</span><br><span class="line">              <span class="attr">value</span>: val ?? <span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;*&quot;</span></span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error setting textarea value:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="string">&quot;表單填寫失敗: &quot;</span> + (e <span class="keyword">as</span> <span class="title class_">Error</span>).<span class="property">message</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>針對頁面 DOM 的操作，您可以依實際需求調整，這裡只是提供一個基本的範例。<br>因為 KM 系統有使用 TinyMCE 編輯器，所以還需要額外處理 textarea 的值設定，這裡使用 <code>window.postMessage</code> 來觸發設定 TinyMCE TinyMCE 編輯器方法。</p><h5 id="設定-訊息對應的-Handler"><a href="#設定-訊息對應的-Handler" class="headerlink" title="設定 訊息對應的 Handler"></a>設定 訊息對應的 Handler</h5><p>在<code>utils/handlers/index.ts</code>中，新增對應的 Handler，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  messageRequest,</span><br><span class="line">  messageResponse,</span><br><span class="line">  <span class="variable constant_">MESSAGE_TOOL_TYPES</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; pageContentHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./pageContentHandler&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bizformExtractFieldsHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./bizformExtractFieldsHandler&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; kmExtractFieldsHandler, kmSetFieldsHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./kmHandlers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">handlers</span>: <span class="title class_">Record</span>&lt;</span><br><span class="line">  <span class="built_in">string</span>,</span><br><span class="line">  <span class="function">(<span class="params">message: messageRequest</span>) =&gt;</span> messageResponse</span><br><span class="line">&gt; = &#123;</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">PAGE_CONTENT</span>.<span class="property">name</span>]: pageContentHandler,</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">BIZ_EXTRACT_FIELDS</span>.<span class="property">name</span>]: bizformExtractFieldsHandler,</span><br><span class="line">  <span class="comment">//新增這 2 個 Handlers</span></span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_EXTRACT_FIELDS</span>.<span class="property">name</span>]: kmExtractFieldsHandler,</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">KM_SET_FIELDS</span>.<span class="property">name</span>]: kmSetFieldsHandler,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="新增-TinyMCE-的設定"><a href="#新增-TinyMCE-的設定" class="headerlink" title="新增 TinyMCE 的設定"></a>新增 TinyMCE 的設定</h3><h5 id="新增設定-TinyMCE-編輯器的-Function"><a href="#新增設定-TinyMCE-編輯器的-Function" class="headerlink" title="新增設定 TinyMCE 編輯器的 Function"></a>新增設定 TinyMCE 編輯器的 Function</h5><p>在<code>entrypoints</code>目錄中新增<code>tinymcetools.ts</code>，<br>要設定 TinyMCE 編輯器的值，要使用到<strong>window.tinyMCE</strong>，預設的 Content-Script 是與網頁是隔離開來的，無法存取到 <code>window</code>。<br>所以要將這個檔案透過<strong>injectScript</strong>的方式加到網頁之中，而 Content-Script 的 Handler 則透過 <code>window.postMessage</code> 來觸發設定 TinyMCE 編輯器的值，如下<code>window.addEventListener</code>的部份。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">MESSAGE_TOOL_TYPES</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/types/message&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineUnlistedScript</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setTinyMCEValue</span>(<span class="params">id: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!win.<span class="property">tinyMCE</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;tinyMCE not found on window.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> editor = win.<span class="property">tinyMCE</span>.<span class="title function_">get</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (editor) &#123;</span><br><span class="line">      editor.<span class="title function_">setContent</span>(value);</span><br><span class="line">      editor.<span class="title function_">save</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`TinyMCE editor with id <span class="subst">$&#123;id&#125;</span> not found.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      event.<span class="property">data</span> &amp;&amp;</span><br><span class="line">      event.<span class="property">data</span>.<span class="property">type</span> === <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">TINYMCE_SET_VALUE</span>.<span class="property">name</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> event.<span class="property">data</span>.<span class="property">id</span> === <span class="string">&quot;string&quot;</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> event.<span class="property">data</span>.<span class="property">value</span> === <span class="string">&quot;string&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting TinyMCE value:&quot;</span>, event.<span class="property">data</span>.<span class="property">id</span>, event.<span class="property">data</span>.<span class="property">value</span>);</span><br><span class="line">      <span class="title function_">setTinyMCEValue</span>(event.<span class="property">data</span>.<span class="property">id</span>, event.<span class="property">data</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="設定-injectScript-的檔案"><a href="#設定-injectScript-的檔案" class="headerlink" title="設定 injectScript 的檔案"></a>設定 injectScript 的檔案</h5><p>injectScript 會將 JS 直接插入網頁作用域，突破 Content-Script 和網頁 window 的隔離。<br>在<code>entrypoints/content.ts</code>中使用<code>injectScript</code>來將<code>tinymcetools.js</code>加入到網頁中，如下，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; messageRequest, messageResponse &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/types/message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; handlers &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/handlers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineContentScript</span>(&#123;</span><br><span class="line">  <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">injectScript</span>(<span class="string">&quot;/tinymcetools.js&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">keepInDom</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(</span><br><span class="line">      <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        message: messageRequest,</span></span></span><br><span class="line"><span class="params"><span class="function">        sender,</span></span></span><br><span class="line"><span class="params"><span class="function">        sendResponse: (response: messageResponse) =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="params"><span class="function">      </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = handlers[message.<span class="property">type</span>];</span><br><span class="line">        <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">          <span class="title function_">sendResponse</span>(<span class="title function_">handler</span>(message));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unknown message type:&quot;</span>, message.<span class="property">type</span>);</span><br><span class="line">          <span class="title function_">sendResponse</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;Unknown message type&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="設定-web-accessible-resources"><a href="#設定-web-accessible-resources" class="headerlink" title="設定 web_accessible_resources"></a>設定 web_accessible_resources</h5><p>這步驟是讓 Chrome Extension 可以將指定的 JS 檔案注入到目標網頁，才能讓 content script 跟網頁本體溝通。<br>在 <code>wxt.config.ts</code>中，設定 <code>web_accessible_resources</code>，讓 Content-Script 可以將 <code>tinymcetools.js</code> 加到網頁中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;wxt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See https://wxt.dev/api/config.html</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&quot;@wxt-dev/module-react&quot;</span>],</span><br><span class="line">  <span class="attr">manifest</span>: <span class="function">(<span class="params">&#123; browser, manifestVersion, mode, command &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;WXT + Agent&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;WXT + Agent&quot;</span>,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">      <span class="attr">action</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">permissions</span>: [<span class="string">&quot;tabs&quot;</span>, <span class="string">&quot;storage&quot;</span>],</span><br><span class="line">      <span class="attr">host_permissions</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">      <span class="attr">web_accessible_resources</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">resources</span>: [<span class="string">&quot;/tinymcetools.js&quot;</span>],</span><br><span class="line">          <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>經過上述的步驟，我們已經完成了對 KM 系統的填表功能，接下來執行<code>npm run dev</code>，把 Extension 安裝到 Chrome 中，<br>進入到 KM 系統，點選 Extension 的 Icon，再開啟到填表畫面，然後在 SidePanel 中輸入需要 LLM 幫我們做的事，在後面貼上 Teams 的開會記事內容，</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">請根據下方會議記錄內容，依網頁表單欄位逐步執行以下流程，請每一步明確說明理由：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**取得網頁所有表單欄位**</span>（透過 tool calling 取得欄位 title, id…）。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**依據每個表單欄位，從會議記錄中找出最適合填入的內容，並說明推理過程**</span>。</span><br><span class="line"><span class="bullet">   -</span> 若找不到合適內容，請註明原因並留空。</span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**產生 tool calling 指令，將判斷後的內容寫入對應的網頁表單欄位。**</span></span><br><span class="line"></span><br><span class="line">會議記錄如下：</span><br><span class="line">[...記事內容...]</span><br></pre></td></tr></table></figure><p>然後按下送出，就可以看到 LLM 幫我們填寫好了表單。如下圖:</p><img src="/2025/05/29/ai-autofill-browser-extension/05.png" class="" title="自動寫回網頁的表單欄位之中"><ul><li>註: 如果您的 Chrome 升級到了 V.137 ，它不再支援 <code>--load-extension</code> 參數，所以要手動安裝 Extension(開啟 開發人員模式 ，載入未封裝項目，選擇 chrome-mv3-dev 目錄)</li><li>註: 如果出現取不到網頁資訊表示 Content-Script 沒有順利載入到網頁中，請重新整理網頁，然後再試一次。</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>從這次的實作可以看到，只要建立好對應的 Tools 和 Handlers，就能快速擴充 AI 助理的新能力，不論是自動填表還是擷取網頁資料都變得簡單高效。<br>這種「工具驅動 + LLM 協作」的模式，不僅大幅減少了重複性工作，更讓我們能把時間投入到真正有價值的決策和創造力發揮上。<br>未來，你也可以依照實際需求，彈性擴充更多自動化功能，讓瀏覽器成為最聰明的工作助手！</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="../../../05/12/ai-browser-extension-integration">用 Browser Extension 打造具網頁背景感知的 AI 助理，補足 LLM 的視野盲點</a><br><a href="../../../05/12/ai-browser-extension-context-bridge">為什麼 AI 工具需要瀏覽器擴充功能來補全 Web 背景？</a><br><a href="../../../05/12/wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a><br><a href="https://github.com/rainmakerho/wxtagent/tree/25.05.02">wxtagent 程式碼</a><br><a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;延續&lt;a href=&quot;../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-</summary>
      
    
    
    
    
    <category term="Browser Extension" scheme="https://rainmakerho.github.io/tags/Browser-Extension/"/>
    
    <category term="Chrome Extension" scheme="https://rainmakerho.github.io/tags/Chrome-Extension/"/>
    
    <category term="AI自動填表" scheme="https://rainmakerho.github.io/tags/AI%E8%87%AA%E5%8B%95%E5%A1%AB%E8%A1%A8/"/>
    
    <category term="一鍵自動填表" scheme="https://rainmakerho.github.io/tags/%E4%B8%80%E9%8D%B5%E8%87%AA%E5%8B%95%E5%A1%AB%E8%A1%A8/"/>
    
    <category term="AI填表神器" scheme="https://rainmakerho.github.io/tags/AI%E5%A1%AB%E8%A1%A8%E7%A5%9E%E5%99%A8/"/>
    
    <category term="網頁自動填表" scheme="https://rainmakerho.github.io/tags/%E7%B6%B2%E9%A0%81%E8%87%AA%E5%8B%95%E5%A1%AB%E8%A1%A8/"/>
    
    <category term="wxt" scheme="https://rainmakerho.github.io/tags/wxt/"/>
    
    <category term="AI自動化" scheme="https://rainmakerho.github.io/tags/AI%E8%87%AA%E5%8B%95%E5%8C%96/"/>
    
    <category term="langchain" scheme="https://rainmakerho.github.io/tags/langchain/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 2025 實戰：資料庫內建 AI 向量語義搜尋與 RAG 教學（以 AdventureWorks 為例）</title>
    <link href="https://rainmakerho.github.io/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/"/>
    <id>https://rainmakerho.github.io/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/</id>
    <published>2025-05-23T01:36:19.000Z</published>
    <updated>2025-05-25T03:04:48.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 AI 驅動的時代，資料庫不僅僅是儲存與查詢的工具，還是智能運算的核心。過去想要在資料庫實作語義搜尋（Semantic Search）或 RAG（Retrieval-Augmented Generation）時，往往必須額外串接多個外部服務與資料庫，還需要資料權限控管：</p><ul><li>需額外部署如 Pinecone、Qdrant 這類向量資料庫，儲存語意向量（embedding）。</li><li>還要串接 OpenAI、Azure OpenAI 等等 Embedding API，產生向量。</li><li>為了資料同步，要設計 ETL 串接資料庫與向量資料庫，開發與維護門檻極高。</li><li>通常 RAG Search，還需要透過權限控管去 Filter 資料是否有權限閱讀，這些過程都需要額外開發與維護。</li></ul><blockquote><p>現在，SQL Server 2025 直接把這些現代 AI 能力內建進來！<br>你可以用 SQL 原生支援外部 AI 模型呼叫、向量資料型別、語義相似度查詢與嵌入生成，所有流程都在資料庫內部安全地完成，無須維護多套系統。</p></blockquote><p>接下來先分別介紹這些功能，最後再整個整合起來。</p><h3 id="用-sp-invoke-external-rest-endpoint-呼叫-OpenAI-Chat"><a href="#用-sp-invoke-external-rest-endpoint-呼叫-OpenAI-Chat" class="headerlink" title="用 sp_invoke_external_rest_endpoint 呼叫 OpenAI Chat"></a>用 sp_invoke_external_rest_endpoint 呼叫 OpenAI Chat</h3><p>SQL Server 2025 新增的 <code>sp_invoke_external_rest_endpoint</code>，可在 T-SQL 直接呼叫外部 REST API，像打 OpenAI API 這樣：<br>使用之前，請先確定有啟用<code>external rest endpoint enabled</code>設定，如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> sp_configure <span class="string">&#x27;external rest endpoint enabled&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE;</span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;external rest endpoint enabled&#x27;</span>; <span class="comment">-- config_value 要為 1</span></span><br></pre></td></tr></table></figure><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/01.png" class="" title="sp_configure"><p>然後就可以透過 <code>sp_invoke_external_rest_endpoint</code> 呼叫 OpenAI Chat API 了 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@url</span> nvarchar(<span class="number">4000</span>) <span class="operator">=</span> N<span class="string">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@headers</span> nvarchar(<span class="number">4000</span>) <span class="operator">=</span> N<span class="string">&#x27;&#123;&quot;Authorization&quot;:&quot;Bearer [你的 apikey]&quot;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@payload</span> NVARCHAR(MAX) <span class="operator">=</span> N<span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,</span></span><br><span class="line"><span class="string">    &quot;messages&quot;: [</span></span><br><span class="line"><span class="string">        &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are an AI assistant that helps people find information.&quot;&#125;,</span></span><br><span class="line"><span class="string">        &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;你說一個笑話&quot;&#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@ret</span> <span class="type">INT</span>, <span class="variable">@response</span> NVARCHAR(MAX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> <span class="variable">@ret</span> <span class="operator">=</span> sp_invoke_external_rest_endpoint</span><br><span class="line">    <span class="variable">@url</span> <span class="operator">=</span> <span class="variable">@url</span>,</span><br><span class="line">    <span class="variable">@method</span> <span class="operator">=</span> <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="variable">@headers</span> <span class="operator">=</span> <span class="variable">@headers</span>,</span><br><span class="line">    <span class="variable">@payload</span> <span class="operator">=</span> <span class="variable">@payload</span>,</span><br><span class="line">    <span class="variable">@timeout</span> <span class="operator">=</span> <span class="number">230</span>,</span><br><span class="line">    <span class="variable">@response</span> <span class="operator">=</span> <span class="variable">@response</span> OUTPUT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@ret</span> <span class="keyword">AS</span> ReturnCode, <span class="variable">@response</span> <span class="keyword">AS</span> Response , <span class="built_in">JSON_VALUE</span>(choices.value, <span class="string">&#x27;$.message.content&#x27;</span>) <span class="keyword">AS</span> ai_reply</span><br><span class="line"><span class="keyword">FROM</span> OPENJSON(<span class="variable">@response</span>, <span class="string">&#x27;$.result.choices&#x27;</span>) <span class="keyword">AS</span> choices</span><br></pre></td></tr></table></figure><p>結果是一個 JSON 字串，可透過 <code>JSON_VALUE</code> 取得 AI 回覆內容，如下圖:</p><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/02.png" class="" title="sp_invoke_external_rest_endpoint"><p>當然，也可以呼叫地端的 REST API，只要把 URL 改成你自己的 API 即可。 如下，</p><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/03.png" class="" title="local llm"><h3 id="用-VECTOR-DISTANCE-計算語義相似度"><a href="#用-VECTOR-DISTANCE-計算語義相似度" class="headerlink" title="用 VECTOR_DISTANCE 計算語義相似度"></a>用 VECTOR_DISTANCE 計算語義相似度</h3><p>SQL Server 2025 新增的 <code>VECTOR_DISTANCE</code> 函數，可以計算兩個向量間的相似度。用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line"><span class="variable">@car</span> vector(<span class="number">2</span>)<span class="operator">=</span> <span class="string">&#x27;[1,0]&#x27;</span></span><br><span class="line">,<span class="variable">@bus</span> vector(<span class="number">2</span>)<span class="operator">=</span> <span class="string">&#x27;[0.8,0]&#x27;</span></span><br><span class="line">,<span class="variable">@queen</span> vector(<span class="number">2</span>)<span class="operator">=</span> <span class="string">&#x27;[0,1]&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> [Car vs Bus]<span class="operator">=</span> VECTOR_DISTANCE(<span class="string">&#x27;cosine&#x27;</span>,<span class="variable">@car</span>,<span class="variable">@bus</span>)</span><br><span class="line">,[Car Vs Queen] <span class="operator">=</span> VECTOR_DISTANCE(<span class="string">&#x27;cosine&#x27;</span>,<span class="variable">@car</span>,<span class="variable">@queen</span>)</span><br><span class="line">,[Bus Vs Queen] <span class="operator">=</span> VECTOR_DISTANCE(<span class="string">&#x27;cosine&#x27;</span>,<span class="variable">@bus</span>,<span class="variable">@queen</span>)</span><br></pre></td></tr></table></figure><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/04.png" class="" title="VECTOR_DISTANCE"><ul><li>備註： cosine 值愈小愈相似。</li></ul><p>從結果可以發現，car 與 bus 語義是相近的，car 與 queen 語義是相對遠的。<br>所以當資料中有 Car ，而使用 bus 去搜尋時，如果信心度設為 80%，會找出 Car 而不會找出 Queen。</p><h3 id="用-AI-GENERATE-CHUNKS-進行文字分段"><a href="#用-AI-GENERATE-CHUNKS-進行文字分段" class="headerlink" title="用 AI_GENERATE_CHUNKS 進行文字分段"></a>用 AI_GENERATE_CHUNKS 進行文字分段</h3><p>進行向量搜尋時，通常會把長篇文章分段，然後對每一段進行向量生成，再進行搜尋。SQL Server 2025 新增的 <code>AI_GENERATE_CHUNKS</code> 函數，可以將一段文字分段，用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@payload</span> NVARCHAR(MAX) <span class="operator">=</span> N<span class="string">&#x27;叡揚資訊股份有限公司與臺北市立復興高級中學於近日正式簽署產學合作備忘錄 雙方將在資訊安全教育、人才培育及實習計劃等方面展開全面合作。此舉不僅能為學生提供多元化的學習體驗，更能有效提升學生未來升學及就業所需的專業技能。&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="variable">@payload</span> <span class="keyword">as</span> PAYLOAD) P</span><br><span class="line"><span class="keyword">CROSS</span> APPLY AI_GENERATE_CHUNKS(</span><br><span class="line">    source <span class="operator">=</span> <span class="variable">@payload</span>,</span><br><span class="line">    chunk_type <span class="operator">=</span> N<span class="string">&#x27;FIXED&#x27;</span>,</span><br><span class="line">    chunk_size <span class="operator">=</span> <span class="number">50</span>,</span><br><span class="line">    overlap <span class="operator">=</span> <span class="number">10</span>) C</span><br></pre></td></tr></table></figure><p>可以發現，第二段開始，會後前一段的 overlap 部分內容，如下圖:</p><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/05.png" class="" title="AI_GENERATE_CHUNKS"><h3 id="用-CREATE-EXTERNAL-MODEL-建立向量嵌入模型"><a href="#用-CREATE-EXTERNAL-MODEL-建立向量嵌入模型" class="headerlink" title="用 CREATE EXTERNAL MODEL 建立向量嵌入模型"></a>用 CREATE EXTERNAL MODEL 建立向量嵌入模型</h3><p>你可以把 OpenAI、Ollama 等 embedding API 註冊成 SQL Server 外部模型，後續直接呼叫。<br>開始前 Database 需要有 <strong>MASTER KEY</strong>，如果沒有請先建立一個，如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;YourStrong@Passw0rd&#x27;</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>如果 embedding model 需要驗證的話，還需要再建立 <strong>DATABASE SCOPED CREDENTIAL</strong>，然後指定給 <strong>EXTERNAL MODEL</strong>，如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE SCOPED CREDENTIAL [https:<span class="operator">/</span><span class="operator">/</span>api.openai.com]</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">IDENTITY</span> <span class="operator">=</span> <span class="string">&#x27;HTTPEndpointHeaders&#x27;</span>, secret <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;Authorization&quot;:&quot;Bearer openai-apikey&quot;&#125;&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> MODEL openai</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">      LOCATION <span class="operator">=</span> <span class="string">&#x27;https://api.openai.com/v1/embeddings&#x27;</span>,</span><br><span class="line">      API_FORMAT <span class="operator">=</span> <span class="string">&#x27;OpenAI&#x27;</span>,</span><br><span class="line">      MODEL_TYPE <span class="operator">=</span> EMBEDDINGS,</span><br><span class="line">      MODEL <span class="operator">=</span> <span class="string">&#x27;text-embedding-ada-002&#x27;</span>,</span><br><span class="line">      CREDENTIAL <span class="operator">=</span> [https:<span class="operator">/</span><span class="operator">/</span>api.openai.com]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- openai 相容的地端 embedding api</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE SCOPED CREDENTIAL [https:<span class="operator">/</span><span class="operator">/</span>rm.gss.com.tw]</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">IDENTITY</span> <span class="operator">=</span> <span class="string">&#x27;HTTPEndpointHeaders&#x27;</span>, secret <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;Authorization&quot;:&quot;Bearer apikey&quot;&#125;&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> MODEL gss_model</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">      LOCATION <span class="operator">=</span> <span class="string">&#x27;https://rm.gss.com.tw/v1/embeddings&#x27;</span>,</span><br><span class="line">      API_FORMAT <span class="operator">=</span> <span class="string">&#x27;OpenAI&#x27;</span>,</span><br><span class="line">      MODEL_TYPE <span class="operator">=</span> EMBEDDINGS,</span><br><span class="line">      MODEL <span class="operator">=</span> <span class="string">&#x27;e5-large&#x27;</span>,</span><br><span class="line">      CREDENTIAL <span class="operator">=</span> [https:<span class="operator">/</span><span class="operator">/</span>rm.gss.com.tw]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE SCOPED CREDENTIAL [https:<span class="operator">/</span><span class="operator">/</span>my<span class="operator">-</span>azure<span class="operator">-</span>openai<span class="operator">-</span>endpoint.openai.azure.com]</span><br><span class="line">    <span class="keyword">WITH</span> <span class="keyword">IDENTITY</span> <span class="operator">=</span> <span class="string">&#x27;HTTPEndpointHeaders&#x27;</span>, secret <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;api-key&quot;:&quot;aoai-apikey&quot;&#125;&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> MODEL aoai</span><br><span class="line"><span class="keyword">WITH</span> (</span><br><span class="line">      LOCATION <span class="operator">=</span> <span class="string">&#x27;https://my-azure-openai-endpoint.openai.azure.com/openai/deployments/text-embedding-ada-002/embeddings?api-version=2023-05-15&#x27;</span>,</span><br><span class="line">      API_FORMAT <span class="operator">=</span> <span class="string">&#x27;Azure OpenAI&#x27;</span>,</span><br><span class="line">      MODEL_TYPE <span class="operator">=</span> EMBEDDINGS,</span><br><span class="line">      MODEL <span class="operator">=</span> <span class="string">&#x27;text-embedding-ada-002&#x27;</span>,</span><br><span class="line">      CREDENTIAL <span class="operator">=</span> [https:<span class="operator">/</span><span class="operator">/</span>my<span class="operator">-</span>azure<span class="operator">-</span>openai<span class="operator">-</span>endpoint.openai.azure.com]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.database_scoped_credentials;</span><br><span class="line"><span class="comment">--查看 external model</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sys.external_models;</span><br></pre></td></tr></table></figure><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/06.png" class="" title="external_models"><ul><li>請注意: CREDENTIAL 的名稱必需跟 Model 中 LOCATION 的 URL ，要相同 Domain，不然會無法正確呼叫，會出現 <code>The database scoped credential &#39;your credential name&#39; cannot be used to invoke an external rest endpoint.</code>。</li></ul><h3 id="用-AI-GENERATE-EMBEDDINGS-產生向量"><a href="#用-AI-GENERATE-EMBEDDINGS-產生向量" class="headerlink" title="用 AI_GENERATE_EMBEDDINGS 產生向量"></a>用 AI_GENERATE_EMBEDDINGS 產生向量</h3><p>有了外部模型，就可以呼叫外部模型，產生向量了，用法如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AI_GENERATE_EMBEDDINGS(<span class="string">&#x27;hello world&#x27;</span> USE MODEL openai) <span class="keyword">AS</span> [Embedding];</span><br><span class="line"><span class="keyword">SELECT</span> AI_GENERATE_EMBEDDINGS(<span class="string">&#x27;hello world&#x27;</span> USE MODEL gss_model) <span class="keyword">AS</span> [Embedding];</span><br><span class="line"><span class="keyword">SELECT</span> AI_GENERATE_EMBEDDINGS(<span class="string">&#x27;hello world&#x27;</span> USE MODEL aoai) <span class="keyword">AS</span> [Embedding];</span><br></pre></td></tr></table></figure><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/07.png" class="" title="AI_GENERATE_EMBEDDINGS"><h3 id="AdventureWorks2022：完整語義搜尋實作"><a href="#AdventureWorks2022：完整語義搜尋實作" class="headerlink" title="AdventureWorks2022：完整語義搜尋實作"></a>AdventureWorks2022：完整語義搜尋實作</h3><p>最後，我們來實作一個完整的語義搜尋範例，使用 <a href="https://learn.microsoft.com/zh-tw/sql/samples/adventureworks-install-configure?view=sql-server-ver16&tabs=ssms">AdventureWorks2022 資料庫</a>，如下:</p><h5 id="新增欄位存-embedding"><a href="#新增欄位存-embedding" class="headerlink" title="新增欄位存 embedding"></a>新增欄位存 embedding</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加入要放 Chunk &amp; 向量的欄位</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [Production].[Product]</span><br><span class="line">    <span class="keyword">ADD</span> embeddings VECTOR (<span class="number">1536</span>),</span><br><span class="line">        chunk NVARCHAR (<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><ul><li>註: 1536 為 text-embedding-ada-002 模型的向量維度，請依實際模型調整。</li></ul><h5 id="產生產品-chunk-及對應-embedding"><a href="#產生產品-chunk-及對應-embedding" class="headerlink" title="產生產品 chunk 及對應 embedding"></a>產生產品 chunk 及對應 embedding</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 取出要建立向量資料的字串</span></span><br><span class="line"><span class="keyword">SELECT</span> p.Name <span class="operator">+</span> <span class="string">&#x27; &#x27;</span> <span class="operator">+</span> ISNULL(p.Color, <span class="string">&#x27;No Color&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="operator">+</span> ISNULL(c.Name, <span class="string">&#x27;No Category&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="operator">+</span> ISNULL(m.Name, <span class="string">&#x27;No Model&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span> <span class="operator">+</span> ISNULL(d.Description, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> Production.Product p</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.ProductSubCategory sc</span><br><span class="line"><span class="keyword">ON</span> p.ProductSubcategoryID <span class="operator">=</span> sc.ProductSubcategoryID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.ProductCategory c</span><br><span class="line"><span class="keyword">ON</span> sc.ProductCategoryID <span class="operator">=</span> c.ProductCategoryID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.ProductModel m</span><br><span class="line"><span class="keyword">ON</span> p.ProductModelID <span class="operator">=</span> m.ProductModelID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.vProductAndDescription d</span><br><span class="line"><span class="keyword">ON</span> p.ProductID <span class="operator">=</span> d.ProductID</span><br><span class="line"><span class="keyword">AND</span> d.CultureID <span class="operator">=</span> <span class="string">&#x27;en&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> p.embeddings <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先更新 chunk</span></span><br><span class="line"><span class="keyword">UPDATE</span> p</span><br><span class="line"><span class="keyword">SET</span> chunk <span class="operator">=</span> p.Name <span class="operator">+</span> <span class="string">&#x27; &#x27;</span> <span class="operator">+</span> ISNULL(p.Color, <span class="string">&#x27;No Color&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="operator">+</span> ISNULL(c.Name, <span class="string">&#x27;No Category&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="operator">+</span> ISNULL(m.Name, <span class="string">&#x27;No Model&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27; &#x27;</span> <span class="operator">+</span> ISNULL(d.Description, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> Production.Product p</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.ProductSubCategory sc</span><br><span class="line"><span class="keyword">ON</span> p.ProductSubcategoryID <span class="operator">=</span> sc.ProductSubcategoryID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.ProductCategory c</span><br><span class="line"><span class="keyword">ON</span> sc.ProductCategoryID <span class="operator">=</span> c.ProductCategoryID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.ProductModel m</span><br><span class="line"><span class="keyword">ON</span> p.ProductModelID <span class="operator">=</span> m.ProductModelID</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Production.vProductAndDescription d</span><br><span class="line"><span class="keyword">ON</span> p.ProductID <span class="operator">=</span> d.ProductID</span><br><span class="line"><span class="keyword">AND</span> d.CultureID <span class="operator">=</span> <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 設定 向量資料, 使用 aoai external model</span></span><br><span class="line"><span class="keyword">UPDATE</span> p</span><br><span class="line"><span class="keyword">SET</span> embeddings <span class="operator">=</span> AI_GENERATE_EMBEDDINGS(chunk  USE MODEL aoai)</span><br><span class="line"><span class="keyword">FROM</span> Production.Product p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> chunk, embeddings</span><br><span class="line">  <span class="keyword">FROM</span> Production.Product;</span><br></pre></td></tr></table></figure><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/08.png" class="" title="chunk, embeddings"><h5 id="語義搜尋（自然語言查詢）"><a href="#語義搜尋（自然語言查詢）" class="headerlink" title="語義搜尋（自然語言查詢）"></a>語義搜尋（自然語言查詢）</h5><p>完成 embedding 欄位建立與資料更新後，接下來就能直接用自然語言查詢產品資料。例如，查詢「紅色腳踏車」相關產品：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@search</span>_text NVARCHAR(MAX) <span class="operator">=</span> N<span class="string">&#x27;紅色腳踏車&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@search</span>_vector VECTOR(<span class="number">1536</span>) <span class="operator">=</span> AI_GENERATE_EMBEDDINGS(<span class="variable">@search</span>_text USE MODEL aoai);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP(<span class="number">5</span>) p.ProductID, p.Name, p.chunk,</span><br><span class="line">    VECTOR_DISTANCE(<span class="string">&#x27;cosine&#x27;</span>, <span class="variable">@search</span>_vector, p.embeddings) <span class="keyword">AS</span> distance</span><br><span class="line"><span class="keyword">FROM</span> Production.Product p</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> distance;</span><br></pre></td></tr></table></figure><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/09.png" class="" title="查詢「紅色腳踏車」"><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>以往要做語義搜尋、RAG，常要額外建向量資料庫、自己串 embedding API 並搞資料同步，還要處理資料權限控管。<br>SQL Server 2025 直接將 AI 語義搜尋變成 SQL 查詢本身的能力(Vector Store, Model Management, Embeddings built-in, Simple semantic serrching, Framework integration(LangChain, Semantic Kernel, EF Core …) )，不僅開發更快、維運更安全，資料不離開資料庫，讓 AI 搜尋的所有需求都能一站搞定！<br>SQL Server 2025 Vector Search 過程如下圖(from <a href="https://www.youtube.com/watch?v=6EEhG1VQWnc">SQL Server 2025: The Database Developer Reimagined</a>):</p><img src="/2025/05/23/sql-server-2025-ai-semantic-search-rag-adventureworks/10.png" class="" title="SQL Server 2025 Vector Search"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://learn.microsoft.com/en-us/sql/t-sql/statements/create-external-model-transact-sql?view=sql-server-ver17">CREATE EXTERNAL MODEL</a><br><a href="https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-invoke-external-rest-endpoint-transact-sql?view=fabric&tabs=request-headers">sp_invoke_external_rest_endpoint</a><br><a href="https://learn.microsoft.com/zh-cn/sql/t-sql/functions/ai-generate-chunks-transact-sql?view=sql-server-ver17">AI_GENERATE_CHUNKS</a><br><a href="https://learn.microsoft.com/zh-tw/sql/t-sql/functions/ai-generate-embeddings-transact-sql?view=sql-server-ver17">AI_GENERATE_EMBEDDINGS</a><br><a href="https://github.com/AzureSQLDB/SQLin5/blob/main/newAIinSQL2025/getting-started-with-ai.md">Getting started with AI in SQL Server 2025 on Windows</a><br><a href="https://www.youtube.com/watch?v=6EEhG1VQWnc">SQL Server 2025: The Database Developer Reimagined</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在 AI 驅動的時代，資料庫不僅僅是儲存與查詢的工具，還是智能運算的核心。過去想要在資料庫實作語義搜尋（Semantic Search）或 </summary>
      
    
    
    
    
    <category term="OpenAI" scheme="https://rainmakerho.github.io/tags/OpenAI/"/>
    
    <category term="RAG" scheme="https://rainmakerho.github.io/tags/RAG/"/>
    
    <category term="SQL Server 2025" scheme="https://rainmakerho.github.io/tags/SQL-Server-2025/"/>
    
    <category term="AI 語義搜尋" scheme="https://rainmakerho.github.io/tags/AI-%E8%AA%9E%E7%BE%A9%E6%90%9C%E5%B0%8B/"/>
    
    <category term="AdventureWorks" scheme="https://rainmakerho.github.io/tags/AdventureWorks/"/>
    
    <category term="VECTOR_DISTANCE" scheme="https://rainmakerho.github.io/tags/VECTOR-DISTANCE/"/>
    
    <category term="CREATE EXTERNAL MODEL" scheme="https://rainmakerho.github.io/tags/CREATE-EXTERNAL-MODEL/"/>
    
    <category term="向量搜尋" scheme="https://rainmakerho.github.io/tags/%E5%90%91%E9%87%8F%E6%90%9C%E5%B0%8B/"/>
    
    <category term="產品語義查詢" scheme="https://rainmakerho.github.io/tags/%E7%94%A2%E5%93%81%E8%AA%9E%E7%BE%A9%E6%9F%A5%E8%A9%A2/"/>
    
    <category term="SQL Server AI" scheme="https://rainmakerho.github.io/tags/SQL-Server-AI/"/>
    
    <category term="AI_GENERATE_CHUNKS" scheme="https://rainmakerho.github.io/tags/AI-GENERATE-CHUNKS/"/>
    
    <category term="AI_GENERATE_EMBEDDINGS" scheme="https://rainmakerho.github.io/tags/AI-GENERATE-EMBEDDINGS/"/>
    
  </entry>
  
  <entry>
    <title>Apple Silicon Mac 上用 Docker 跑 SQL Server？Colima、Podman 實戰相容性解析</title>
    <link href="https://rainmakerho.github.io/2025/05/21/apple-silicon-mac-m4-sql-server-docker-colima-podman/"/>
    <id>https://rainmakerho.github.io/2025/05/21/apple-silicon-mac-m4-sql-server-docker-colima-podman/</id>
    <published>2025-05-21T01:44:43.000Z</published>
    <updated>2025-05-21T03:03:48.056Z</updated>
    
    <content type="html"><![CDATA[<p>隨著 Apple Silicon（M1、M2、M3、M4）筆電普及，越來越多開發者在 Mac 上執行 Docker，尤其是企業常用的 Microsoft SQL Server（mssql）container。<br>但<strong>許多人在 ARM 架構下安裝 mssql server 時，常常遇到平台不符（platform mismatch）警告、Container 直接啟動失敗</strong>等狀況。</p><p>這篇將深入解析：</p><ul><li><strong>官方 mssql-server image 是否支援 ARM</strong></li><li><strong>Colima、Podman 在 Apple Silicon 上跑 amd64 image 的差異</strong></li><li><strong>QEMU 模擬與 VM 架構調整</strong></li><li><strong>最佳開發實務建議</strong></li></ul><h3 id="微軟-SQL-Server-Docker-image-支援哪些平台？"><a href="#微軟-SQL-Server-Docker-image-支援哪些平台？" class="headerlink" title="微軟 SQL Server Docker image 支援哪些平台？"></a>微軟 SQL Server Docker image 支援哪些平台？</h3><p>在 <a href="https://hub.docker.com/r/microsoft/mssql-server">dockerhub mssql-server</a> 中，它的架構都是<strong>amd64</strong></p><p>以下使用 <a href="https://github.com/abiosoft/colima">colima</a> 及 <a href="https://podman.io/docs/installation">podman</a> 來安裝 mssql-server 並進行測試。</p><h3 id="使用-colima"><a href="#使用-colima" class="headerlink" title="使用 colima"></a>使用 <a href="https://github.com/abiosoft/colima">colima</a></h3><p>在 M4 上直接使用 <a href="https://github.com/abiosoft/colima">colima</a> 來執行 mssql ，會發生以下的警告訊息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: The requested image&#x27;s platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested</span><br></pre></td></tr></table></figure><p>然後 docker 就結束了，mssql server 也沒有啟動成功。<br>這是因為 Colima VM 預設是 <strong>arm64</strong> 架構，直接執行 amd64 image 會需要 QEMU 虛擬化，若 QEMU 沒安裝或沒正確啟用，container 會啟動失敗。<br>建議重建 Colima VM 並指定 x86_64 架構，這樣所有 amd64 image 都可直接啟動且較為穩定。<br>指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colima stop</span><br><span class="line">colima delete</span><br><span class="line">colima start --<span class="built_in">arch</span> x86_64</span><br></pre></td></tr></table></figure><p>如果出現</p><blockquote><p>FATA[0000] error starting vm: error at ‘creating and starting’: qemu is required to emulate x86_64: qemu-img not found, run ‘brew install qemu’ to install</p></blockquote><p>這是因為 qemu 沒有安裝，我們可以透過 brew 來安裝 qemu:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qemu</span><br></pre></td></tr></table></figure><p>然後再啟動 colima:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colima start --<span class="built_in">arch</span> x86_64</span><br></pre></td></tr></table></figure><p>下次要啟動只要執行 <code>colima start</code> 即可。<br>執行<code>colima status</code>可以發現，目前已經是<strong>x86_64</strong>架構，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO[0000] colima is running using macOS Virtualization.Framework</span><br><span class="line">INFO[0000] <span class="built_in">arch</span>: x86_64</span><br><span class="line">INFO[0000] runtime: docker</span><br><span class="line">INFO[0000] mountType: sshfs</span><br><span class="line">INFO[0000] socket: unix:///Users/rainmaker_ho/.colima/default/docker.sock</span><br></pre></td></tr></table></figure><p>再來使用 docker 執行 mssql-server (請調整密碼)，就可以正常啟動了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">&quot;ACCEPT_EULA=Y&quot;</span> -e <span class="string">&quot;MSSQL_SA_PASSWORD=p@ssw0rd&quot;</span> \</span><br><span class="line">   -p 1433:1433 --name sql1 --hostname sql1 \</span><br><span class="line">   -d \</span><br><span class="line">   mcr.microsoft.com/mssql/server:2025-latest</span><br></pre></td></tr></table></figure><h3 id="使用-podman"><a href="#使用-podman" class="headerlink" title="使用 podman"></a>使用 <a href="https://podman.io/docs/installation">podman</a></h3><p><a href="https://podman.io/docs/installation">podman</a> 執行<code>podman machine start</code>後，執行<code>podman info</code>可以發現它的架構是<strong>linux&#x2F;arm64</strong>, 如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version:</span><br><span class="line">  APIVersion: 5.5.0</span><br><span class="line">  BuildOrigin: <span class="string">&#x27;Copr: packit/containers-podman-26126&#x27;</span></span><br><span class="line">  Built: 1747094400</span><br><span class="line">  BuiltTime: Tue May 13 08:00:00 2025</span><br><span class="line">  GitCommit: 0dbcb51477ee7ab8d3b47d30facf71fc38bb0c98</span><br><span class="line">  GoVersion: go1.23.8</span><br><span class="line">  Os: linux</span><br><span class="line">  OsArch: linux/arm64</span><br><span class="line">  Version: 5.5.0</span><br></pre></td></tr></table></figure><p>所以透過<a href="https://podman.io/docs/installation">podman</a>來執行 mssql-server (請調整密碼):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">podman run -e <span class="string">&quot;ACCEPT_EULA=Y&quot;</span> -e <span class="string">&quot;MSSQL_SA_PASSWORD=p@ssw0rd&quot;</span> \</span><br><span class="line">   -p 1433:1433 --name sql1 --hostname sql1 \</span><br><span class="line">   -d \</span><br><span class="line">   mcr.microsoft.com/mssql/server:2025-latest</span><br></pre></td></tr></table></figure><p>會出現以下的警告訊息:</p><blockquote><p>WARNING: image platform (linux&#x2F;amd64) does not match the expected platform (linux&#x2F;arm64)</p></blockquote><p>mssql-server 還是可以正常啟動（QEMU 自動模擬），執行<code>podman ps</code>可驗證服務已啟動</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p><a href="https://podman.io/docs/installation">podman</a> 無需特別處理架構，自動啟動 QEMU，可直接跑 amd64 image。<br><a href="https://github.com/abiosoft/colima">colima</a> 需明確指定 VM 架構為 x86_64 並重建 VM，否則容易失敗。<br>整體而言，Podman 對於 Apple Silicon (M1&#x2F;M2&#x2F;M3&#x2F;M4) 用戶體驗更方便！</p><ul><li>註: 感謝同事 HiHi Paul 的測試與建議!</li></ul><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/abiosoft/colima">colima</a><br><a href="https://podman.io/docs/installation">podman</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;隨著 Apple Silicon（M1、M2、M3、M4）筆電普及，越來越多開發者在 Mac 上執行 Docker，尤其是企業常用的 Microsoft SQL Server（mssql）container。&lt;br&gt;但&lt;strong&gt;許多人在 ARM 架構下安裝 mssql</summary>
      
    
    
    
    
    <category term="mac" scheme="https://rainmakerho.github.io/tags/mac/"/>
    
    <category term="docker" scheme="https://rainmakerho.github.io/tags/docker/"/>
    
    <category term="apple silicon" scheme="https://rainmakerho.github.io/tags/apple-silicon/"/>
    
    <category term="m4" scheme="https://rainmakerho.github.io/tags/m4/"/>
    
    <category term="colima" scheme="https://rainmakerho.github.io/tags/colima/"/>
    
    <category term="podman" scheme="https://rainmakerho.github.io/tags/podman/"/>
    
    <category term="sql server" scheme="https://rainmakerho.github.io/tags/sql-server/"/>
    
    <category term="qemu" scheme="https://rainmakerho.github.io/tags/qemu/"/>
    
    <category term="arm64" scheme="https://rainmakerho.github.io/tags/arm64/"/>
    
    <category term="amd64" scheme="https://rainmakerho.github.io/tags/amd64/"/>
    
  </entry>
  
  <entry>
    <title>以 LLM 為核心打造零程式碼查詢流程：簡化 Dify 流程設計、讓非工程人員也能上手</title>
    <link href="https://rainmakerho.github.io/2025/05/19/build-dify-flow-without-code/"/>
    <id>https://rainmakerho.github.io/2025/05/19/build-dify-flow-without-code/</id>
    <published>2025-05-19T03:52:45.000Z</published>
    <updated>2025-05-20T01:46:29.400Z</updated>
    
    <content type="html"><![CDATA[<p>在初期導入 Dify 建立<strong>企業資訊查詢流程</strong>時，我們使用了多個「代碼執行」節點來處理 API 回傳資料，例如提取統一編號與公司名稱。<br>然而，我們很快發現：這樣的設計對非工程背景的成員不夠友善，維護成本也偏高。</p><p>因此，我們重新思考了一個問題：</p><blockquote><p>能不能只透過自然語言與 LLM，讓流程變得更簡潔、更直覺？</p></blockquote><p>以下說明<strong>企業資訊查詢流程</strong>的資料來源與流程設計，並分享我們如何透過 LLM 來簡化流程設計。</p><h3 id="Dify-企業資料來源"><a href="#Dify-企業資料來源" class="headerlink" title="Dify 企業資料來源"></a>Dify 企業資料來源</h3><p>流程主要會透過使用<a href="https://data.gcis.nat.gov.tw/resources/swagger/index.html">商工行政資料開放平臺 Swagger</a> 及 <strong>2,000 大企業</strong>文件檢索的方式來取得企業的資訊。<br>會用以下的方式來取得資料，</p><p>1.統一編號 → 呼叫<strong>公司登記基本資料-應用一</strong>來取得公司資訊(統編、名稱、資本額、負責人…)</p><p>2.公司名稱 → 呼叫<strong>公司登記關鍵字查詢</strong>來取得公司資訊(統編、名稱、資本額、負責人…)</p><p>3.統一編號 → 呼叫<strong>公司登記基本資料-應用三</strong>來取得公司的營業項目</p><p>4.公司名稱 → 透過文件檢索的方式來取得是否在<strong>2,000 大企業</strong>之中的<strong>行業排名</strong></p><h3 id="Dify-流程設計"><a href="#Dify-流程設計" class="headerlink" title="Dify 流程設計"></a>Dify 流程設計</h3><p>1.允許使用者輸入「統一編號」或「公司名稱」來查詢，根據使用者輸入的查詢類型（統一編號或公司名稱），流程會分為兩條路徑進行處理</p><p>2.透過「問題分類器」讓 LLM 判斷使用者輸入的是「統一編號」或「公司名稱」</p><p>3.如果是「統一編號」<br>3.1.透過「 HTTP」 節點，呼叫「公司登記基本資料-應用一」來取得公司資訊(0, 1 筆)<br>3.2.如果發生錯誤或取不到任何資料，就要求使用者重新輸入<br>3.3.透過 「代碼執行」節點，從 HTTP 執行結果的內容中取出「公司名稱」，程式碼如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">&#123; arg1 &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(arg1);</span><br><span class="line">  <span class="keyword">const</span> companyName = data[<span class="number">0</span>]?.<span class="property">Company_Name</span> || <span class="string">&quot;無法擷取公司名稱&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">result</span>: companyName,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4.透過「 HTTP」 節點，呼叫「公司登記基本資料-應用三」來取得公司資訊<br>3.5.透過「代碼執行」節點，從 HTTP 執行結果的內容中取出「公司的營業項目」<br>3.6.用「公司名稱」透過文件檢索的方式來取得是否在<strong>2,000 大企業</strong>之中的<strong>行業排名</strong><br>3.7.將所有資訊組合起來，透過「LLM」節點整理後，輸出給使用者</p><p>4.如果是「公司名稱」<br>4.1.透過「 HTTP」 節點，呼叫「公司登記關鍵字查詢」來取得公司資訊(0, 1, 多筆)<br>4.2.如果發生錯誤、取不到任何資料或超過一筆，就要求使用者重新輸入<br>4.3.透過「代碼執行」節點，從 HTTP 執行結果的內容中取出「統一編號」，程式碼如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">&#123; arg1 &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(arg1);</span><br><span class="line">    <span class="keyword">const</span> businessNo = data[<span class="number">0</span>]?.<span class="property">Business_Accounting_NO</span> || <span class="string">&quot;無法擷取統一編號&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">result</span>: businessNo,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">result</span>: <span class="string">`解析失敗：<span class="subst">$&#123;error.message&#125;</span>`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.4.透過「HTTP」節點，呼叫「公司登記基本資料-應用三」來取得公司資訊<br>4.5.透過「代碼執行」節點，從 HTTP 執行結果的內容中取出「公司的營業項目」<br>4.6.用「公司名稱」透過文件檢索的方式來取得是否在<strong>2,000 大企業</strong>之中的<strong>行業排名</strong><br>4.7.將所有資訊組合起來，透過「LLM」節點整理後，輸出給使用者</p><p>Dify 的流程畫面如下:</p><img src="/2025/05/19/build-dify-flow-without-code/01.png" class="" title="代碼執行"><p>以上「代碼執行」節點的程式碼，雖然不會很複雜，但對非工程背景的成員來說，還是會有些難度。<br>如果將這些內容交由 LLM 來處理，那麼流程會變得更加簡單、直覺。</p><h3 id="Dify-改善流程"><a href="#Dify-改善流程" class="headerlink" title="Dify 改善流程"></a>Dify 改善流程</h3><p>1.直接呼叫「公司登記基本資料-應用一」及「公司登記關鍵字查詢」將結果透過「LLM」節點來判斷是否有找到正確的公司資訊，Prompt 如下，</p><img src="/2025/05/19/build-dify-flow-without-code/05.png" class="" title="匯總查統編及公司名稱的資料的Prompt"><p>2.如果「LLM」節點輸出內容包含「請重新查詢」，則要求使用者重新輸入</p><p>3.透過「LLM」節點來取出「公司名稱」及「統一編號」<br>在 Dify 從開始到取出「公司名稱」及「統一編號」，靠 LLM 節點來處理，如下圖:</p><img src="/2025/05/19/build-dify-flow-without-code/09.png" class="" title="Dify 前半段流程"><p>4.透過「HTTP」節點，呼叫「公司登記基本資料-應用三」來取得公司資訊</p><p>5.用「公司名稱」透過文件檢索的方式來取得是否在<strong>2,000 大企業</strong>之中的<strong>行業排名</strong></p><p>6.將所有資訊組合起來，透過「LLM」節點整理後，輸出給使用者，Prompt 如下，</p><img src="/2025/05/19/build-dify-flow-without-code/06.png" class="" title="匯整所有公司資訊的Prompt"><p>Dify 步驟 4 ~ 6 的流程畫面如下:</p><img src="/2025/05/19/build-dify-flow-without-code/10.png" class="" title="Dify 後半段流程"><p>改善後的整個 Dify 流程畫面如下:</p><img src="/2025/05/19/build-dify-flow-without-code/02.png" class="" title="代碼執行"><p>先將資料準備好，再透過 LLM 進行匯整，整個流程簡潔了很多。<br>以下為用「統一編號」來查詢的企業資訊，如下圖，</p><img src="/2025/05/19/build-dify-flow-without-code/07.png" class="" title="以統編來查詢"><p>以下為用「公司名稱」來查詢的企業資訊，如下圖，</p><img src="/2025/05/19/build-dify-flow-without-code/08.png" class="" title="以名稱來查詢"><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>以上我們成功將原本仰賴「代碼執行」節點的設計，轉換為以 LLM 為核心、自然語言驅動的架構。<br>這不僅大幅降低了維護與學習門檻，讓非工程背景的同仁也能輕鬆參與流程設計，更讓整體查詢流程變得直覺、彈性且易於擴充。<br>最終流程可以簡化為三步驟：準備資料 → 交由 LLM 推論處理 → 直接輸出結果，大幅提升可維護性與開發效率。<br>以上提供的 Prompt 範例，僅供參考，實際使用時請根據需求進行調整。</p><h3 id="文件檢索查詢問題分享"><a href="#文件檢索查詢問題分享" class="headerlink" title="文件檢索查詢問題分享"></a>文件檢索查詢問題分享</h3><p>問題說明:<br>在<strong>2,000 大企業</strong>文件檢索時，如果用公司全稱(華邦電子股份有限公司)，查出的華邦電子不在第一筆的話，如下圖，</p><img src="/2025/05/19/build-dify-flow-without-code/03.png" class="" title="公司全稱查詢"><p>可以加一個「模版轉換」節點，「公司名稱」組成<strong>完整語意單元句</strong>，為<code>公司名稱為&#123;&#123; 公司名稱參數 &#125;&#125;，行業排名是多少</code><br>這樣就可以在第一筆查到「華邦電子」，如下圖，</p><img src="/2025/05/19/build-dify-flow-without-code/04.png" class="" title="完整語意單元句"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://data.gcis.nat.gov.tw/od/datacategory">商工行政資料開放平臺</a><br><a href="https://data.gcis.nat.gov.tw/resources/swagger/index.html">商工行政資料開放平臺 Swagger</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在初期導入 Dify 建立&lt;strong&gt;企業資訊查詢流程&lt;/strong&gt;時，我們使用了多個「代碼執行」節點來處理 API 回傳資料，例如提取統一編號與公司名稱。&lt;br&gt;然而，我們很快發現：這樣的設計對非工程背景的成員不夠友善，維護成本也偏高。&lt;/p&gt;
&lt;p&gt;因此，我們重</summary>
      
    
    
    
    
    <category term="Dify 流程設計" scheme="https://rainmakerho.github.io/tags/Dify-%E6%B5%81%E7%A8%8B%E8%A8%AD%E8%A8%88/"/>
    
    <category term="零程式碼 AI" scheme="https://rainmakerho.github.io/tags/%E9%9B%B6%E7%A8%8B%E5%BC%8F%E7%A2%BC-AI/"/>
    
    <category term="LLM 自動化流程" scheme="https://rainmakerho.github.io/tags/LLM-%E8%87%AA%E5%8B%95%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
    
    <category term="Dify 教學" scheme="https://rainmakerho.github.io/tags/Dify-%E6%95%99%E5%AD%B8/"/>
    
    <category term="查詢企業資訊" scheme="https://rainmakerho.github.io/tags/%E6%9F%A5%E8%A9%A2%E4%BC%81%E6%A5%AD%E8%B3%87%E8%A8%8A/"/>
    
    <category term="無程式自動化" scheme="https://rainmakerho.github.io/tags/%E7%84%A1%E7%A8%8B%E5%BC%8F%E8%87%AA%E5%8B%95%E5%8C%96/"/>
    
    <category term="AI 工作流程設計" scheme="https://rainmakerho.github.io/tags/AI-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A8%AD%E8%A8%88/"/>
    
    <category term="Dify 範例" scheme="https://rainmakerho.github.io/tags/Dify-%E7%AF%84%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</title>
    <link href="https://rainmakerho.github.io/2025/05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/"/>
    <id>https://rainmakerho.github.io/2025/05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/</id>
    <published>2025-05-14T09:23:18.000Z</published>
    <updated>2025-05-29T07:15:01.680Z</updated>
    
    <content type="html"><![CDATA[<p>本篇延續上篇文章<a href="../wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a>，將 SidePanel 擴充優化為「類 ChatGPT」對話介面，並加入 LLM 設定功能，探索如何結合 LangChain 與 Chrome Extension 打造更智慧的 AI 助手。</p><h3 id="實作-類-ChatGPT」對話介面，並加入-LLM-設定功能"><a href="#實作-類-ChatGPT」對話介面，並加入-LLM-設定功能" class="headerlink" title="實作 類 ChatGPT」對話介面，並加入 LLM 設定功能"></a>實作 類 ChatGPT」對話介面，並加入 LLM 設定功能</h3><p>網路上有許多的 Chat UI ，例如 <a href="https://github.com/run-llama/chat-ui">run-llama&#x2F;chat-ui</a>, <a href="https://github.com/reaviz/reachat">reactchat</a> 及 <a href="https://github.com/ant-design/x">Ant Design X</a> 等其他類似工具，本專案採用 <a href="https://github.com/ant-design/x">Ant Design X</a> 來建立對話機器人的界面，因為它使用起來相對比較容易。</p><p>1.安裝套件<br>首先，我們需要安裝 <code>@ant-design/x</code> 和 <code>@ant-design/v5-patch-for-react-19</code> (如果使用 react 19 要安裝這個套件) 及其他需要的套件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ant-design/x @ant-design/v5-patch-for-react-19 dayjs markdown-it</span><br></pre></td></tr></table></figure><p>2.建立 Header (<code>entrypoints/sidepanel/ChatHeader.tsx</code>)<br>Header 包含標題、新對話按鈕及開啟設定按鈕：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Space</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PlusOutlined</span>, <span class="title class_">SettingOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/icons&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ChatHeaderProps</span> &#123;</span><br><span class="line">  onNewSession?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  openSettings?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ChatHeader</span> = (<span class="params">&#123; onNewSession, openSettings &#125;: ChatHeaderProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;chat-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;chat-header-title&quot;</span>&gt;</span>✨ AI Copilot<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Space</span> <span class="attr">size</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">PlusOutlined</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          onClick=&#123;onNewSession&#125;</span></span><br><span class="line"><span class="language-xml">          className=&quot;chat-header-button&quot;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SettingOutlined</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          onClick=&#123;openSettings&#125;</span></span><br><span class="line"><span class="language-xml">          className=&quot;chat-header-button&quot;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChatHeader</span>;</span><br></pre></td></tr></table></figure><p>3.建立設定畫面 (<code>entrypoints/sidepanel/SettingsPanel.tsx</code>)<br>建立簡單的 LLM 設定畫面，包含 apiUrl, apiKey, model 輸入框及存檔&#x2F;取消按鈕：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Card</span>, <span class="title class_">Input</span>, <span class="title class_">Button</span>, message, <span class="title class_">Form</span>, <span class="title class_">Space</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SettingsPanelProps</span> &#123;</span><br><span class="line">  <span class="attr">onClose</span>: <span class="function">(<span class="params">isSaved: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SettingsPanel</span> = (<span class="params">&#123; onClose &#125;: SettingsPanelProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [form] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>();</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&quot;apiUrl&quot;</span>, <span class="string">&quot;apiKey&quot;</span>, <span class="string">&quot;model&quot;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">      form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">        <span class="attr">apiUrl</span>: result.<span class="property">apiUrl</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">apiKey</span>: result.<span class="property">apiKey</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">model</span>: result.<span class="property">model</span> || <span class="string">&quot;gpt-4.1&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [form]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSave</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = <span class="keyword">await</span> form.<span class="title function_">validateFields</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;取得的值:&quot;</span>, values);</span><br><span class="line">      chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(values, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        message.<span class="title function_">success</span>(<span class="string">&quot;設定已儲存！&quot;</span>);</span><br><span class="line">        <span class="title function_">onClose</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (errorInfo) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Save Error&quot;</span>, errorInfo);</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&quot;Save Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    form.<span class="title function_">resetFields</span>();</span><br><span class="line">    message.<span class="title function_">info</span>(<span class="string">&quot;已取消變更&quot;</span>);</span><br><span class="line">    <span class="title function_">onClose</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&quot;✨ AI Copilot LLM 設定&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form</span> <span class="attr">form</span>=<span class="string">&#123;form&#125;</span> <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">onFinish</span>=<span class="string">&#123;handleSave&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;API URL&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">false</span>, <span class="attr">message:</span> &quot;<span class="attr">請輸入</span> <span class="attr">API</span> <span class="attr">URL</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;例如：https://api.example.com&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;API Key&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;apiKey&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &quot;<span class="attr">請輸入</span> <span class="attr">API</span> <span class="attr">Key</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input.Password</span> <span class="attr">placeholder</span>=<span class="string">&quot;請輸入你的 API Key&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;Model Name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;model&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &quot;<span class="attr">請輸入</span> <span class="attr">Model</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;gpt-4.1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Space</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &quot;<span class="attr">100</span>%&quot;, <span class="attr">justifyContent:</span> &quot;<span class="attr">space-between</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleCancel&#125;</span> <span class="attr">block</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              取消</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">block</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              儲存設定</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SettingsPanel</span>;</span><br></pre></td></tr></table></figure><p>4.建立對話 UI(<code>entrypoints/sidepanel/ChatUi.tsx</code>)<br>主要的 UI 包含 Header、訊息歷史（顯示過往對話）以及對話框（用於輸入新訊息）。<br>使用 markdown 格式來顯示對話(<code>renderMarkdown</code>), rolesAsObject 是用來設定訊息依不同角色設定不同的顏色及 icon。<br>當設定完成後或是 Tab URL 有改變時，要重新建立新的 Agent。<br>使用者輸入訊息，按下送出後，會透過 Agent 來處理(<code>agentRef.current.invoke</code>)。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Bubble</span>, <span class="title class_">Sender</span>, <span class="title class_">BubbleProps</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/x&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserOutlined</span>, <span class="title class_">RobotOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createChatAgent &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/agents&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">GetProp</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChatHeader</span> <span class="keyword">from</span> <span class="string">&quot;./ChatHeader&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SettingsPanel</span> <span class="keyword">from</span> <span class="string">&quot;./SettingsPanel&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Conversation</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/x/es/conversations&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&quot;dayjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> markdownit <span class="keyword">from</span> <span class="string">&quot;markdown-it&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Typography</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; agentConfig &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/types/agentConfig&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">TAB_URL_CHANGED</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md = <span class="title function_">markdownit</span>(&#123; <span class="attr">html</span>: <span class="literal">false</span>, <span class="attr">breaks</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ROLE_AI</span> = <span class="string">&quot;assistant&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ROLE_HUMAN</span> = <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">renderMarkdown</span>: <span class="title class_">BubbleProps</span>[<span class="string">&quot;messageRender&quot;</span>] = <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//console.log(&quot;content&quot;, content);</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Typography</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">md.render</span>(<span class="attr">content</span>) &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Typography</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">rolesAsObject</span>: <span class="title class_">GetProp</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Bubble</span>.<span class="property">List</span>, <span class="string">&quot;roles&quot;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">assistant</span>: &#123;</span><br><span class="line">    <span class="attr">placement</span>: <span class="string">&quot;start&quot;</span>,</span><br><span class="line">    <span class="attr">avatar</span>: &#123;</span><br><span class="line">      <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">RobotOutlined</span> /&gt;</span></span>,</span><br><span class="line">      <span class="attr">style</span>: &#123; <span class="attr">background</span>: <span class="string">&quot;#398eff&quot;</span>, <span class="attr">margin</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">typing</span>: &#123; <span class="attr">step</span>: <span class="number">5</span>, <span class="attr">interval</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    <span class="attr">styles</span>: &#123;</span><br><span class="line">      <span class="attr">content</span>: &#123; <span class="attr">margin</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">messageRender</span>: renderMarkdown,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">placement</span>: <span class="string">&quot;end&quot;</span>,</span><br><span class="line">    <span class="attr">avatar</span>: &#123;</span><br><span class="line">      <span class="attr">icon</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">UserOutlined</span> /&gt;</span></span>,</span><br><span class="line">      <span class="attr">style</span>: &#123; <span class="attr">background</span>: <span class="string">&quot;#87d068&quot;</span>, <span class="attr">margin</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">styles</span>: &#123;</span><br><span class="line">      <span class="attr">content</span>: &#123; <span class="attr">margin</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ChatUi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [input, setInput] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [controller, setController] = useState&lt;<span class="title class_">AbortController</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [messages, setMessages] = useState&lt;<span class="title class_">Array</span>&lt;<span class="title class_">BubbleProps</span>&gt;&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [sessionList, setSessionList] = useState&lt;<span class="title class_">Conversation</span>[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [curSession, setCurSession] = useState&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> [showSettings, setShowSettings] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [apiSettings, setApiSettings] = useState&lt;agentConfig&gt;(&#123;</span><br><span class="line">    <span class="attr">apiUrl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> agentRef = useRef&lt;<span class="built_in">any</span>&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> apiSettingsRef = <span class="title function_">useRef</span>(apiSettings);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">newSession</span>();</span><br><span class="line">    <span class="title function_">loadSettingsFromStorage</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleMessage</span>(<span class="params">message: <span class="built_in">any</span>, sender: <span class="built_in">any</span>, sendResponse: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (message.<span class="property">type</span> === <span class="variable constant_">TAB_URL_CHANGED</span>) &#123;</span><br><span class="line">        agentRef.<span class="property">current</span> = <span class="title function_">createChatAgent</span>(apiSettingsRef.<span class="property">current</span>, message.<span class="property">url</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(handleMessage);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">removeListener</span>(handleMessage);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    apiSettingsRef.<span class="property">current</span> = apiSettings;</span><br><span class="line">  &#125;, [apiSettings]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loadSettingsFromStorage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&quot;apiUrl&quot;</span>, <span class="string">&quot;apiKey&quot;</span>, <span class="string">&quot;model&quot;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> settings = &#123;</span><br><span class="line">        <span class="attr">apiUrl</span>: result.<span class="property">apiUrl</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">apiKey</span>: result.<span class="property">apiKey</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">model</span>: result.<span class="property">model</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">setApiSettings</span>(settings);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 建立 agent 並存入 useRef</span></span><br><span class="line">      chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">tabs</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = tabs[<span class="number">0</span>]?.<span class="property">url</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">        agentRef.<span class="property">current</span> = <span class="title function_">createChatAgent</span>(settings, url);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">newSession</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> timeNow = <span class="title function_">dayjs</span>().<span class="title function_">valueOf</span>().<span class="title function_">toString</span>();</span><br><span class="line">    <span class="title function_">setSessionList</span>([</span><br><span class="line">      &#123; <span class="attr">key</span>: timeNow, <span class="attr">label</span>: <span class="string">&quot;New session&quot;</span>, <span class="attr">group</span>: <span class="string">&quot;Today&quot;</span> &#125;,</span><br><span class="line">      ...sessionList,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="title function_">setCurSession</span>(timeNow);</span><br><span class="line">    <span class="title function_">setMessages</span>([]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setController</span>(newController);</span><br><span class="line">    <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> query = input;</span><br><span class="line">    <span class="title function_">setMessages</span>(<span class="function">(<span class="params">prevMessages</span>) =&gt;</span> [</span><br><span class="line">      ...prevMessages,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">content</span>: query,</span><br><span class="line">        <span class="attr">role</span>: <span class="variable constant_">ROLE_HUMAN</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> agentOutput = <span class="keyword">await</span> agentRef.<span class="property">current</span>.<span class="title function_">invoke</span>(</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">messages</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">role</span>: <span class="variable constant_">ROLE_HUMAN</span>,</span><br><span class="line">              <span class="attr">content</span>: query,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">signal</span>: newController.<span class="property">signal</span> &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">var</span> text = agentOutput.<span class="property">messages</span>[agentOutput.<span class="property">messages</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">content</span>;</span><br><span class="line">      <span class="title function_">setMessages</span>(<span class="function">(<span class="params">prevMessages</span>) =&gt;</span> [</span><br><span class="line">        ...prevMessages,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">content</span>: text,</span><br><span class="line">          <span class="attr">role</span>: <span class="variable constant_">ROLE_AI</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">      <span class="title function_">setInput</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error during agent.invoke:&quot;</span>, error);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (controller) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Aborting request...&quot;</span>);</span><br><span class="line">      controller.<span class="title function_">abort</span>(); <span class="comment">// 中止當前請求</span></span><br><span class="line">      <span class="title function_">setController</span>(<span class="literal">null</span>); <span class="comment">// 清除 controller</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSettingsClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setShowSettings</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCloseSettings</span> = (<span class="params">isSaved: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSaved) <span class="title function_">loadSettingsFromStorage</span>();</span><br><span class="line">    <span class="title function_">setShowSettings</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> mainContent = !showSettings ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;chat-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChatHeader</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onNewSession</span>=<span class="string">&#123;newSession&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">openSettings</span>=<span class="string">&#123;handleSettingsClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Bubble.List</span> <span class="attr">items</span>=<span class="string">&#123;messages&#125;</span> <span class="attr">roles</span>=<span class="string">&#123;rolesAsObject&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Bubble.List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sender</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;setInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loading</span>=<span class="string">&#123;isLoading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;請輸入訊息...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onCancel</span>=<span class="string">&#123;handleCancel&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SettingsPanel</span> <span class="attr">onClose</span>=<span class="string">&#123;handleCloseSettings&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;mainContent&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>utils\types\message.ts</code>中加入<code>export const TAB_URL_CHANGED = &quot;TAB_URL_CHANGED&quot;;</code></p><p>5.在<code>entrypoints\background.ts</code>中加入當前頁面 URL 變化時，發送<code>TAB_URL_CHANGED</code>事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">TAB_URL_CHANGED</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineBackground</span>(&#123;</span><br><span class="line">  <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      chrome.<span class="property">sidePanel</span>.<span class="title function_">setPanelBehavior</span>(&#123; <span class="attr">openPanelOnActionClick</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="property">onUpdated</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">tabId, changeInfo, tab</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (changeInfo.<span class="property">url</span>) &#123;</span><br><span class="line">        chrome.<span class="property">runtime</span>.<span class="title function_">sendMessage</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="variable constant_">TAB_URL_CHANGED</span>,</span><br><span class="line">          <span class="attr">url</span>: changeInfo.<span class="property">url</span>,</span><br><span class="line">          tabId,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="property">onActivated</span>.<span class="title function_">addListener</span>(<span class="keyword">async</span> (&#123; tabId &#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> tab = <span class="keyword">await</span> chrome.<span class="property">tabs</span>.<span class="title function_">get</span>(tabId);</span><br><span class="line">      <span class="keyword">if</span> (tab.<span class="property">url</span>) &#123;</span><br><span class="line">        chrome.<span class="property">runtime</span>.<span class="title function_">sendMessage</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="variable constant_">TAB_URL_CHANGED</span>,</span><br><span class="line">          <span class="attr">url</span>: tab.<span class="property">url</span>,</span><br><span class="line">          tabId,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.加入 CSS 設定(<code>entrypoints\sidepanel\style.css</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-id">#root</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chat-container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chat-header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 垂直置中 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between; <span class="comment">/* 左右兩端對齊，中間留空 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>; <span class="comment">/* 視覺上好看一點 */</span></span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>; <span class="comment">/* 可選，做個底線分隔 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chat-header-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chat-header-button</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ant-bubble-list</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto; <span class="comment">/* 撐開剩餘空間 */</span></span><br><span class="line">  <span class="attribute">overflow-y</span>: auto; <span class="comment">/* 可以滾動聊天內容 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto; <span class="comment">/* 輸入欄固定高度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.將對話 UI 加入 <code>entrypoints/sidepanel/App.tsx</code> 之中</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ChatUi</span> <span class="keyword">from</span> <span class="string">&quot;./ChatUi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ChatUi</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>最後，執行 <code>npm run dev</code> ，<br>先到設定頁面設定 LLM ，再回到對話頁面，進行對話。</p><img src="/2025/05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/01.png" class="" title="settingPanel"><p>針對網頁重點整理，</p><img src="/2025/05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/02.png" class="" title="對話"><p>查看 Agent 的 network 記錄，</p><img src="/2025/05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/03.png" class="" title="call api"><p>在 messages 中，<br>0: 是使用者發出的訊息，<br>1: 是 LLM 要取 Call Tool 的訊息，<br>2: 是 Agent 呼叫 Tool 的結果<br>這些訊息一併發給 LLM，LLM 會根據這些訊息進行回覆。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>本篇文章實作了將原本的 SidePanel UI 優化為具備完整對話介面的 AI 助手，並加入設定頁面，讓使用者可以靈活調整 LLM 的參數與 API 資訊。<br>透過 Ant Design X 提供的 Chat UI 元件，我們快速建立了現代化的對話體驗，同時搭配 LangChain Agent 讓 SidePanel 對話具備語境感知與網頁背景整合的能力。</p><p>這樣的架構不僅可用於簡單的聊天用途，也為日後整合更多工具（如資料擷取、表單填寫、自動化操作等）奠定基礎。<br>例如針對表單系統，可以貼上合約內容來與畫面欄位進行比對，讓 AI 助手幫我們找出應該填寫的資訊，如下圖所示：</p><img src="/2025/05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm/04.png" class="" title="合約內容比對"><h3 id="未來展望"><a href="#未來展望" class="headerlink" title="未來展望"></a>未來展望</h3><p>未來可進一步考慮加入：</p><ul><li>對話訊息的持久化與同步</li><li>工具（Tool）模組的整合（如查詢網頁內容、搜尋引擎等）</li><li>上傳附件進行處理<br>…</li></ul><p>透過 Chrome 擴充功能結合 LLM，能將 AI 由「問答工具」進化為「主動型助理」，解鎖更多生產力場景。<br>程式碼可以參考:<a href="https://github.com/rainmakerho/wxtagent/tree/25.05.01">wxtagent 程式碼</a></p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="../../../05/12/ai-browser-extension-integration">用 Browser Extension 打造具網頁背景感知的 AI 助理，補足 LLM 的視野盲點</a><br><a href="../../../05/12/ai-browser-extension-context-bridge">為什麼 AI 工具需要瀏覽器擴充功能來補全 Web 背景？</a><br><a href="../../../05/12/wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a><br><a href="https://github.com/rainmakerho/wxtagent/tree/25.05.01">wxtagent 程式碼</a><br><a href="../../../05/29/ai-autofill-browser-extension/">AI 自動填表，一鍵搞定！最強 Browser Extension 全教學</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇延續上篇文章&lt;a href=&quot;../wxt-langchain-ai-sidepanel-chrome-extension&quot;&gt;如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能&lt;/a&gt;，將 SidePanel 擴充</summary>
      
    
    
    
    
    <category term="LangChain" scheme="https://rainmakerho.github.io/tags/LangChain/"/>
    
    <category term="MCP-style" scheme="https://rainmakerho.github.io/tags/MCP-style/"/>
    
    <category term="WXT" scheme="https://rainmakerho.github.io/tags/WXT/"/>
    
    <category term="Chrome Extension" scheme="https://rainmakerho.github.io/tags/Chrome-Extension/"/>
    
    <category term="SidePanel" scheme="https://rainmakerho.github.io/tags/SidePanel/"/>
    
    <category term="AI工具整合" scheme="https://rainmakerho.github.io/tags/AI%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>使用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</title>
    <link href="https://rainmakerho.github.io/2025/05/12/wxt-langchain-ai-sidepanel-chrome-extension/"/>
    <id>https://rainmakerho.github.io/2025/05/12/wxt-langchain-ai-sidepanel-chrome-extension/</id>
    <published>2025-05-12T09:30:33.000Z</published>
    <updated>2025-05-29T02:20:32.216Z</updated>
    
    <content type="html"><![CDATA[<p>延續前一篇，本篇將開始實作，目標如下：</p><blockquote><p>建立一個具備 AI agent 功能的 SidePanel，讓使用者按下 Button 後，LangChain Agent 能夠觸發對頁面的操作。</p></blockquote><h3 id="WXT-專案初始化與-SidePanel-註冊"><a href="#WXT-專案初始化與-SidePanel-註冊" class="headerlink" title="WXT 專案初始化與 SidePanel 註冊"></a>WXT 專案初始化與 SidePanel 註冊</h3><p>安裝 wxt 與初始化(目錄為 wxtagent, 使用 react)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wxt@latest init wxtagent -t react</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd wxtagent</span><br><span class="line">npm install</span><br><span class="line">npm install @types/chrome --save-dev</span><br></pre></td></tr></table></figure><ul><li>註：@types&#x2F;chrome 套件是 Chrome Extension 的型別定義檔</li></ul><p>執行 <code>npm run dev</code> 後，Chrome 會自動開啟，讓我們測試這個 extension。<br>此時，按下 extension 的 icon 預設會開啟 popup 畫面，如下圖，</p><img src="/2025/05/12/wxt-langchain-ai-sidepanel-chrome-extension/01.png" class="" title="popup"><h5 id="按下-icon-改成開啟-SidePanel"><a href="#按下-icon-改成開啟-SidePanel" class="headerlink" title="按下 icon 改成開啟 SidePanel"></a>按下 icon 改成開啟 SidePanel</h5><p>將<code>entrypoints</code>目錄中的<code>popup</code>目錄名稱改為 <code>sidepanel</code>，</p><ul><li><code>entrypoints</code>的設定，請參考 <a href="https://wxt.dev/guide/essentials/entrypoints.html#including-other-files">entrypoints Including Other Files</a></li></ul><p>在<code>background.ts</code>中，設定按下 extension 的 icon 改成開啟 <strong>SidePanel</strong>，程式如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineBackground</span>(&#123;</span><br><span class="line">  <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      chrome.<span class="property">sidePanel</span>.<span class="title function_">setPanelBehavior</span>(&#123; <span class="attr">openPanelOnActionClick</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>執行 <code>npm run dev</code> 後，點擊 extension 的 icon，可以發現，它會顯示 <strong>SidePanel</strong>，而不是 popup ，如下圖所示，</p><img src="/2025/05/12/wxt-langchain-ai-sidepanel-chrome-extension/02.png" class="" title="sidepanel"><p>使用 WXT 開發 Extension 相當方便，能快速進行 SidePanel 的建置。</p><h3 id="建立-LangChain-Agent"><a href="#建立-LangChain-Agent" class="headerlink" title="建立 LangChain Agent"></a>建立 LangChain Agent</h3><p>在完成 SidePanel 基礎架構後，接著整合 LangChain，使 AI agent 能與網頁互動。<br>LangChain 是一種基於語言模型的應用程式開發框架，並且支持使用 JavaScript 進行開發。<br>接下來，安裝 LangChain 需要的套件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @langchain/core @langchain/langgraph @langchain/openai browser-extension-url-match</span><br></pre></td></tr></table></figure><p>新增一個 <code>utils</code> 目錄，並在其中建立 <code>types</code>、<code>handlers</code> 和 <code>tools</code> 子目錄。<br>以下先建立<code>取得網頁內容 (pageContent)</code>這個 Tool：</p><p>1.定義 <strong>message</strong> 的 <strong>Request</strong> 及 <strong>Response</strong> 的格式(<code>utils/types/message.ts</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義請求的型別</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> messageRequest = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  payload?: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義回應的型別</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> messageResponse = &#123;</span><br><span class="line">  result?: <span class="built_in">string</span>; <span class="comment">// 成功時的內容</span></span><br><span class="line">  error?: <span class="built_in">string</span>; <span class="comment">// 錯誤訊息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">MESSAGE_TOOL_TYPES</span> = &#123;</span><br><span class="line">  <span class="attr">PAGE_CONTENT</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;pageContent&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;取得整個網頁的純文字內容&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">BIZ_EXTRACT_FIELDS</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;bizformExtractFields&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;擷取目前頁面中所有可輸入的欄位名稱與其值（如文字欄位、下拉選單、日期等）&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這裡是定義共通的 message&#x2F;tool 的內容及描述，描述很重要，因為它有助於 LLM 了解是否要呼叫特定的 tool</p><p>2.定義 LLM 需要的資訊(<code>utils/types/agentConfig.ts</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> agentConfig &#123;</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">apiUrl</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">model</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相容於 openai 的 LLM 都可以使用</p><p>3.建立 <strong>sendMessage</strong> 向 content-script 傳遞訊息，並等待回應(<code>utils/message.ts</code>) 方便 tool 使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; messageRequest, messageResponse &#125; <span class="keyword">from</span> <span class="string">&quot;./types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封裝 sendMessage 函式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> sendMessage&lt;T = <span class="built_in">unknown</span>&gt;(</span><br><span class="line">  <span class="attr">message</span>: messageRequest</span><br><span class="line">): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;T&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">tabs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tabId = tabs[<span class="number">0</span>]?.<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (tabId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No active tab found.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(tabId, message, <span class="function">(<span class="params">response: messageResponse</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (chrome.<span class="property">runtime</span>.<span class="property">lastError</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(chrome.<span class="property">runtime</span>.<span class="property">lastError</span>.<span class="property">message</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">error</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(response.<span class="property">error</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(response.<span class="property">result</span> <span class="keyword">as</span> T);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.建立 Agent 需要的<strong>取得網頁內容</strong>的 Tool (<code>utils/tools/pageContentTool.ts</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tool &#125; <span class="keyword">from</span> <span class="string">&quot;@langchain/core/tools&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sendMessage &#125; <span class="keyword">from</span> <span class="string">&quot;../message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">MESSAGE_TOOL_TYPES</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> noOp = z.<span class="title function_">string</span>().<span class="title function_">optional</span>().<span class="title function_">describe</span>(<span class="string">&quot;No-op parameter.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pageContentTool = <span class="title function_">tool</span>(</span><br><span class="line">  <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> sendMessage&lt;<span class="built_in">string</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">PAGE_CONTENT</span>.<span class="property">name</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">PAGE_CONTENT</span>.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">PAGE_CONTENT</span>.<span class="property">description</span>,</span><br><span class="line">    <span class="attr">schema</span>: z.<span class="title function_">object</span>(&#123;</span><br><span class="line">      noOp,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>此處的 sendMessage 用於向 content-script 傳遞訊息，並等待回應。它是工具與網頁內容交互的核心方法</p></blockquote><p>5.提供依不同網址來取得可使用的 Tools 的 method (<code>utils/tools/index.ts</code>)，match url 的方式跟 extension 相同，所以使用 <code>browser-extension-url-match</code> 這個套件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; matchPattern &#125; <span class="keyword">from</span> <span class="string">&quot;browser-extension-url-match&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; pageContentTool &#125; <span class="keyword">from</span> <span class="string">&quot;./pageContentTool&quot;</span>;</span><br><span class="line"><span class="comment">//import &#123; bizformExtractFieldsTool &#125; from &quot;./bizformExtractFieldsTool&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tools = [pageContentTool];</span><br><span class="line"><span class="keyword">export</span> &#123; tools &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toolRules = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>], <span class="comment">// 默認匹配</span></span><br><span class="line">    <span class="attr">tools</span>: [pageContentTool],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 可針對不同網站設定可提供的 Tools</span></span><br><span class="line">  <span class="comment">//   &#123;</span></span><br><span class="line">  <span class="comment">//     matches: [&quot;https://bizform.vitalyun.com/*&quot;],</span></span><br><span class="line">  <span class="comment">//     tools: [bizformExtractFieldsTool],</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getToolsByUrl</span>(<span class="params">url: <span class="built_in">string</span></span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> matchedTools = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> rule <span class="keyword">of</span> toolRules) &#123;</span><br><span class="line">    <span class="keyword">const</span> matcher = <span class="title function_">matchPattern</span>(rule.<span class="property">matches</span>);</span><br><span class="line">    <span class="keyword">if</span> (matcher.<span class="property">valid</span> &amp;&amp; matcher.<span class="title function_">match</span>(url)) &#123;</span><br><span class="line">      rule.<span class="property">tools</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">tool</span>) =&gt;</span> matchedTools.<span class="title function_">add</span>(tool));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(matchedTools); <span class="comment">// 將 Set 轉換為 Array 並返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要有匹配到 url 的設定，就會使用相應的 Tools（可疊加且不重複）</p><p>6.建立處理訊息的 Handler(<code>utils/handlers/pageContentHandler.ts</code>)，這裡直接回傳<code>document.body.innerText</code> 的內容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; messageRequest, messageResponse &#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pageContentHandler = (</span><br><span class="line">  <span class="attr">message</span>: messageRequest</span><br><span class="line">): <span class="function"><span class="params">messageResponse</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7.建立處理訊息的 Handler 的集合 Handlers(<code>utils/handlers/index.ts</code>)，可讓 content-script 依 message.type 來取得對應的 handler (這裡的 key 用 <code>MESSAGE_TOOL_TYPES</code> 定義的內容)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  messageRequest,</span><br><span class="line">  messageResponse,</span><br><span class="line">  <span class="variable constant_">MESSAGE_TOOL_TYPES</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../types/message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; pageContentHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./pageContentHandler&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bizformExtractFieldsHandler &#125; <span class="keyword">from</span> <span class="string">&quot;./bizformExtractFieldsHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">handlers</span>: <span class="title class_">Record</span>&lt;</span><br><span class="line">  <span class="built_in">string</span>,</span><br><span class="line">  <span class="function">(<span class="params">message: messageRequest</span>) =&gt;</span> messageResponse</span><br><span class="line">&gt; = &#123;</span><br><span class="line">  [<span class="variable constant_">MESSAGE_TOOL_TYPES</span>.<span class="property">PAGE_CONTENT</span>.<span class="property">name</span>]: pageContentHandler,</span><br><span class="line">  <span class="comment">//[MESSAGE_TOOL_TYPES.BIZ_EXTRACT_FIELDS.name]: bizformExtractFieldsHandler,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>8.建立 Agent (<code>utils/agents.ts</code>)<br>透過 createReactAgent 來將 LLM 與 tools 結合起來，建立 Agent，而 tools 會依 tab 上的 url 來決定要使用哪些工具</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChatOpenAI</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@langchain/openai&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createReactAgent &#125; <span class="keyword">from</span> <span class="string">&quot;@langchain/langgraph/prebuilt&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToolsByUrl &#125; <span class="keyword">from</span> <span class="string">&quot;./tools&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; agentConfig &#125; <span class="keyword">from</span> <span class="string">&quot;./types/agentConfig&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createChatAgent</span>(<span class="params">config: agentConfig, url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; apiKey, apiUrl, model &#125; = config;</span><br><span class="line">  <span class="keyword">const</span> llm = <span class="keyword">new</span> <span class="title class_">ChatOpenAI</span>(&#123;</span><br><span class="line">    <span class="attr">configuration</span>: &#123;</span><br><span class="line">      <span class="attr">baseURL</span>: apiUrl,</span><br><span class="line">      <span class="attr">apiKey</span>: apiKey,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">model</span>: model,</span><br><span class="line">    <span class="attr">temperature</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tools = <span class="title function_">getToolsByUrl</span>(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactAgent</span>(&#123;</span><br><span class="line">    llm,</span><br><span class="line">    tools,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到這裡，已經完成了 message、tools 及 agent 的設計，接下來將實作按下 Button 時，讓 agent 呼叫 LLM 及 tool 取得網頁內容，並由 LLM 進行回答。</p><h3 id="透過-Agent-來總結網頁的內容"><a href="#透過-Agent-來總結網頁的內容" class="headerlink" title="透過 Agent 來總結網頁的內容"></a>透過 Agent 來總結網頁的內容</h3><p>1.設定<strong>manifest</strong>(wxt.config.ts)<br>由於工具需要透過 tabs 權限與網頁互動並傳遞訊息，因此需在 manifest 中加入 <strong>tabs</strong> 權限。若要將資料存起來，也需要 <strong>storage</strong> 權限。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;wxt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See https://wxt.dev/api/config.html</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&quot;@wxt-dev/module-react&quot;</span>],</span><br><span class="line">  <span class="attr">manifest</span>: <span class="function">(<span class="params">&#123; browser, manifestVersion, mode, command &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;WXT + Agent&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;WXT + Agent&quot;</span>,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">      <span class="attr">action</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">permissions</span>: [<span class="string">&quot;tabs&quot;</span>, <span class="string">&quot;storage&quot;</span>],</span><br><span class="line">      <span class="attr">host_permissions</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.<strong>content-script</strong>來處理<strong>message</strong>(<code>entrypoints/content.ts</code>)<br>這裡透過 <code>chrome.runtime.onMessage.addListener</code> 來接收訊息，並依 message.type 取得對應的 handler 進行處理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; messageRequest, messageResponse &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/types/message&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; handlers &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/handlers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineContentScript</span>(&#123;</span><br><span class="line">  <span class="attr">matches</span>: [<span class="string">&quot;&lt;all_urls&gt;&quot;</span>],</span><br><span class="line">  <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(</span><br><span class="line">      <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        message: messageRequest,</span></span></span><br><span class="line"><span class="params"><span class="function">        sender,</span></span></span><br><span class="line"><span class="params"><span class="function">        sendResponse: (response: messageResponse) =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="params"><span class="function">      </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = handlers[message.<span class="property">type</span>];</span><br><span class="line">        <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">          <span class="title function_">sendResponse</span>(<span class="title function_">handler</span>(message));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Unknown message type:&quot;</span>, message.<span class="property">type</span>);</span><br><span class="line">          <span class="title function_">sendResponse</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;Unknown message type&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.在<strong>SidePanel</strong>的<code>App.tsx</code>中，按下 Button 時，向<strong>Agent</strong>詢問問題</p><p>將原本的 Button click event 改成呼叫 <code>handleClick</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;handleClick&#125;&gt;count is &#123;count&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> query = <span class="string">&quot;請總結選取網頁的內容&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> settings = &#123;</span><br><span class="line">    <span class="attr">apiUrl</span>: <span class="string">&quot;你的 LLM url，如果是 openai 就留空&quot;</span>,</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&quot;LLM apikey&quot;</span>,</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&quot;gpt-4.1 or others ...&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">async</span> (tabs) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = tabs[<span class="number">0</span>]?.<span class="property">url</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> agent = <span class="title function_">createChatAgent</span>(settings, url);</span><br><span class="line">    <span class="keyword">let</span> agentOutput = <span class="keyword">await</span> agent.<span class="title function_">invoke</span>(&#123;</span><br><span class="line">      <span class="attr">messages</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">role</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: query,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">alert</span>(agentOutput.<span class="property">messages</span>[agentOutput.<span class="property">messages</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">content</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最後，執行 <code>npm run dev</code> ，隨意瀏覽任一網頁，然後按下 Button，即可顯示該網頁的總結，如下圖所示：</p><img src="/2025/05/12/wxt-langchain-ai-sidepanel-chrome-extension/04.png" class="" title="agent.invoke"><p>當按下 Button 時，會做以下幾個動作，</p><p>1.取得 tab 的 url ，並設定 LLM 的資訊，透過<strong>createChatAgent</strong>來建立<strong>Agent</strong></p><p>2.<strong>Agent</strong>將<code>請總結選取網頁的內容</code>傳給 LLM，並提供 Tools (pageContentTool) 資訊</p><p>3.LLM 發現需要呼叫 pageContentTool 時，回覆需要進行 call tool</p><p>4.<strong>Agent</strong>呼叫<strong>pageContentTool</strong>取得結果</p><p>4.1.<strong>pageContentTool</strong>透過<strong>chrome.tabs.sendMessage</strong>發送訊息</p><p>4.2.<strong>content.ts</strong>監聽到訊息，依 message.type 取得 handler(<strong>pageContentHandler</strong>)，回傳 Handler 的處理結果</p><p>5.<strong>Agent</strong>將<strong>pageContentTool</strong>的結果連同前面的訊息傳給 LLM</p><p>6.LLM 依使用者問題、pageContentTool 結果來進行回答，再回給<strong>Agent</strong></p><p>7.alert 出最後 LLM 的回答內容</p><p>流程如下，</p><img src="/2025/05/12/wxt-langchain-ai-sidepanel-chrome-extension/03.png" class="" title="agent process"><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>透過 WXT 和 LangChain 的結合，我們展示了如何快速構建一個功能強大的 Chrome 擴充功能，這不僅提升了開發效率，也為實現更智能的瀏覽器交互提供了可能性。<br>這種機制可以應用於多種場景，例如自動化網頁內容摘要、智能化數據提取，甚至更複雜的網頁操作。<br>下一步，我們將進一步優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="../ai-browser-extension-integration">用 Browser Extension 打造具網頁背景感知的 AI 助理，補足 LLM 的視野盲點</a><br><a href="../ai-browser-extension-context-bridge">為什麼 AI 工具需要瀏覽器擴充功能來補全 Web 背景？</a><br><a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a><br><a href="https://github.com/rainmakerho/wxtagent/tree/25.05.01">wxtagent程式碼</a><br><a href="../../../05/29/ai-autofill-browser-extension/">AI 自動填表，一鍵搞定！最強 Browser Extension 全教學</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;延續前一篇，本篇將開始實作，目標如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建立一個具備 AI agent 功能的 SidePanel，讓使用者按下 Button 後，LangChain Agent 能夠觸發對頁面的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 i</summary>
      
    
    
    
    
    <category term="LangChain" scheme="https://rainmakerho.github.io/tags/LangChain/"/>
    
    <category term="MCP-style" scheme="https://rainmakerho.github.io/tags/MCP-style/"/>
    
    <category term="WXT" scheme="https://rainmakerho.github.io/tags/WXT/"/>
    
    <category term="Chrome Extension" scheme="https://rainmakerho.github.io/tags/Chrome-Extension/"/>
    
    <category term="SidePanel" scheme="https://rainmakerho.github.io/tags/SidePanel/"/>
    
    <category term="AI工具整合" scheme="https://rainmakerho.github.io/tags/AI%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>為什麼 AI 工具需要瀏覽器擴充功能補全 Web 背景？</title>
    <link href="https://rainmakerho.github.io/2025/05/12/ai-browser-extension-context-bridge/"/>
    <id>https://rainmakerho.github.io/2025/05/12/ai-browser-extension-context-bridge/</id>
    <published>2025-05-12T09:12:28.000Z</published>
    <updated>2025-05-29T02:19:48.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AI-再聰明，也看不到你的畫面"><a href="#AI-再聰明，也看不到你的畫面" class="headerlink" title="AI 再聰明，也看不到你的畫面"></a>AI 再聰明，也看不到你的畫面</h3><p>當我們在企業內部導入 AI 工具（如 ChatGPT、Dify 等）時，即使它們具備強大的語言能力，也常會遇到一個關鍵問題：</p><blockquote><p>AI 無法理解你當下正在操作的頁面。</p></blockquote><p>舉例來說：</p><ul><li>你正在 CRM 系統查看客戶資料，卻要自己複製貼上給 AI 幫你摘要</li><li>你希望 AI 協助你填表、做建議，但它不知道表單有哪些欄位</li><li>你打算用 Dify 寫工具來整理內部報表，但你得先建立 API 來跟它串接</li></ul><p>這些狀況都有一個共同本質：AI 沒有「背景知識」與「畫面上下文」的來源。</p><h3 id="為什麼-API-無法解這個問題？"><a href="#為什麼-API-無法解這個問題？" class="headerlink" title="為什麼 API 無法解這個問題？"></a>為什麼 API 無法解這個問題？</h3><p>很多人第一時間會想到：我是不是該寫一組 API 提供 AI 資料？但這其實治標不治本。</p><ul><li>開發成本高，除了 API 外，還需要考量使用者驗證、資料存取 …</li><li>很多畫面資料可能是來自第三方、無法控制（如嵌入式報表、iframe）</li><li>使用者行為（滑鼠選取、視窗狀態）根本不是後端可以感知的</li></ul><p>這些背景資料，只有「使用者的瀏覽器」看得到。</p><h3 id="解法：用-browser-extension-拿到你該給-AI-的-context"><a href="#解法：用-browser-extension-拿到你該給-AI-的-context" class="headerlink" title="解法：用 browser extension 拿到你該給 AI 的 context"></a>解法：用 browser extension 拿到你該給 AI 的 context</h3><p>Chrome Extension 允許我們透過 content script 直接存取瀏覽器中的 DOM，進而：</p><ul><li>取得使用者選取的文字內容</li><li>擷取目前頁面表格、欄位、標籤等資料</li><li>根據網頁結構自動推論出 context</li></ul><p>再搭配一個 SidePanel UI，就能讓使用者直接發送 prompt，讓 LangChain agent 選用工具去「操作畫面」。這等於是：</p><blockquote><p>讓 AI 有了「眼睛」（可以看見網頁）與「手」（可以操作頁面）</p></blockquote><h3 id="技術選型：WXT-LangChain-Message"><a href="#技術選型：WXT-LangChain-Message" class="headerlink" title="技術選型：WXT + LangChain + Message"></a>技術選型：WXT + LangChain + Message</h3><ul><li><p>WXT：簡化 Chrome Extension 的開發流程，不需自己組 webpack、管理 manifest</p></li><li><p>LangChain.js：支援 function-call agent，可對接工具操作</p></li><li><p>Message 訊息結構：透過 message，將每個功能依 message.type 去執行對應的 handler</p></li></ul><p>這樣的架構，可以做到：</p><ul><li><p>每個工具獨立維護，容易擴充</p></li><li><p>透過訊息傳遞由 agent 工具觸發內容腳本</p></li><li><p>使用者不需要額外部署 API，所有資料直接由網頁端取得</p></li></ul><h3 id="下一步：SidePanel-Agent-初探"><a href="#下一步：SidePanel-Agent-初探" class="headerlink" title="下一步：SidePanel + Agent 初探"></a>下一步：SidePanel + Agent 初探</h3><p>在下一篇文章中，我們將開始實作一個基本的 SidePanel：</p><ul><li><p>使用者按下 button</p></li><li><p>LangChain agent 執行工具（如：取得網頁內容）</p></li><li><p>將答案 Alert 出來</p></li></ul><p>這會是我們無縫整合 AI 與 Web App 的第一步。</p><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.chrome.com/docs/extensions/get-started?hl=zh-tw">Chrome Browser Extension</a><br><a href="https://wxt.dev/">Wxt</a><br><a href="../ai-browser-extension-integration">用 Browser Extension 打造具網頁背景感知的 AI 助理，補足 LLM 的視野盲點</a><br><a href="../wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a><br><a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a><br><a href="https://github.com/rainmakerho/wxtagent/tree/25.05.01">wxtagent 程式碼</a><br><a href="../../../05/29/ai-autofill-browser-extension/">AI 自動填表，一鍵搞定！最強 Browser Extension 全教學</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;AI-再聰明，也看不到你的畫面&quot;&gt;&lt;a href=&quot;#AI-再聰明，也看不到你的畫面&quot; class=&quot;headerlink&quot; title=&quot;AI 再聰明，也看不到你的畫面&quot;&gt;&lt;/a&gt;AI 再聰明，也看不到你的畫面&lt;/h3&gt;&lt;p&gt;當我們在企業內部導入 AI 工具（如</summary>
      
    
    
    
    
    <category term="AI整合" scheme="https://rainmakerho.github.io/tags/AI%E6%95%B4%E5%90%88/"/>
    
    <category term="LangChain" scheme="https://rainmakerho.github.io/tags/LangChain/"/>
    
    <category term="WXT" scheme="https://rainmakerho.github.io/tags/WXT/"/>
    
    <category term="無API架構" scheme="https://rainmakerho.github.io/tags/%E7%84%A1API%E6%9E%B6%E6%A7%8B/"/>
    
    <category term="Web App Context" scheme="https://rainmakerho.github.io/tags/Web-App-Context/"/>
    
    <category term="瀏覽器擴充功能" scheme="https://rainmakerho.github.io/tags/%E7%80%8F%E8%A6%BD%E5%99%A8%E6%93%B4%E5%85%85%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>用 Browser Extension 打造具網頁背景感知的 AI 助理，補足 LLM 的視野盲點</title>
    <link href="https://rainmakerho.github.io/2025/05/12/ai-browser-extension-integration/"/>
    <id>https://rainmakerho.github.io/2025/05/12/ai-browser-extension-integration/</id>
    <published>2025-05-12T06:40:53.000Z</published>
    <updated>2025-05-29T02:19:36.181Z</updated>
    
    <content type="html"><![CDATA[<p>現在市面上的許多 AI 工具如 ChatGPT、Dify 雖然功能強大，卻常常「看不到你正在用的系統」，造成它無法理解上下文，難以協助處理實際工作流程。例如：CRM、表單、ERP 系統等畫面資訊，AI 根本沒辦法取得。</p><p>所以常常會造成企業導入 AI 工具後，MIS 系統也要同時建立許多 API 來讓這些 AI 工具整合。<br>既然 Web 系統上已經有許多的資料，AI 工具有辦法直接拿這些資訊來回答使用者的問題嗎?</p><p>解決方法就是<strong>瀏覽器擴充功能（Browser Extension）</strong><br>透過瀏覽器擴充功能（Browser Extension），可以利用訊息傳遞（message passing）機制，將 Web App 的背景資訊即時提供給 AI 工具，無需再額外撰寫 API。</p><p>以下我們將一步步地來實作，</p><p>1.<a href="../ai-browser-extension-context-bridge">為什麼 AI 工具需要瀏覽器擴充功能來補全 Web 背景？</a></p><p>2.<a href="../wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a></p><p>3.<a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a></p><p>4.<a href="../../../05/29/ai-autofill-browser-extension/">AI 自動填表，一鍵搞定！最強 Browser Extension 全教學</a></p><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p>實作完成後，使用者只要點選瀏覽器擴充功能，就可以將當前畫面資訊匯整，並透過 AI 來分析資訊，提供相關建議。</p><p>以下為實際操作畫面：</p><img src="/2025/05/12/ai-browser-extension-integration/04.png" class="" title="網頁匯整"><p>整理網頁內容，取出重點項目</p><img src="/2025/05/12/ai-browser-extension-integration/01.png" class="" title="查看行事曆"><p>查詢行事曆</p><img src="/2025/05/12/ai-browser-extension-integration/02.png" class="" title="合約審查"><p>貼上合約內容，讓 AI 依系統畫面欄位來提供建議的輸入值，省去使用者一面看合約檔，一面回到系統來輸入內容</p><p>最後取得網頁表單欄位資訊與使用者輸入的內容，透過 AI 來分析，來自動寫回網頁的表單欄位之中，省去使用者手動填寫的時間。<br>例如 Sales 開會帶回來的 Teams 對話記錄，在 SidePanel 中輸入，然後 AI 會分析出會議內容，並自動寫回網頁的表單欄位之中。</p><img src="/2025/05/12/ai-browser-extension-integration/05.png" class="" title="自動寫回網頁的表單欄位之中"><p>以下為整體執行流程示意圖：</p><img src="/2025/05/12/ai-browser-extension-integration/03.png" class="" title="執行流程"><h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.chrome.com/docs/extensions/get-started?hl=zh-tw">Chrome Browser Extension</a><br><a href="../ai-browser-extension-context-bridge">為什麼 AI 工具需要瀏覽器擴充功能來補全 Web 背景？</a><br><a href="../wxt-langchain-ai-sidepanel-chrome-extension">如何用 WXT 和 LangChain 快速打造具備 SidePanel 的 AI Chrome 擴充功能</a><br><a href="../../../05/14/optimize-sidepanel-ui-for-chatbot-interface-with-llm">優化 SidePanel 的 UI，將其轉變為對話機器人的界面，並探索更多與 LLM 結合的可能性</a><br><a href="https://github.com/rainmakerho/wxtagent/tree/25.05.01">wxtagent 程式碼</a><br><a href="../../../05/29/ai-autofill-browser-extension/">AI 自動填表，一鍵搞定！最強 Browser Extension 全教學</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;現在市面上的許多 AI 工具如 ChatGPT、Dify 雖然功能強大，卻常常「看不到你正在用的系統」，造成它無法理解上下文，難以協助處理實際工作流程。例如：CRM、表單、ERP 系統等畫面資訊，AI 根本沒辦法取得。&lt;/p&gt;
&lt;p&gt;所以常常會造成企業導入 AI 工具後，M</summary>
      
    
    
    
    
    <category term="AI整合" scheme="https://rainmakerho.github.io/tags/AI%E6%95%B4%E5%90%88/"/>
    
    <category term="LangChain" scheme="https://rainmakerho.github.io/tags/LangChain/"/>
    
    <category term="Browser Extension" scheme="https://rainmakerho.github.io/tags/Browser-Extension/"/>
    
    <category term="Web Automation" scheme="https://rainmakerho.github.io/tags/Web-Automation/"/>
    
    <category term="MCP-style" scheme="https://rainmakerho.github.io/tags/MCP-style/"/>
    
    <category term="WXT" scheme="https://rainmakerho.github.io/tags/WXT/"/>
    
    <category term="無API架構" scheme="https://rainmakerho.github.io/tags/%E7%84%A1API%E6%9E%B6%E6%A7%8B/"/>
    
  </entry>
  
</feed>
